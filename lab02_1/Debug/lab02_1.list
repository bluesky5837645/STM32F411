
lab02_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005828  08005828  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005830  08005830  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012e68  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012edc  20012edc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015dea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d41  00000000  00000000  00035e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00038bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f80  00000000  00000000  00039c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022926  00000000  00000000  0003abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b6a  00000000  00000000  0005d4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2f39  00000000  00000000  00070068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142fa1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004940  00000000  00000000  00142ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005764 	.word	0x08005764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005764 	.word	0x08005764

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <USART_Test>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
UART_HandleTypeDef huart2;
void USART_Test(void *pvParameters){
 8000578:	b580      	push	{r7, lr}
 800057a:	b090      	sub	sp, #64	; 0x40
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t Monitortimer = 400;
 8000580:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
	char MonitorTset[30];
	char num[15];
	int i = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
	while(1){
		memset(MonitorTset,'\0',sizeof(MonitorTset));
 800058a:	f107 0318 	add.w	r3, r7, #24
 800058e:	221e      	movs	r2, #30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fc7c 	bl	8004e90 <memset>
		memset(num,'\0',sizeof(num));
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	220f      	movs	r2, #15
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fc75 	bl	8004e90 <memset>
		itoa(i,num,10);
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	220a      	movs	r2, #10
 80005ac:	4619      	mov	r1, r3
 80005ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80005b0:	f004 fc5e 	bl	8004e70 <itoa>
		strcat(num," ");
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fe09 	bl	80001d0 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	4413      	add	r3, r2
 80005c8:	4912      	ldr	r1, [pc, #72]	; (8000614 <USART_Test+0x9c>)
 80005ca:	461a      	mov	r2, r3
 80005cc:	460b      	mov	r3, r1
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	8013      	strh	r3, [r2, #0]
		sprintf(MonitorTset,"The point is %s\n\r",num);
 80005d2:	f107 0208 	add.w	r2, r7, #8
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	490f      	ldr	r1, [pc, #60]	; (8000618 <USART_Test+0xa0>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fc5f 	bl	8004ea0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdf2 	bl	80001d0 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f107 0118 	add.w	r1, r7, #24
 80005f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <USART_Test+0xa4>)
 80005fa:	f001 fe0e 	bl	800221a <HAL_UART_Transmit>
		vTaskDelay(Monitortimer);
 80005fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000600:	f002 ff72 	bl	80034e8 <vTaskDelay>
		Monitortimer += 1;
 8000604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000606:	3301      	adds	r3, #1
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
		i += 1;
 800060a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800060c:	3301      	adds	r3, #1
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
	while(1){
 8000610:	e7bb      	b.n	800058a <USART_Test+0x12>
 8000612:	bf00      	nop
 8000614:	0800577c 	.word	0x0800577c
 8000618:	08005780 	.word	0x08005780
 800061c:	20012dfc 	.word	0x20012dfc

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fb7d 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f815 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f8a7 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f87b 	bl	800072c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(
 8000636:	2300      	movs	r3, #0
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2301      	movs	r3, #1
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	4903      	ldr	r1, [pc, #12]	; (8000650 <main+0x30>)
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <main+0x34>)
 8000646:	f002 fe11 	bl	800326c <xTaskCreate>
  		  "USART_Test",
  		  128,
  		  NULL,
  		  1,
		  NULL);
  vTaskStartScheduler();
 800064a:	f002 ff81 	bl	8003550 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x2e>
 8000650:	08005794 	.word	0x08005794
 8000654:	08000579 	.word	0x08000579

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fc12 	bl	8004e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006cc:	2332      	movs	r3, #50	; 0x32
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fdfb 	bl	80012d8 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 f9ba 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f85c 	bl	80017c8 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 f9a3 	bl	8000a60 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f001 fd0c 	bl	8002180 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f977 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20012dfc 	.word	0x20012dfc
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4ba2      	ldr	r3, [pc, #648]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4aa1      	ldr	r2, [pc, #644]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b9f      	ldr	r3, [pc, #636]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b9b      	ldr	r3, [pc, #620]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a9a      	ldr	r2, [pc, #616]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b98      	ldr	r3, [pc, #608]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b94      	ldr	r3, [pc, #592]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a93      	ldr	r2, [pc, #588]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b91      	ldr	r3, [pc, #580]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b8d      	ldr	r3, [pc, #564]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a8c      	ldr	r2, [pc, #560]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b8a      	ldr	r3, [pc, #552]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b86      	ldr	r3, [pc, #536]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a85      	ldr	r2, [pc, #532]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b83      	ldr	r3, [pc, #524]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b7f      	ldr	r3, [pc, #508]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a7e      	ldr	r2, [pc, #504]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b7c      	ldr	r3, [pc, #496]	; (8000a24 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4879      	ldr	r0, [pc, #484]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 8000844:	f000 fd2e 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	4877      	ldr	r0, [pc, #476]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 800084e:	f000 fd29 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000852:	2200      	movs	r2, #0
 8000854:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000858:	4875      	ldr	r0, [pc, #468]	; (8000a30 <MX_GPIO_Init+0x2b0>)
 800085a:	f000 fd23 	bl	80012a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	486c      	ldr	r0, [pc, #432]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 8000876:	f000 fb79 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4866      	ldr	r0, [pc, #408]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 8000892:	f000 fb6b 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	485e      	ldr	r0, [pc, #376]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 80008b2:	f000 fb5b 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	485a      	ldr	r0, [pc, #360]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 80008cc:	f000 fb4e 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d0:	2310      	movs	r3, #16
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4852      	ldr	r0, [pc, #328]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 80008ec:	f000 fb3e 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f0:	23e0      	movs	r3, #224	; 0xe0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000900:	2305      	movs	r3, #5
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	484a      	ldr	r0, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 800090c:	f000 fb2e 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000910:	2304      	movs	r3, #4
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4845      	ldr	r0, [pc, #276]	; (8000a38 <MX_GPIO_Init+0x2b8>)
 8000924:	f000 fb22 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	483c      	ldr	r0, [pc, #240]	; (8000a38 <MX_GPIO_Init+0x2b8>)
 8000946:	f000 fb11 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800094e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4833      	ldr	r0, [pc, #204]	; (8000a30 <MX_GPIO_Init+0x2b0>)
 8000964:	f000 fb02 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000968:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097a:	2306      	movs	r3, #6
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4829      	ldr	r0, [pc, #164]	; (8000a2c <MX_GPIO_Init+0x2ac>)
 8000986:	f000 faf1 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800098a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4825      	ldr	r0, [pc, #148]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 80009a0:	f000 fae4 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b6:	230a      	movs	r3, #10
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_GPIO_Init+0x2b4>)
 80009c2:	f000 fad3 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4815      	ldr	r0, [pc, #84]	; (8000a30 <MX_GPIO_Init+0x2b0>)
 80009da:	f000 fac7 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f0:	2304      	movs	r3, #4
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	480f      	ldr	r0, [pc, #60]	; (8000a38 <MX_GPIO_Init+0x2b8>)
 80009fc:	f000 fab6 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_GPIO_Init+0x2a8>)
 8000a16:	f000 faa9 	bl	8000f6c <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 f98b 	bl	8000d68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40001400 	.word	0x40001400

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f000 fa1b 	bl	8000f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2037      	movs	r0, #55	; 0x37
 8000b62:	f000 f9d9 	bl	8000f18 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b66:	2037      	movs	r0, #55	; 0x37
 8000b68:	f000 f9f2 	bl	8000f50 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_InitTick+0xa4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_InitTick+0xa4>)
 8000b76:	f043 0320 	orr.w	r3, r3, #32
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_InitTick+0xa4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 0320 	and.w	r3, r3, #32
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 0210 	add.w	r2, r7, #16
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 f814 	bl	8001bc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b98:	f000 ffea 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_InitTick+0xa8>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0c9b      	lsrs	r3, r3, #18
 8000bac:	3b01      	subs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_InitTick+0xb0>)
 8000bb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bd2:	f001 f827 	bl	8001c24 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d104      	bne.n	8000be6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_InitTick+0xac>)
 8000bde:	f001 f87b 	bl	8001cd8 <HAL_TIM_Base_Start_IT>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	20012e40 	.word	0x20012e40
 8000bfc:	40001400 	.word	0x40001400

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM7_IRQHandler+0x10>)
 8000c32:	f001 f8c1 	bl	8001db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20012e40 	.word	0x20012e40

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f004 f8bc 	bl	8004dec <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20020000 	.word	0x20020000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	20000090 	.word	0x20000090
 8000ca8:	20012ee0 	.word	0x20012ee0

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff ffd7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f004 f87b 	bl	8004df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc8d 	bl	8000620 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d14:	08005838 	.word	0x08005838
  ldr r2, =_sbss
 8000d18:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d1c:	20012edc 	.word	0x20012edc

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f8d8 	bl	8000f02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fefa 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fe88 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20012e88 	.word	0x20012e88

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20012e88 	.word	0x20012e88

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff4c 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2a:	f7ff ff61 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff ffb1 	bl	8000e9c <NVIC_EncodePriority>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff80 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff54 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e16b      	b.n	8001260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 815a 	bne.w	800125a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b03      	cmp	r3, #3
 800102a:	d017      	beq.n	800105c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80b4 	beq.w	800125a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b60      	ldr	r3, [pc, #384]	; (8001278 <HAL_GPIO_Init+0x30c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a5f      	ldr	r2, [pc, #380]	; (8001278 <HAL_GPIO_Init+0x30c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <HAL_GPIO_Init+0x30c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110e:	4a5b      	ldr	r2, [pc, #364]	; (800127c <HAL_GPIO_Init+0x310>)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_GPIO_Init+0x314>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d02b      	beq.n	8001192 <HAL_GPIO_Init+0x226>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a51      	ldr	r2, [pc, #324]	; (8001284 <HAL_GPIO_Init+0x318>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x222>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a50      	ldr	r2, [pc, #320]	; (8001288 <HAL_GPIO_Init+0x31c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x21e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <HAL_GPIO_Init+0x320>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x21a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4e      	ldr	r2, [pc, #312]	; (8001290 <HAL_GPIO_Init+0x324>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x216>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <HAL_GPIO_Init+0x328>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x212>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4c      	ldr	r2, [pc, #304]	; (8001298 <HAL_GPIO_Init+0x32c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x20e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4b      	ldr	r2, [pc, #300]	; (800129c <HAL_GPIO_Init+0x330>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x20a>
 8001172:	2307      	movs	r3, #7
 8001174:	e00e      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001176:	2308      	movs	r3, #8
 8001178:	e00c      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800117a:	2306      	movs	r3, #6
 800117c:	e00a      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001182:	2304      	movs	r3, #4
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	; (800127c <HAL_GPIO_Init+0x310>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_GPIO_Init+0x334>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d6:	4a32      	ldr	r2, [pc, #200]	; (80012a0 <HAL_GPIO_Init+0x334>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <HAL_GPIO_Init+0x334>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <HAL_GPIO_Init+0x334>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x334>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <HAL_GPIO_Init+0x334>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_GPIO_Init+0x334>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <HAL_GPIO_Init+0x334>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f ae90 	bls.w	8000f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40021400 	.word	0x40021400
 8001298:	40021800 	.word	0x40021800
 800129c:	40021c00 	.word	0x40021c00
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e264      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d075      	beq.n	80013e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	4ba3      	ldr	r3, [pc, #652]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d00c      	beq.n	800131c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4ba0      	ldr	r3, [pc, #640]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130a:	2b08      	cmp	r3, #8
 800130c:	d112      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130e:	4b9d      	ldr	r3, [pc, #628]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131a:	d10b      	bne.n	8001334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	4b99      	ldr	r3, [pc, #612]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d05b      	beq.n	80013e0 <HAL_RCC_OscConfig+0x108>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d157      	bne.n	80013e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e23f      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x74>
 800133e:	4b91      	ldr	r3, [pc, #580]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a90      	ldr	r2, [pc, #576]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e01d      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x98>
 8001356:	4b8b      	ldr	r3, [pc, #556]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a8a      	ldr	r2, [pc, #552]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b88      	ldr	r3, [pc, #544]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a87      	ldr	r2, [pc, #540]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00b      	b.n	8001388 <HAL_RCC_OscConfig+0xb0>
 8001370:	4b84      	ldr	r3, [pc, #528]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a83      	ldr	r2, [pc, #524]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b81      	ldr	r3, [pc, #516]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a80      	ldr	r2, [pc, #512]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fcfe 	bl	8000d90 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fcfa 	bl	8000d90 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e204      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b76      	ldr	r3, [pc, #472]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0xc0>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fcea 	bl	8000d90 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fce6 	bl	8000d90 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1f0      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	4b6c      	ldr	r3, [pc, #432]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0xe8>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d063      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b62      	ldr	r3, [pc, #392]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d11c      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d116      	bne.n	8001440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d001      	beq.n	800142a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e1c4      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142a:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4952      	ldr	r1, [pc, #328]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	e03a      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d020      	beq.n	800148a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001448:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <HAL_RCC_OscConfig+0x2b0>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff fc9f 	bl	8000d90 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fc9b 	bl	8000d90 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e1a5      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	4b46      	ldr	r3, [pc, #280]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	4940      	ldr	r1, [pc, #256]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <HAL_RCC_OscConfig+0x2b0>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fc7e 	bl	8000d90 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fc7a 	bl	8000d90 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e184      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d030      	beq.n	8001524 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d016      	beq.n	80014f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_RCC_OscConfig+0x2b4>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff fc5e 	bl	8000d90 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc5a 	bl	8000d90 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e164      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x200>
 80014f6:	e015      	b.n	8001524 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_OscConfig+0x2b4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fc47 	bl	8000d90 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fc43 	bl	8000d90 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e14d      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a0 	beq.w	8001672 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_OscConfig+0x2b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d121      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_RCC_OscConfig+0x2b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_RCC_OscConfig+0x2b8>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fc09 	bl	8000d90 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	e011      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ce>
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	42470000 	.word	0x42470000
 800158c:	42470e80 	.word	0x42470e80
 8001590:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001594:	f7ff fbfc 	bl	8000d90 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e106      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b85      	ldr	r3, [pc, #532]	; (80017bc <HAL_RCC_OscConfig+0x4e4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d106      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
 80015ba:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a80      	ldr	r2, [pc, #512]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	e01c      	b.n	8001602 <HAL_RCC_OscConfig+0x32a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x312>
 80015d0:	4b7b      	ldr	r3, [pc, #492]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a7a      	ldr	r2, [pc, #488]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a77      	ldr	r2, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
 80015e8:	e00b      	b.n	8001602 <HAL_RCC_OscConfig+0x32a>
 80015ea:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a74      	ldr	r2, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	4b72      	ldr	r3, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a71      	ldr	r2, [pc, #452]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d015      	beq.n	8001636 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fbc1 	bl	8000d90 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fbbd 	bl	8000d90 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0c5      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ee      	beq.n	8001612 <HAL_RCC_OscConfig+0x33a>
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff fbab 	bl	8000d90 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163c:	e00a      	b.n	8001654 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff fba7 	bl	8000d90 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f241 3288 	movw	r2, #5000	; 0x1388
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e0af      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ee      	bne.n	800163e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d105      	bne.n	8001672 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001666:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a55      	ldr	r2, [pc, #340]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 800166c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 809b 	beq.w	80017b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b08      	cmp	r3, #8
 8001686:	d05c      	beq.n	8001742 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d141      	bne.n	8001714 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_RCC_OscConfig+0x4ec>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb7b 	bl	8000d90 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fb77 	bl	8000d90 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e081      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69da      	ldr	r2, [r3, #28]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	019b      	lsls	r3, r3, #6
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	085b      	lsrs	r3, r3, #1
 80016d4:	3b01      	subs	r3, #1
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	061b      	lsls	r3, r3, #24
 80016e0:	4937      	ldr	r1, [pc, #220]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_RCC_OscConfig+0x4ec>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb50 	bl	8000d90 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fb4c 	bl	8000d90 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e056      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x41c>
 8001712:	e04e      	b.n	80017b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_OscConfig+0x4ec>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fb39 	bl	8000d90 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fb35 	bl	8000d90 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e03f      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x44a>
 8001740:	e037      	b.n	80017b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e032      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_RCC_OscConfig+0x4e8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d028      	beq.n	80017ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d121      	bne.n	80017ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d11a      	bne.n	80017ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001784:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001786:	4293      	cmp	r3, r2
 8001788:	d111      	bne.n	80017ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	3b01      	subs	r3, #1
 8001798:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40007000 	.word	0x40007000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	42470060 	.word	0x42470060

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0cc      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d90c      	bls.n	8001804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b63      	ldr	r3, [pc, #396]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b8      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a58      	ldr	r2, [pc, #352]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	494d      	ldr	r1, [pc, #308]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d044      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d119      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e07f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d003      	beq.n	8001886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	2b03      	cmp	r3, #3
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e06f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e067      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f023 0203 	bic.w	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4934      	ldr	r1, [pc, #208]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b8:	f7ff fa6a 	bl	8000d90 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c0:	f7ff fa66 	bl	8000d90 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e04f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 020c 	and.w	r2, r3, #12
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d1eb      	bne.n	80018c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d20c      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e032      	b.n	8001976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4916      	ldr	r1, [pc, #88]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	490e      	ldr	r1, [pc, #56]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194e:	f000 f821 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001952:	4602      	mov	r2, r0
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	490a      	ldr	r1, [pc, #40]	; (8001988 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	5ccb      	ldrb	r3, [r1, r3]
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f8ec 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00
 8001984:	40023800 	.word	0x40023800
 8001988:	080057b8 	.word	0x080057b8
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ac:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d00d      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x40>
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	f200 80bd 	bhi.w	8001b38 <HAL_RCC_GetSysClockFreq+0x1a4>
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x34>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x3a>
 80019c6:	e0b7      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b61      	ldr	r3, [pc, #388]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019ca:	60bb      	str	r3, [r7, #8]
       break;
 80019cc:	e0b7      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ce:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019d0:	60bb      	str	r3, [r7, #8]
      break;
 80019d2:	e0b4      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d4:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019de:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d04d      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	4b58      	ldr	r3, [pc, #352]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	461a      	mov	r2, r3
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	ea02 0800 	and.w	r8, r2, r0
 8001a02:	ea03 0901 	and.w	r9, r3, r1
 8001a06:	4640      	mov	r0, r8
 8001a08:	4649      	mov	r1, r9
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	014b      	lsls	r3, r1, #5
 8001a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a18:	0142      	lsls	r2, r0, #5
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	ebb0 0008 	subs.w	r0, r0, r8
 8001a22:	eb61 0109 	sbc.w	r1, r1, r9
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	018b      	lsls	r3, r1, #6
 8001a30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a34:	0182      	lsls	r2, r0, #6
 8001a36:	1a12      	subs	r2, r2, r0
 8001a38:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	00d9      	lsls	r1, r3, #3
 8001a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a4a:	00d0      	lsls	r0, r2, #3
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	eb12 0208 	adds.w	r2, r2, r8
 8001a54:	eb43 0309 	adc.w	r3, r3, r9
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	0259      	lsls	r1, r3, #9
 8001a62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a66:	0250      	lsls	r0, r2, #9
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	f7fe fc02 	bl	8000280 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e04a      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	ea02 0400 	and.w	r4, r2, r0
 8001a9e:	ea03 0501 	and.w	r5, r3, r1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	014b      	lsls	r3, r1, #5
 8001ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ab4:	0142      	lsls	r2, r0, #5
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	1b00      	subs	r0, r0, r4
 8001abc:	eb61 0105 	sbc.w	r1, r1, r5
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	018b      	lsls	r3, r1, #6
 8001aca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ace:	0182      	lsls	r2, r0, #6
 8001ad0:	1a12      	subs	r2, r2, r0
 8001ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	00d9      	lsls	r1, r3, #3
 8001ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ae4:	00d0      	lsls	r0, r2, #3
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	1912      	adds	r2, r2, r4
 8001aec:	eb45 0303 	adc.w	r3, r5, r3
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	0299      	lsls	r1, r3, #10
 8001afa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001afe:	0290      	lsls	r0, r2, #10
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	f7fe fbb6 	bl	8000280 <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	60bb      	str	r3, [r7, #8]
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b3a:	60bb      	str	r3, [r7, #8]
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0a9b      	lsrs	r3, r3, #10
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	080057c8 	.word	0x080057c8

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	f7ff ffdc 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0b5b      	lsrs	r3, r3, #13
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	080057c8 	.word	0x080057c8

08001bc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	220f      	movs	r2, #15
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_RCC_GetClockConfig+0x60>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0207 	and.w	r2, r3, #7
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e041      	b.n	8001cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f839 	bl	8001cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f9d8 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04e      	b.n	8001d8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d022      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1a:	d01d      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d018      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00e      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <HAL_TIM_Base_Start_IT+0xd4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d004      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d010      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7a:	e007      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40000800 	.word	0x40000800
 8001da8:	40000c00 	.word	0x40000c00
 8001dac:	40010400 	.word	0x40010400
 8001db0:	40014000 	.word	0x40014000
 8001db4:	40001800 	.word	0x40001800

08001db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0202 	mvn.w	r2, #2
 8001de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8ee 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8e0 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8f1 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0204 	mvn.w	r2, #4
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8c4 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8b6 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8c7 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0208 	mvn.w	r2, #8
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2204      	movs	r2, #4
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f89a 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f88c 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f89d 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0210 	mvn.w	r2, #16
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f870 	bl	8001fdc <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f862 	bl	8001fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f873 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fd80 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f902 	bl	800216c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f838 	bl	8002004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0220 	mvn.w	r2, #32
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8cc 	bl	8002158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	; (800212c <TIM_Base_SetConfig+0x114>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d00f      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <TIM_Base_SetConfig+0x118>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00b      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <TIM_Base_SetConfig+0x11c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <TIM_Base_SetConfig+0x120>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_Base_SetConfig+0x40>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3a      	ldr	r2, [pc, #232]	; (800213c <TIM_Base_SetConfig+0x124>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <TIM_Base_SetConfig+0x114>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d027      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <TIM_Base_SetConfig+0x118>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d023      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <TIM_Base_SetConfig+0x11c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a2a      	ldr	r2, [pc, #168]	; (8002138 <TIM_Base_SetConfig+0x120>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a29      	ldr	r2, [pc, #164]	; (800213c <TIM_Base_SetConfig+0x124>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d017      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a28      	ldr	r2, [pc, #160]	; (8002140 <TIM_Base_SetConfig+0x128>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <TIM_Base_SetConfig+0x12c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00f      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <TIM_Base_SetConfig+0x130>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00b      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM_Base_SetConfig+0x134>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <TIM_Base_SetConfig+0x138>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d003      	beq.n	80020ca <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a23      	ldr	r2, [pc, #140]	; (8002154 <TIM_Base_SetConfig+0x13c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d108      	bne.n	80020dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <TIM_Base_SetConfig+0x114>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_Base_SetConfig+0xf8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <TIM_Base_SetConfig+0x124>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800
 800214c:	40001800 	.word	0x40001800
 8002150:	40001c00 	.word	0x40001c00
 8002154:	40002000 	.word	0x40002000

08002158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e03f      	b.n	8002212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fc88 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f929 	bl	800241c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b08a      	sub	sp, #40	; 0x28
 800221e:	af02      	add	r7, sp, #8
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b20      	cmp	r3, #32
 8002238:	d17c      	bne.n	8002334 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_UART_Transmit+0x2c>
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e075      	b.n	8002336 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_UART_Transmit+0x3e>
 8002254:	2302      	movs	r3, #2
 8002256:	e06e      	b.n	8002336 <HAL_UART_Transmit+0x11c>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	; 0x21
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800226e:	f7fe fd8f 	bl	8000d90 <HAL_GetTick>
 8002272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002288:	d108      	bne.n	800229c <HAL_UART_Transmit+0x82>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d104      	bne.n	800229c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e003      	b.n	80022a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022ac:	e02a      	b.n	8002304 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f840 	bl	800233e <UART_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e036      	b.n	8002336 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3302      	adds	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e007      	b.n	80022f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1cf      	bne.n	80022ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f810 	bl	800233e <UART_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b090      	sub	sp, #64	; 0x40
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234e:	e050      	b.n	80023f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d04c      	beq.n	80023f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <UART_WaitOnFlagUntilTimeout+0x30>
 800235e:	f7fe fd17 	bl	8000d90 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800236a:	429a      	cmp	r2, r3
 800236c:	d241      	bcs.n	80023f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	e853 3f00 	ldrex	r3, [r3]
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800238e:	637a      	str	r2, [r7, #52]	; 0x34
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e5      	bne.n	800236e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	e853 3f00 	ldrex	r3, [r3]
 80023b0:	613b      	str	r3, [r7, #16]
   return(result);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3314      	adds	r3, #20
 80023c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c2:	623a      	str	r2, [r7, #32]
 80023c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	69f9      	ldr	r1, [r7, #28]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	e841 2300 	strex	r3, r2, [r1]
 80023ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1e5      	bne.n	80023a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e00f      	b.n	8002412 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	429a      	cmp	r2, r3
 800240e:	d09f      	beq.n	8002350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3740      	adds	r7, #64	; 0x40
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002420:	b09f      	sub	sp, #124	; 0x7c
 8002422:	af00      	add	r7, sp, #0
 8002424:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002432:	68d9      	ldr	r1, [r3, #12]
 8002434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	ea40 0301 	orr.w	r3, r0, r1
 800243c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	431a      	orrs	r2, r3
 8002448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	431a      	orrs	r2, r3
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4313      	orrs	r3, r2
 8002454:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002460:	f021 010c 	bic.w	r1, r1, #12
 8002464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800246a:	430b      	orrs	r3, r1
 800246c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	6999      	ldr	r1, [r3, #24]
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	ea40 0301 	orr.w	r3, r0, r1
 8002484:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4bc5      	ldr	r3, [pc, #788]	; (80027a0 <UART_SetConfig+0x384>)
 800248c:	429a      	cmp	r2, r3
 800248e:	d004      	beq.n	800249a <UART_SetConfig+0x7e>
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4bc3      	ldr	r3, [pc, #780]	; (80027a4 <UART_SetConfig+0x388>)
 8002496:	429a      	cmp	r2, r3
 8002498:	d103      	bne.n	80024a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800249a:	f7ff fb7d 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 800249e:	6778      	str	r0, [r7, #116]	; 0x74
 80024a0:	e002      	b.n	80024a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a2:	f7ff fb65 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 80024a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b0:	f040 80b6 	bne.w	8002620 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b6:	461c      	mov	r4, r3
 80024b8:	f04f 0500 	mov.w	r5, #0
 80024bc:	4622      	mov	r2, r4
 80024be:	462b      	mov	r3, r5
 80024c0:	1891      	adds	r1, r2, r2
 80024c2:	6439      	str	r1, [r7, #64]	; 0x40
 80024c4:	415b      	adcs	r3, r3
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
 80024c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024cc:	1912      	adds	r2, r2, r4
 80024ce:	eb45 0303 	adc.w	r3, r5, r3
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	00d9      	lsls	r1, r3, #3
 80024dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024e0:	00d0      	lsls	r0, r2, #3
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	1911      	adds	r1, r2, r4
 80024e8:	6639      	str	r1, [r7, #96]	; 0x60
 80024ea:	416b      	adcs	r3, r5
 80024ec:	667b      	str	r3, [r7, #100]	; 0x64
 80024ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	1891      	adds	r1, r2, r2
 80024fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80024fc:	415b      	adcs	r3, r3
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002504:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002508:	f7fd feba 	bl	8000280 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4ba5      	ldr	r3, [pc, #660]	; (80027a8 <UART_SetConfig+0x38c>)
 8002512:	fba3 2302 	umull	r2, r3, r3, r2
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	011e      	lsls	r6, r3, #4
 800251a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251c:	461c      	mov	r4, r3
 800251e:	f04f 0500 	mov.w	r5, #0
 8002522:	4622      	mov	r2, r4
 8002524:	462b      	mov	r3, r5
 8002526:	1891      	adds	r1, r2, r2
 8002528:	6339      	str	r1, [r7, #48]	; 0x30
 800252a:	415b      	adcs	r3, r3
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
 800252e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002532:	1912      	adds	r2, r2, r4
 8002534:	eb45 0303 	adc.w	r3, r5, r3
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	00d9      	lsls	r1, r3, #3
 8002542:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002546:	00d0      	lsls	r0, r2, #3
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	1911      	adds	r1, r2, r4
 800254e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002550:	416b      	adcs	r3, r5
 8002552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	461a      	mov	r2, r3
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	1891      	adds	r1, r2, r2
 8002560:	62b9      	str	r1, [r7, #40]	; 0x28
 8002562:	415b      	adcs	r3, r3
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800256a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800256e:	f7fd fe87 	bl	8000280 <__aeabi_uldivmod>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <UART_SetConfig+0x38c>)
 8002578:	fba3 1302 	umull	r1, r3, r3, r2
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	2164      	movs	r1, #100	; 0x64
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	3332      	adds	r3, #50	; 0x32
 800258a:	4a87      	ldr	r2, [pc, #540]	; (80027a8 <UART_SetConfig+0x38c>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002598:	441e      	add	r6, r3
 800259a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259c:	4618      	mov	r0, r3
 800259e:	f04f 0100 	mov.w	r1, #0
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	1894      	adds	r4, r2, r2
 80025a8:	623c      	str	r4, [r7, #32]
 80025aa:	415b      	adcs	r3, r3
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
 80025ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025b2:	1812      	adds	r2, r2, r0
 80025b4:	eb41 0303 	adc.w	r3, r1, r3
 80025b8:	f04f 0400 	mov.w	r4, #0
 80025bc:	f04f 0500 	mov.w	r5, #0
 80025c0:	00dd      	lsls	r5, r3, #3
 80025c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025c6:	00d4      	lsls	r4, r2, #3
 80025c8:	4622      	mov	r2, r4
 80025ca:	462b      	mov	r3, r5
 80025cc:	1814      	adds	r4, r2, r0
 80025ce:	653c      	str	r4, [r7, #80]	; 0x50
 80025d0:	414b      	adcs	r3, r1
 80025d2:	657b      	str	r3, [r7, #84]	; 0x54
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	461a      	mov	r2, r3
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	1891      	adds	r1, r2, r2
 80025e0:	61b9      	str	r1, [r7, #24]
 80025e2:	415b      	adcs	r3, r3
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025ee:	f7fd fe47 	bl	8000280 <__aeabi_uldivmod>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4b6c      	ldr	r3, [pc, #432]	; (80027a8 <UART_SetConfig+0x38c>)
 80025f8:	fba3 1302 	umull	r1, r3, r3, r2
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	2164      	movs	r1, #100	; 0x64
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3332      	adds	r3, #50	; 0x32
 800260a:	4a67      	ldr	r2, [pc, #412]	; (80027a8 <UART_SetConfig+0x38c>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	f003 0207 	and.w	r2, r3, #7
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4432      	add	r2, r6
 800261c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800261e:	e0b9      	b.n	8002794 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	461c      	mov	r4, r3
 8002624:	f04f 0500 	mov.w	r5, #0
 8002628:	4622      	mov	r2, r4
 800262a:	462b      	mov	r3, r5
 800262c:	1891      	adds	r1, r2, r2
 800262e:	6139      	str	r1, [r7, #16]
 8002630:	415b      	adcs	r3, r3
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002638:	1912      	adds	r2, r2, r4
 800263a:	eb45 0303 	adc.w	r3, r5, r3
 800263e:	f04f 0000 	mov.w	r0, #0
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	00d9      	lsls	r1, r3, #3
 8002648:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800264c:	00d0      	lsls	r0, r2, #3
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	eb12 0804 	adds.w	r8, r2, r4
 8002656:	eb43 0905 	adc.w	r9, r3, r5
 800265a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	008b      	lsls	r3, r1, #2
 800266e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002672:	0082      	lsls	r2, r0, #2
 8002674:	4640      	mov	r0, r8
 8002676:	4649      	mov	r1, r9
 8002678:	f7fd fe02 	bl	8000280 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <UART_SetConfig+0x38c>)
 8002682:	fba3 2302 	umull	r2, r3, r3, r2
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	011e      	lsls	r6, r3, #4
 800268a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268c:	4618      	mov	r0, r3
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	1894      	adds	r4, r2, r2
 8002698:	60bc      	str	r4, [r7, #8]
 800269a:	415b      	adcs	r3, r3
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a2:	1812      	adds	r2, r2, r0
 80026a4:	eb41 0303 	adc.w	r3, r1, r3
 80026a8:	f04f 0400 	mov.w	r4, #0
 80026ac:	f04f 0500 	mov.w	r5, #0
 80026b0:	00dd      	lsls	r5, r3, #3
 80026b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026b6:	00d4      	lsls	r4, r2, #3
 80026b8:	4622      	mov	r2, r4
 80026ba:	462b      	mov	r3, r5
 80026bc:	1814      	adds	r4, r2, r0
 80026be:	64bc      	str	r4, [r7, #72]	; 0x48
 80026c0:	414b      	adcs	r3, r1
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	008b      	lsls	r3, r1, #2
 80026d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026dc:	0082      	lsls	r2, r0, #2
 80026de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026e2:	f7fd fdcd 	bl	8000280 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4b2f      	ldr	r3, [pc, #188]	; (80027a8 <UART_SetConfig+0x38c>)
 80026ec:	fba3 1302 	umull	r1, r3, r3, r2
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	2164      	movs	r1, #100	; 0x64
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	3332      	adds	r3, #50	; 0x32
 80026fe:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <UART_SetConfig+0x38c>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800270a:	441e      	add	r6, r3
 800270c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800270e:	4618      	mov	r0, r3
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	1894      	adds	r4, r2, r2
 800271a:	603c      	str	r4, [r7, #0]
 800271c:	415b      	adcs	r3, r3
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002724:	1812      	adds	r2, r2, r0
 8002726:	eb41 0303 	adc.w	r3, r1, r3
 800272a:	f04f 0400 	mov.w	r4, #0
 800272e:	f04f 0500 	mov.w	r5, #0
 8002732:	00dd      	lsls	r5, r3, #3
 8002734:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002738:	00d4      	lsls	r4, r2, #3
 800273a:	4622      	mov	r2, r4
 800273c:	462b      	mov	r3, r5
 800273e:	eb12 0a00 	adds.w	sl, r2, r0
 8002742:	eb43 0b01 	adc.w	fp, r3, r1
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	008b      	lsls	r3, r1, #2
 800275a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800275e:	0082      	lsls	r2, r0, #2
 8002760:	4650      	mov	r0, sl
 8002762:	4659      	mov	r1, fp
 8002764:	f7fd fd8c 	bl	8000280 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <UART_SetConfig+0x38c>)
 800276e:	fba3 1302 	umull	r1, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2164      	movs	r1, #100	; 0x64
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	3332      	adds	r3, #50	; 0x32
 8002780:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <UART_SetConfig+0x38c>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4432      	add	r2, r6
 8002792:	609a      	str	r2, [r3, #8]
}
 8002794:	bf00      	nop
 8002796:	377c      	adds	r7, #124	; 0x7c
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800279e:	bf00      	nop
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40011400 	.word	0x40011400
 80027a8:	51eb851f 	.word	0x51eb851f

080027ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0208 	add.w	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 32ff 	mov.w	r2, #4294967295
 80027c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0208 	add.w	r2, r3, #8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f103 0208 	add.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d103      	bne.n	800286e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e00c      	b.n	8002888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3308      	adds	r3, #8
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e002      	b.n	800287c <vListInsert+0x2e>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d2f6      	bcs.n	8002876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	601a      	str	r2, [r3, #0]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6892      	ldr	r2, [r2, #8]
 80028d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6852      	ldr	r2, [r2, #4]
 80028e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d103      	bne.n	80028f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	1e5a      	subs	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800293e:	f001 ff59 	bl	80047f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	3b01      	subs	r3, #1
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	441a      	add	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	22ff      	movs	r2, #255	; 0xff
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d114      	bne.n	80029be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01a      	beq.n	80029d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3310      	adds	r3, #16
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f841 	bl	8003a28 <xTaskRemoveFromEventList>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d012      	beq.n	80029d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <xQueueGenericReset+0xcc>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	e009      	b.n	80029d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3310      	adds	r3, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fef2 	bl	80027ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3324      	adds	r3, #36	; 0x24
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff feed 	bl	80027ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029d2:	f001 ff3f 	bl	8004854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <xQueueGenericCreate+0x2a>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	613b      	str	r3, [r7, #16]
}
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e004      	b.n	8002a24 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3350      	adds	r3, #80	; 0x50
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 f805 	bl	8004a38 <pvPortMalloc>
 8002a2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3350      	adds	r3, #80	; 0x50
 8002a3e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a40:	79fa      	ldrb	r2, [r7, #7]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f805 	bl	8002a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a52:	69bb      	ldr	r3, [r7, #24]
	}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e002      	b.n	8002a7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	69b8      	ldr	r0, [r7, #24]
 8002a8e:	f7ff ff41 	bl	8002914 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <xQueueGenericSend+0x32>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d103      	bne.n	8002ae4 <xQueueGenericSend+0x40>
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <xQueueGenericSend+0x44>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <xQueueGenericSend+0x46>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <xQueueGenericSend+0x60>
	__asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b00:	bf00      	nop
 8002b02:	e7fe      	b.n	8002b02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d103      	bne.n	8002b12 <xQueueGenericSend+0x6e>
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <xQueueGenericSend+0x72>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <xQueueGenericSend+0x74>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericSend+0x8e>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	623b      	str	r3, [r7, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b32:	f001 f915 	bl	8003d60 <xTaskGetSchedulerState>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <xQueueGenericSend+0x9e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSend+0xa2>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSend+0xa4>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericSend+0xbe>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	61fb      	str	r3, [r7, #28]
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b62:	f001 fe47 	bl	80047f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <xQueueGenericSend+0xd4>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d129      	bne.n	8002bcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7e:	f000 fa07 	bl	8002f90 <prvCopyDataToQueue>
 8002b82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	3324      	adds	r3, #36	; 0x24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 ff49 	bl	8003a28 <xTaskRemoveFromEventList>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <xQueueGenericSend+0x1f8>)
 8002b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	e00a      	b.n	8002bc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <xQueueGenericSend+0x1f8>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bc4:	f001 fe46 	bl	8004854 <vPortExitCritical>
				return pdPASS;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e063      	b.n	8002c94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bd2:	f001 fe3f 	bl	8004854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e05c      	b.n	8002c94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 ff81 	bl	8003aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bee:	f001 fe31 	bl	8004854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bf2:	f000 fcfb 	bl	80035ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bf6:	f001 fdfd 	bl	80047f4 <vPortEnterCritical>
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d103      	bne.n	8002c10 <xQueueGenericSend+0x16c>
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d103      	bne.n	8002c26 <xQueueGenericSend+0x182>
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c26:	f001 fe15 	bl	8004854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c2a:	1d3a      	adds	r2, r7, #4
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 ff70 	bl	8003b18 <xTaskCheckForTimeOut>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d124      	bne.n	8002c88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c40:	f000 fa9e 	bl	8003180 <prvIsQueueFull>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fe98 	bl	8003988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c5a:	f000 fa29 	bl	80030b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c5e:	f000 fcd3 	bl	8003608 <xTaskResumeAll>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f af7c 	bne.w	8002b62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <xQueueGenericSend+0x1f8>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	e772      	b.n	8002b62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7e:	f000 fa17 	bl	80030b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c82:	f000 fcc1 	bl	8003608 <xTaskResumeAll>
 8002c86:	e76c      	b.n	8002b62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8a:	f000 fa11 	bl	80030b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c8e:	f000 fcbb 	bl	8003608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3738      	adds	r7, #56	; 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <xQueueGenericSendFromISR+0x3c>
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueGenericSendFromISR+0x40>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <xQueueGenericSendFromISR+0x42>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	623b      	str	r3, [r7, #32]
}
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d103      	bne.n	8002d0a <xQueueGenericSendFromISR+0x6a>
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <xQueueGenericSendFromISR+0x6e>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericSendFromISR+0x70>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	61fb      	str	r3, [r7, #28]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d2a:	f001 fe45 	bl	80049b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	61ba      	str	r2, [r7, #24]
 8002d44:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d46:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <xQueueGenericSendFromISR+0xbc>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d12c      	bne.n	8002db6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6c:	f000 f910 	bl	8002f90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d112      	bne.n	8002da0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	3324      	adds	r3, #36	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fe4e 	bl	8003a28 <xTaskRemoveFromEventList>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00e      	beq.n	8002db0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e007      	b.n	8002db0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002da0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002da4:	3301      	adds	r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	b25a      	sxtb	r2, r3
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002db0:	2301      	movs	r3, #1
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002db4:	e001      	b.n	8002dba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3738      	adds	r7, #56	; 0x38
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <xQueueReceive+0x30>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	623b      	str	r3, [r7, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <xQueueReceive+0x3e>
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <xQueueReceive+0x42>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <xQueueReceive+0x44>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <xQueueReceive+0x5e>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61fb      	str	r3, [r7, #28]
}
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e2e:	f000 ff97 	bl	8003d60 <xTaskGetSchedulerState>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <xQueueReceive+0x6e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <xQueueReceive+0x72>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <xQueueReceive+0x74>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <xQueueReceive+0x8e>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	61bb      	str	r3, [r7, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e5e:	f001 fcc9 	bl	80047f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01f      	beq.n	8002eae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e72:	f000 f8f7 	bl	8003064 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00f      	beq.n	8002ea6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	3310      	adds	r3, #16
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fdcc 	bl	8003a28 <xTaskRemoveFromEventList>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <xQueueReceive+0x1bc>)
 8002e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ea6:	f001 fcd5 	bl	8004854 <vPortExitCritical>
				return pdPASS;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e069      	b.n	8002f82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eb4:	f001 fcce 	bl	8004854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e062      	b.n	8002f82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec2:	f107 0310 	add.w	r3, r7, #16
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fe10 	bl	8003aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ed0:	f001 fcc0 	bl	8004854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ed4:	f000 fb8a 	bl	80035ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ed8:	f001 fc8c 	bl	80047f4 <vPortEnterCritical>
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d103      	bne.n	8002ef2 <xQueueReceive+0x122>
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d103      	bne.n	8002f08 <xQueueReceive+0x138>
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f08:	f001 fca4 	bl	8004854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f0c:	1d3a      	adds	r2, r7, #4
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fdff 	bl	8003b18 <xTaskCheckForTimeOut>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d123      	bne.n	8002f68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f22:	f000 f917 	bl	8003154 <prvIsQueueEmpty>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d017      	beq.n	8002f5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fd27 	bl	8003988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3c:	f000 f8b8 	bl	80030b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f40:	f000 fb62 	bl	8003608 <xTaskResumeAll>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d189      	bne.n	8002e5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <xQueueReceive+0x1bc>)
 8002f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	e780      	b.n	8002e5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5e:	f000 f8a7 	bl	80030b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f62:	f000 fb51 	bl	8003608 <xTaskResumeAll>
 8002f66:	e77a      	b.n	8002e5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6a:	f000 f8a1 	bl	80030b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f6e:	f000 fb4b 	bl	8003608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f74:	f000 f8ee 	bl	8003154 <prvIsQueueEmpty>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f43f af6f 	beq.w	8002e5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3730      	adds	r7, #48	; 0x30
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d14d      	bne.n	8003052 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 feee 	bl	8003d9c <xTaskPriorityDisinherit>
 8002fc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	e043      	b.n	8003052 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d119      	bne.n	8003004 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6858      	ldr	r0, [r3, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	f001 ff4a 	bl	8004e74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	441a      	add	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d32b      	bcc.n	8003052 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e026      	b.n	8003052 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68d8      	ldr	r0, [r3, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	461a      	mov	r2, r3
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	f001 ff30 	bl	8004e74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	425b      	negs	r3, r3
 800301e:	441a      	add	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d207      	bcs.n	8003040 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	425b      	negs	r3, r3
 800303a:	441a      	add	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d105      	bne.n	8003052 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	3b01      	subs	r3, #1
 8003050:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800305a:	697b      	ldr	r3, [r7, #20]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d018      	beq.n	80030a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	441a      	add	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	d303      	bcc.n	8003098 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68d9      	ldr	r1, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	461a      	mov	r2, r3
 80030a2:	6838      	ldr	r0, [r7, #0]
 80030a4:	f001 fee6 	bl	8004e74 <memcpy>
	}
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030b8:	f001 fb9c 	bl	80047f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030c4:	e011      	b.n	80030ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3324      	adds	r3, #36	; 0x24
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fca8 	bl	8003a28 <xTaskRemoveFromEventList>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030de:	f000 fd7d 	bl	8003bdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	dce9      	bgt.n	80030c6 <prvUnlockQueue+0x16>
 80030f2:	e000      	b.n	80030f6 <prvUnlockQueue+0x46>
					break;
 80030f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	22ff      	movs	r2, #255	; 0xff
 80030fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030fe:	f001 fba9 	bl	8004854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003102:	f001 fb77 	bl	80047f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800310c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800310e:	e011      	b.n	8003134 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3310      	adds	r3, #16
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fc83 	bl	8003a28 <xTaskRemoveFromEventList>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003128:	f000 fd58 	bl	8003bdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	3b01      	subs	r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003138:	2b00      	cmp	r3, #0
 800313a:	dce9      	bgt.n	8003110 <prvUnlockQueue+0x60>
 800313c:	e000      	b.n	8003140 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800313e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	22ff      	movs	r2, #255	; 0xff
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003148:	f001 fb84 	bl	8004854 <vPortExitCritical>
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800315c:	f001 fb4a 	bl	80047f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e001      	b.n	8003172 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003172:	f001 fb6f 	bl	8004854 <vPortExitCritical>

	return xReturn;
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003188:	f001 fb34 	bl	80047f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	429a      	cmp	r2, r3
 8003196:	d102      	bne.n	800319e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e001      	b.n	80031a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031a2:	f001 fb57 	bl	8004854 <vPortExitCritical>

	return xReturn;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e014      	b.n	80031ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <vQueueAddToRegistry+0x50>)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <vQueueAddToRegistry+0x50>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <vQueueAddToRegistry+0x50>)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031e2:	e006      	b.n	80031f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	d9e7      	bls.n	80031c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20012e8c 	.word	0x20012e8c

08003204 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003214:	f001 faee 	bl	80047f4 <vPortEnterCritical>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800321e:	b25b      	sxtb	r3, r3
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d103      	bne.n	800322e <vQueueWaitForMessageRestricted+0x2a>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003234:	b25b      	sxtb	r3, r3
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	d103      	bne.n	8003244 <vQueueWaitForMessageRestricted+0x40>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003244:	f001 fb06 	bl	8004854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fbb9 	bl	80039d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff26 	bl	80030b0 <prvUnlockQueue>
	}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af04      	add	r7, sp, #16
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4618      	mov	r0, r3
 8003282:	f001 fbd9 	bl	8004a38 <pvPortMalloc>
 8003286:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00e      	beq.n	80032ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800328e:	2058      	movs	r0, #88	; 0x58
 8003290:	f001 fbd2 	bl	8004a38 <pvPortMalloc>
 8003294:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
 80032a2:	e005      	b.n	80032b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032a4:	6978      	ldr	r0, [r7, #20]
 80032a6:	f001 fc8b 	bl	8004bc0 <vPortFree>
 80032aa:	e001      	b.n	80032b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d013      	beq.n	80032de <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	2300      	movs	r3, #0
 80032ba:	9303      	str	r3, [sp, #12]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	9302      	str	r3, [sp, #8]
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f80e 	bl	80032ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032d2:	69f8      	ldr	r0, [r7, #28]
 80032d4:	f000 f89a 	bl	800340c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032d8:	2301      	movs	r3, #1
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e002      	b.n	80032e4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032e4:	69bb      	ldr	r3, [r7, #24]
	}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b088      	sub	sp, #32
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	461a      	mov	r2, r3
 8003306:	21a5      	movs	r1, #165	; 0xa5
 8003308:	f001 fdc2 	bl	8004e90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003316:	3b01      	subs	r3, #1
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f023 0307 	bic.w	r3, r3, #7
 8003324:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	617b      	str	r3, [r7, #20]
}
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01f      	beq.n	800338c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e012      	b.n	8003378 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	7819      	ldrb	r1, [r3, #0]
 800335a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	3334      	adds	r3, #52	; 0x34
 8003362:	460a      	mov	r2, r1
 8003364:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3301      	adds	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b09      	cmp	r3, #9
 800337c:	d9e9      	bls.n	8003352 <prvInitialiseNewTask+0x64>
 800337e:	e000      	b.n	8003382 <prvInitialiseNewTask+0x94>
			{
				break;
 8003380:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800338a:	e003      	b.n	8003394 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	2b04      	cmp	r3, #4
 8003398:	d901      	bls.n	800339e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800339a:	2304      	movs	r3, #4
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	2200      	movs	r2, #0
 80033ae:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fa19 	bl	80027ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	3318      	adds	r3, #24
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fa14 	bl	80027ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	f1c3 0205 	rsb	r2, r3, #5
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	2200      	movs	r2, #0
 80033de:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	69b8      	ldr	r0, [r7, #24]
 80033ee:	f001 f8d3 	bl	8004598 <pxPortInitialiseStack>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003402:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003404:	bf00      	nop
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003414:	f001 f9ee 	bl	80047f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003418:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <prvAddNewTaskToReadyList+0xc0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <prvAddNewTaskToReadyList+0xc0>)
 8003420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <prvAddNewTaskToReadyList+0xc4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800342a:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <prvAddNewTaskToReadyList+0xc4>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <prvAddNewTaskToReadyList+0xc0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d110      	bne.n	800345a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003438:	f000 fbf4 	bl	8003c24 <prvInitialiseTaskLists>
 800343c:	e00d      	b.n	800345a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <prvAddNewTaskToReadyList+0xc8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <prvAddNewTaskToReadyList+0xc4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	429a      	cmp	r2, r3
 8003452:	d802      	bhi.n	800345a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003454:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <prvAddNewTaskToReadyList+0xc4>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <prvAddNewTaskToReadyList+0xcc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3301      	adds	r3, #1
 8003460:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <prvAddNewTaskToReadyList+0xcc>)
 8003462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <prvAddNewTaskToReadyList+0xcc>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	2201      	movs	r2, #1
 8003472:	409a      	lsls	r2, r3
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <prvAddNewTaskToReadyList+0xd0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4313      	orrs	r3, r2
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <prvAddNewTaskToReadyList+0xd0>)
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <prvAddNewTaskToReadyList+0xd4>)
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f7ff f9b6 	bl	8002806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800349a:	f001 f9db 	bl	8004854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <prvAddNewTaskToReadyList+0xc8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <prvAddNewTaskToReadyList+0xc4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d207      	bcs.n	80034c4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <prvAddNewTaskToReadyList+0xd8>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	2000016c 	.word	0x2000016c
 80034d0:	20000094 	.word	0x20000094
 80034d4:	20000178 	.word	0x20000178
 80034d8:	20000188 	.word	0x20000188
 80034dc:	20000174 	.word	0x20000174
 80034e0:	20000098 	.word	0x20000098
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d017      	beq.n	800352a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <vTaskDelay+0x60>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <vTaskDelay+0x30>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60bb      	str	r3, [r7, #8]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003518:	f000 f868 	bl	80035ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800351c:	2100      	movs	r1, #0
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fcc2 	bl	8003ea8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003524:	f000 f870 	bl	8003608 <xTaskResumeAll>
 8003528:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <vTaskDelay+0x64>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000194 	.word	0x20000194
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003556:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <vTaskStartScheduler+0x84>)
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	2282      	movs	r2, #130	; 0x82
 8003562:	491d      	ldr	r1, [pc, #116]	; (80035d8 <vTaskStartScheduler+0x88>)
 8003564:	481d      	ldr	r0, [pc, #116]	; (80035dc <vTaskStartScheduler+0x8c>)
 8003566:	f7ff fe81 	bl	800326c <xTaskCreate>
 800356a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003572:	f000 fcff 	bl	8003f74 <xTimerCreateTimerTask>
 8003576:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d116      	bne.n	80035ac <vTaskStartScheduler+0x5c>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60bb      	str	r3, [r7, #8]
}
 8003590:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <vTaskStartScheduler+0x90>)
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <vTaskStartScheduler+0x94>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <vTaskStartScheduler+0x98>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035a6:	f001 f883 	bl	80046b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035aa:	e00e      	b.n	80035ca <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d10a      	bne.n	80035ca <vTaskStartScheduler+0x7a>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	607b      	str	r3, [r7, #4]
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <vTaskStartScheduler+0x78>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000190 	.word	0x20000190
 80035d8:	080057a0 	.word	0x080057a0
 80035dc:	08003bf5 	.word	0x08003bf5
 80035e0:	2000018c 	.word	0x2000018c
 80035e4:	20000178 	.word	0x20000178
 80035e8:	20000170 	.word	0x20000170

080035ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <vTaskSuspendAll+0x18>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a03      	ldr	r2, [pc, #12]	; (8003604 <vTaskSuspendAll+0x18>)
 80035f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80035fa:	bf00      	nop
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	20000194 	.word	0x20000194

08003608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <xTaskResumeAll+0x114>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <xTaskResumeAll+0x2c>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	603b      	str	r3, [r7, #0]
}
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003634:	f001 f8de 	bl	80047f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003638:	4b38      	ldr	r3, [pc, #224]	; (800371c <xTaskResumeAll+0x114>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3b01      	subs	r3, #1
 800363e:	4a37      	ldr	r2, [pc, #220]	; (800371c <xTaskResumeAll+0x114>)
 8003640:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <xTaskResumeAll+0x114>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d161      	bne.n	800370e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800364a:	4b35      	ldr	r3, [pc, #212]	; (8003720 <xTaskResumeAll+0x118>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d05d      	beq.n	800370e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003652:	e02e      	b.n	80036b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003654:	4b33      	ldr	r3, [pc, #204]	; (8003724 <xTaskResumeAll+0x11c>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3318      	adds	r3, #24
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff f92d 	bl	80028c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3304      	adds	r3, #4
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f928 	bl	80028c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2201      	movs	r2, #1
 8003676:	409a      	lsls	r2, r3
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <xTaskResumeAll+0x120>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <xTaskResumeAll+0x120>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4a27      	ldr	r2, [pc, #156]	; (800372c <xTaskResumeAll+0x124>)
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f7ff f8b4 	bl	8002806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4b23      	ldr	r3, [pc, #140]	; (8003730 <xTaskResumeAll+0x128>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <xTaskResumeAll+0x12c>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <xTaskResumeAll+0x11c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1cc      	bne.n	8003654 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036c0:	f000 fb2e 	bl	8003d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <xTaskResumeAll+0x130>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d010      	beq.n	80036f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036d0:	f000 f846 	bl	8003760 <xTaskIncrementTick>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <xTaskResumeAll+0x12c>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f1      	bne.n	80036d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <xTaskResumeAll+0x130>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <xTaskResumeAll+0x12c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036fa:	2301      	movs	r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <xTaskResumeAll+0x134>)
 8003700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800370e:	f001 f8a1 	bl	8004854 <vPortExitCritical>

	return xAlreadyYielded;
 8003712:	68bb      	ldr	r3, [r7, #8]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000194 	.word	0x20000194
 8003720:	2000016c 	.word	0x2000016c
 8003724:	2000012c 	.word	0x2000012c
 8003728:	20000174 	.word	0x20000174
 800372c:	20000098 	.word	0x20000098
 8003730:	20000094 	.word	0x20000094
 8003734:	20000180 	.word	0x20000180
 8003738:	2000017c 	.word	0x2000017c
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <xTaskGetTickCount+0x1c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800374c:	687b      	ldr	r3, [r7, #4]
}
 800374e:	4618      	mov	r0, r3
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000170 	.word	0x20000170

08003760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376a:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <xTaskIncrementTick+0x144>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 8088 	bne.w	8003884 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003774:	4b4c      	ldr	r3, [pc, #304]	; (80038a8 <xTaskIncrementTick+0x148>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800377c:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <xTaskIncrementTick+0x148>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d120      	bne.n	80037ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003788:	4b48      	ldr	r3, [pc, #288]	; (80038ac <xTaskIncrementTick+0x14c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	603b      	str	r3, [r7, #0]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <xTaskIncrementTick+0x46>
 80037a8:	4b40      	ldr	r3, [pc, #256]	; (80038ac <xTaskIncrementTick+0x14c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <xTaskIncrementTick+0x150>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a3e      	ldr	r2, [pc, #248]	; (80038ac <xTaskIncrementTick+0x14c>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4a3e      	ldr	r2, [pc, #248]	; (80038b0 <xTaskIncrementTick+0x150>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b3d      	ldr	r3, [pc, #244]	; (80038b4 <xTaskIncrementTick+0x154>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <xTaskIncrementTick+0x154>)
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	f000 faab 	bl	8003d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ca:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <xTaskIncrementTick+0x158>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d348      	bcc.n	8003866 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <xTaskIncrementTick+0x14c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037de:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <xTaskIncrementTick+0x158>)
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295
 80037e4:	601a      	str	r2, [r3, #0]
					break;
 80037e6:	e03e      	b.n	8003866 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e8:	4b30      	ldr	r3, [pc, #192]	; (80038ac <xTaskIncrementTick+0x14c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d203      	bcs.n	8003808 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003800:	4a2d      	ldr	r2, [pc, #180]	; (80038b8 <xTaskIncrementTick+0x158>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003806:	e02e      	b.n	8003866 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	3304      	adds	r3, #4
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff f857 	bl	80028c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3318      	adds	r3, #24
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff f84e 	bl	80028c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	4b23      	ldr	r3, [pc, #140]	; (80038bc <xTaskIncrementTick+0x15c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	4a22      	ldr	r2, [pc, #136]	; (80038bc <xTaskIncrementTick+0x15c>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <xTaskIncrementTick+0x160>)
 8003844:	441a      	add	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe ffda 	bl	8002806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <xTaskIncrementTick+0x164>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d3b9      	bcc.n	80037d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003864:	e7b6      	b.n	80037d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <xTaskIncrementTick+0x164>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4914      	ldr	r1, [pc, #80]	; (80038c0 <xTaskIncrementTick+0x160>)
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d907      	bls.n	800388e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800387e:	2301      	movs	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e004      	b.n	800388e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <xTaskIncrementTick+0x168>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <xTaskIncrementTick+0x168>)
 800388c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <xTaskIncrementTick+0x16c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003896:	2301      	movs	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800389a:	697b      	ldr	r3, [r7, #20]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000194 	.word	0x20000194
 80038a8:	20000170 	.word	0x20000170
 80038ac:	20000124 	.word	0x20000124
 80038b0:	20000128 	.word	0x20000128
 80038b4:	20000184 	.word	0x20000184
 80038b8:	2000018c 	.word	0x2000018c
 80038bc:	20000174 	.word	0x20000174
 80038c0:	20000098 	.word	0x20000098
 80038c4:	20000094 	.word	0x20000094
 80038c8:	2000017c 	.word	0x2000017c
 80038cc:	20000180 	.word	0x20000180

080038d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038d6:	4b27      	ldr	r3, [pc, #156]	; (8003974 <vTaskSwitchContext+0xa4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <vTaskSwitchContext+0xa8>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038e4:	e03f      	b.n	8003966 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <vTaskSwitchContext+0xa8>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ec:	4b23      	ldr	r3, [pc, #140]	; (800397c <vTaskSwitchContext+0xac>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	f1c3 031f 	rsb	r3, r3, #31
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	491f      	ldr	r1, [pc, #124]	; (8003980 <vTaskSwitchContext+0xb0>)
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	607b      	str	r3, [r7, #4]
}
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <vTaskSwitchContext+0x5a>
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <vTaskSwitchContext+0xb0>)
 8003938:	4413      	add	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3308      	adds	r3, #8
 800394e:	429a      	cmp	r2, r3
 8003950:	d104      	bne.n	800395c <vTaskSwitchContext+0x8c>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	4a08      	ldr	r2, [pc, #32]	; (8003984 <vTaskSwitchContext+0xb4>)
 8003964:	6013      	str	r3, [r2, #0]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000194 	.word	0x20000194
 8003978:	20000180 	.word	0x20000180
 800397c:	20000174 	.word	0x20000174
 8003980:	20000098 	.word	0x20000098
 8003984:	20000094 	.word	0x20000094

08003988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60fb      	str	r3, [r7, #12]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <vTaskPlaceOnEventList+0x44>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3318      	adds	r3, #24
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fe ff49 	bl	800284e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039bc:	2101      	movs	r1, #1
 80039be:	6838      	ldr	r0, [r7, #0]
 80039c0:	f000 fa72 	bl	8003ea8 <prvAddCurrentTaskToDelayedList>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000094 	.word	0x20000094

080039d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	617b      	str	r3, [r7, #20]
}
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <vTaskPlaceOnEventListRestricted+0x54>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3318      	adds	r3, #24
 80039fe:	4619      	mov	r1, r3
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7fe ff00 	bl	8002806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	68b8      	ldr	r0, [r7, #8]
 8003a16:	f000 fa47 	bl	8003ea8 <prvAddCurrentTaskToDelayedList>
	}
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000094 	.word	0x20000094

08003a28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	60fb      	str	r3, [r7, #12]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3318      	adds	r3, #24
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe ff31 	bl	80028c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <xTaskRemoveFromEventList+0xac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11c      	bne.n	8003aa0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe ff28 	bl	80028c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2201      	movs	r2, #1
 8003a76:	409a      	lsls	r2, r3
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <xTaskRemoveFromEventList+0xb0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <xTaskRemoveFromEventList+0xb0>)
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <xTaskRemoveFromEventList+0xb4>)
 8003a90:	441a      	add	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f7fe feb4 	bl	8002806 <vListInsertEnd>
 8003a9e:	e005      	b.n	8003aac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	3318      	adds	r3, #24
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <xTaskRemoveFromEventList+0xb8>)
 8003aa8:	f7fe fead 	bl	8002806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <xTaskRemoveFromEventList+0xbc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d905      	bls.n	8003ac6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <xTaskRemoveFromEventList+0xc0>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e001      	b.n	8003aca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003aca:	697b      	ldr	r3, [r7, #20]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000194 	.word	0x20000194
 8003ad8:	20000174 	.word	0x20000174
 8003adc:	20000098 	.word	0x20000098
 8003ae0:	2000012c 	.word	0x2000012c
 8003ae4:	20000094 	.word	0x20000094
 8003ae8:	20000180 	.word	0x20000180

08003aec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <vTaskInternalSetTimeOutState+0x24>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <vTaskInternalSetTimeOutState+0x28>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	605a      	str	r2, [r3, #4]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	20000184 	.word	0x20000184
 8003b14:	20000170 	.word	0x20000170

08003b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	613b      	str	r3, [r7, #16]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	60fb      	str	r3, [r7, #12]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b5a:	f000 fe4b 	bl	80047f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <xTaskCheckForTimeOut+0xbc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	d102      	bne.n	8003b7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	e023      	b.n	8003bc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <xTaskCheckForTimeOut+0xc0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d007      	beq.n	8003b9a <xTaskCheckForTimeOut+0x82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e015      	b.n	8003bc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d20b      	bcs.n	8003bbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff9b 	bl	8003aec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	e004      	b.n	8003bc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bc6:	f000 fe45 	bl	8004854 <vPortExitCritical>

	return xReturn;
 8003bca:	69fb      	ldr	r3, [r7, #28]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000170 	.word	0x20000170
 8003bd8:	20000184 	.word	0x20000184

08003bdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <vTaskMissedYield+0x14>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	20000180 	.word	0x20000180

08003bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bfc:	f000 f852 	bl	8003ca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <prvIdleTask+0x28>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d9f9      	bls.n	8003bfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <prvIdleTask+0x2c>)
 8003c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c18:	e7f0      	b.n	8003bfc <prvIdleTask+0x8>
 8003c1a:	bf00      	nop
 8003c1c:	20000098 	.word	0x20000098
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	e00c      	b.n	8003c4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <prvInitialiseTaskLists+0x60>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fdb4 	bl	80027ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3301      	adds	r3, #1
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d9ef      	bls.n	8003c30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <prvInitialiseTaskLists+0x64>)
 8003c52:	f7fe fdab 	bl	80027ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c56:	480d      	ldr	r0, [pc, #52]	; (8003c8c <prvInitialiseTaskLists+0x68>)
 8003c58:	f7fe fda8 	bl	80027ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c5c:	480c      	ldr	r0, [pc, #48]	; (8003c90 <prvInitialiseTaskLists+0x6c>)
 8003c5e:	f7fe fda5 	bl	80027ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c62:	480c      	ldr	r0, [pc, #48]	; (8003c94 <prvInitialiseTaskLists+0x70>)
 8003c64:	f7fe fda2 	bl	80027ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c68:	480b      	ldr	r0, [pc, #44]	; (8003c98 <prvInitialiseTaskLists+0x74>)
 8003c6a:	f7fe fd9f 	bl	80027ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <prvInitialiseTaskLists+0x78>)
 8003c70:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <prvInitialiseTaskLists+0x64>)
 8003c72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <prvInitialiseTaskLists+0x7c>)
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <prvInitialiseTaskLists+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000098 	.word	0x20000098
 8003c88:	200000fc 	.word	0x200000fc
 8003c8c:	20000110 	.word	0x20000110
 8003c90:	2000012c 	.word	0x2000012c
 8003c94:	20000140 	.word	0x20000140
 8003c98:	20000158 	.word	0x20000158
 8003c9c:	20000124 	.word	0x20000124
 8003ca0:	20000128 	.word	0x20000128

08003ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003caa:	e019      	b.n	8003ce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cac:	f000 fda2 	bl	80047f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <prvCheckTasksWaitingTermination+0x50>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fdff 	bl	80028c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <prvCheckTasksWaitingTermination+0x54>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <prvCheckTasksWaitingTermination+0x54>)
 8003cca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <prvCheckTasksWaitingTermination+0x58>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <prvCheckTasksWaitingTermination+0x58>)
 8003cd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cd6:	f000 fdbd 	bl	8004854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f810 	bl	8003d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <prvCheckTasksWaitingTermination+0x58>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e1      	bne.n	8003cac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000140 	.word	0x20000140
 8003cf8:	2000016c 	.word	0x2000016c
 8003cfc:	20000154 	.word	0x20000154

08003d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 ff57 	bl	8004bc0 <vPortFree>
			vPortFree( pxTCB );
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 ff54 	bl	8004bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <prvResetNextTaskUnblockTime+0x38>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <prvResetNextTaskUnblockTime+0x3c>)
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d38:	e008      	b.n	8003d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <prvResetNextTaskUnblockTime+0x38>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <prvResetNextTaskUnblockTime+0x3c>)
 8003d4a:	6013      	str	r3, [r2, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20000124 	.word	0x20000124
 8003d5c:	2000018c 	.word	0x2000018c

08003d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <xTaskGetSchedulerState+0x34>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	e008      	b.n	8003d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <xTaskGetSchedulerState+0x38>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	e001      	b.n	8003d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d86:	687b      	ldr	r3, [r7, #4]
	}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	20000178 	.word	0x20000178
 8003d98:	20000194 	.word	0x20000194

08003d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d06e      	beq.n	8003e90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003db2:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <xTaskPriorityDisinherit+0x100>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d00a      	beq.n	8003dd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	60fb      	str	r3, [r7, #12]
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60bb      	str	r3, [r7, #8]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d044      	beq.n	8003e90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d140      	bne.n	8003e90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fd54 	bl	80028c0 <uxListRemove>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d115      	bne.n	8003e4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	491f      	ldr	r1, [pc, #124]	; (8003ea0 <xTaskPriorityDisinherit+0x104>)
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <xTaskPriorityDisinherit+0xae>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2201      	movs	r2, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4013      	ands	r3, r2
 8003e46:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f1c3 0205 	rsb	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	2201      	movs	r2, #1
 8003e64:	409a      	lsls	r2, r3
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <xTaskPriorityDisinherit+0x108>)
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <xTaskPriorityDisinherit+0x104>)
 8003e7e:	441a      	add	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f7fe fcbd 	bl	8002806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e90:	697b      	ldr	r3, [r7, #20]
	}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000094 	.word	0x20000094
 8003ea0:	20000098 	.word	0x20000098
 8003ea4:	20000174 	.word	0x20000174

08003ea8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fcfe 	bl	80028c0 <uxListRemove>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4013      	ands	r3, r2
 8003ede:	4a20      	ldr	r2, [pc, #128]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ee0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d10a      	bne.n	8003f00 <prvAddCurrentTaskToDelayedList+0x58>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	481a      	ldr	r0, [pc, #104]	; (8003f64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003efa:	f7fe fc84 	bl	8002806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003efe:	e026      	b.n	8003f4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d209      	bcs.n	8003f2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe fc92 	bl	800284e <vListInsert>
}
 8003f2a:	e010      	b.n	8003f4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f7fe fc88 	bl	800284e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d202      	bcs.n	8003f4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6013      	str	r3, [r2, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000170 	.word	0x20000170
 8003f5c:	20000094 	.word	0x20000094
 8003f60:	20000174 	.word	0x20000174
 8003f64:	20000158 	.word	0x20000158
 8003f68:	20000128 	.word	0x20000128
 8003f6c:	20000124 	.word	0x20000124
 8003f70:	2000018c 	.word	0x2000018c

08003f74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f7e:	f000 fad5 	bl	800452c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <xTimerCreateTimerTask+0x54>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <xTimerCreateTimerTask+0x58>)
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	2302      	movs	r3, #2
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2300      	movs	r3, #0
 8003f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f98:	490d      	ldr	r1, [pc, #52]	; (8003fd0 <xTimerCreateTimerTask+0x5c>)
 8003f9a:	480e      	ldr	r0, [pc, #56]	; (8003fd4 <xTimerCreateTimerTask+0x60>)
 8003f9c:	f7ff f966 	bl	800326c <xTaskCreate>
 8003fa0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	603b      	str	r3, [r7, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003fbe:	687b      	ldr	r3, [r7, #4]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200001c8 	.word	0x200001c8
 8003fcc:	200001cc 	.word	0x200001cc
 8003fd0:	080057a8 	.word	0x080057a8
 8003fd4:	0800410d 	.word	0x0800410d

08003fd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	623b      	str	r3, [r7, #32]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <xTimerGenericCommand+0x98>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d02a      	beq.n	8004064 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b05      	cmp	r3, #5
 800401e:	dc18      	bgt.n	8004052 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004020:	f7ff fe9e 	bl	8003d60 <xTaskGetSchedulerState>
 8004024:	4603      	mov	r3, r0
 8004026:	2b02      	cmp	r3, #2
 8004028:	d109      	bne.n	800403e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <xTimerGenericCommand+0x98>)
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	f107 0114 	add.w	r1, r7, #20
 8004032:	2300      	movs	r3, #0
 8004034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004036:	f7fe fd35 	bl	8002aa4 <xQueueGenericSend>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24
 800403c:	e012      	b.n	8004064 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <xTimerGenericCommand+0x98>)
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	f107 0114 	add.w	r1, r7, #20
 8004046:	2300      	movs	r3, #0
 8004048:	2200      	movs	r2, #0
 800404a:	f7fe fd2b 	bl	8002aa4 <xQueueGenericSend>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24
 8004050:	e008      	b.n	8004064 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <xTimerGenericCommand+0x98>)
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	f107 0114 	add.w	r1, r7, #20
 800405a:	2300      	movs	r3, #0
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	f7fe fe1f 	bl	8002ca0 <xQueueGenericSendFromISR>
 8004062:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004066:	4618      	mov	r0, r3
 8004068:	3728      	adds	r7, #40	; 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200001c8 	.word	0x200001c8

08004074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407e:	4b22      	ldr	r3, [pc, #136]	; (8004108 <prvProcessExpiredTimer+0x94>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3304      	adds	r3, #4
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe fc17 	bl	80028c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d022      	beq.n	80040e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	18d1      	adds	r1, r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	6978      	ldr	r0, [r7, #20]
 80040ae:	f000 f8d1 	bl	8004254 <prvInsertTimerInActiveList>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01f      	beq.n	80040f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2300      	movs	r3, #0
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	2100      	movs	r1, #0
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff ff88 	bl	8003fd8 <xTimerGenericCommand>
 80040c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d113      	bne.n	80040f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	60fb      	str	r3, [r7, #12]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	6978      	ldr	r0, [r7, #20]
 80040fe:	4798      	blx	r3
}
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	200001c0 	.word	0x200001c0

0800410c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004114:	f107 0308 	add.w	r3, r7, #8
 8004118:	4618      	mov	r0, r3
 800411a:	f000 f857 	bl	80041cc <prvGetNextExpireTime>
 800411e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4619      	mov	r1, r3
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f803 	bl	8004130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800412a:	f000 f8d5 	bl	80042d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800412e:	e7f1      	b.n	8004114 <prvTimerTask+0x8>

08004130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800413a:	f7ff fa57 	bl	80035ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f866 	bl	8004214 <prvSampleTimeNow>
 8004148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d130      	bne.n	80041b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <prvProcessTimerOrBlockTask+0x3c>
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	429a      	cmp	r2, r3
 800415c:	d806      	bhi.n	800416c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800415e:	f7ff fa53 	bl	8003608 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff85 	bl	8004074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800416a:	e024      	b.n	80041b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <prvProcessTimerOrBlockTask+0x90>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <prvProcessTimerOrBlockTask+0x50>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <prvProcessTimerOrBlockTask+0x52>
 8004180:	2300      	movs	r3, #0
 8004182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <prvProcessTimerOrBlockTask+0x94>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4619      	mov	r1, r3
 8004192:	f7ff f837 	bl	8003204 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004196:	f7ff fa37 	bl	8003608 <xTaskResumeAll>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <prvProcessTimerOrBlockTask+0x98>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
}
 80041b0:	e001      	b.n	80041b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041b2:	f7ff fa29 	bl	8003608 <xTaskResumeAll>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200001c4 	.word	0x200001c4
 80041c4:	200001c8 	.word	0x200001c8
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <prvGetNextExpireTime+0x44>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <prvGetNextExpireTime+0x16>
 80041de:	2201      	movs	r2, #1
 80041e0:	e000      	b.n	80041e4 <prvGetNextExpireTime+0x18>
 80041e2:	2200      	movs	r2, #0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <prvGetNextExpireTime+0x44>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e001      	b.n	8004200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	200001c0 	.word	0x200001c0

08004214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800421c:	f7ff fa90 	bl	8003740 <xTaskGetTickCount>
 8004220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <prvSampleTimeNow+0x3c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	429a      	cmp	r2, r3
 800422a:	d205      	bcs.n	8004238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800422c:	f000 f91a 	bl	8004464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e002      	b.n	800423e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800423e:	4a04      	ldr	r2, [pc, #16]	; (8004250 <prvSampleTimeNow+0x3c>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004244:	68fb      	ldr	r3, [r7, #12]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	200001d0 	.word	0x200001d0

08004254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d812      	bhi.n	80042a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	1ad2      	subs	r2, r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e01b      	b.n	80042c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <prvInsertTimerInActiveList+0x7c>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3304      	adds	r3, #4
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7fe fad8 	bl	800284e <vListInsert>
 800429e:	e012      	b.n	80042c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d206      	bcs.n	80042b6 <prvInsertTimerInActiveList+0x62>
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e007      	b.n	80042c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042b6:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <prvInsertTimerInActiveList+0x80>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7fe fac4 	bl	800284e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042c6:	697b      	ldr	r3, [r7, #20]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200001c4 	.word	0x200001c4
 80042d4:	200001c0 	.word	0x200001c0

080042d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042de:	e0ae      	b.n	800443e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f2c0 80aa 	blt.w	800443c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d004      	beq.n	80042fe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	3304      	adds	r3, #4
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe fae1 	bl	80028c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff87 	bl	8004214 <prvSampleTimeNow>
 8004306:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b09      	cmp	r3, #9
 800430c:	f200 8097 	bhi.w	800443e <prvProcessReceivedCommands+0x166>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <prvProcessReceivedCommands+0x40>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004341 	.word	0x08004341
 800431c:	08004341 	.word	0x08004341
 8004320:	08004341 	.word	0x08004341
 8004324:	080043b5 	.word	0x080043b5
 8004328:	080043c9 	.word	0x080043c9
 800432c:	08004413 	.word	0x08004413
 8004330:	08004341 	.word	0x08004341
 8004334:	08004341 	.word	0x08004341
 8004338:	080043b5 	.word	0x080043b5
 800433c:	080043c9 	.word	0x080043c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	18d1      	adds	r1, r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004360:	f7ff ff78 	bl	8004254 <prvInsertTimerInActiveList>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d069      	beq.n	800443e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004370:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05e      	beq.n	800443e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	441a      	add	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	2100      	movs	r1, #0
 8004390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004392:	f7ff fe21 	bl	8003fd8 <xTimerGenericCommand>
 8004396:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d14f      	bne.n	800443e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	61bb      	str	r3, [r7, #24]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80043c6:	e03a      	b.n	800443e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <prvProcessReceivedCommands+0x126>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	617b      	str	r3, [r7, #20]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	18d1      	adds	r1, r2, r3
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800440c:	f7ff ff22 	bl	8004254 <prvInsertTimerInActiveList>
					break;
 8004410:	e015      	b.n	800443e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004422:	f000 fbcd 	bl	8004bc0 <vPortFree>
 8004426:	e00a      	b.n	800443e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	b2da      	uxtb	r2, r3
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800443a:	e000      	b.n	800443e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800443c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <prvProcessReceivedCommands+0x188>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f107 0108 	add.w	r1, r7, #8
 8004446:	2200      	movs	r2, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fcc1 	bl	8002dd0 <xQueueReceive>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f af45 	bne.w	80042e0 <prvProcessReceivedCommands+0x8>
	}
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	3728      	adds	r7, #40	; 0x28
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200001c8 	.word	0x200001c8

08004464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800446a:	e048      	b.n	80044fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <prvSwitchTimerLists+0xc0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004476:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <prvSwitchTimerLists+0xc0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fa1b 	bl	80028c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02e      	beq.n	80044fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d90e      	bls.n	80044d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044be:	4b19      	ldr	r3, [pc, #100]	; (8004524 <prvSwitchTimerLists+0xc0>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7fe f9c0 	bl	800284e <vListInsert>
 80044ce:	e016      	b.n	80044fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	2100      	movs	r1, #0
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff fd7c 	bl	8003fd8 <xTimerGenericCommand>
 80044e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	603b      	str	r3, [r7, #0]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <prvSwitchTimerLists+0xc0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1b1      	bne.n	800446c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <prvSwitchTimerLists+0xc0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <prvSwitchTimerLists+0xc4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a04      	ldr	r2, [pc, #16]	; (8004524 <prvSwitchTimerLists+0xc0>)
 8004514:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004516:	4a04      	ldr	r2, [pc, #16]	; (8004528 <prvSwitchTimerLists+0xc4>)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	6013      	str	r3, [r2, #0]
}
 800451c:	bf00      	nop
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	200001c0 	.word	0x200001c0
 8004528:	200001c4 	.word	0x200001c4

0800452c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004530:	f000 f960 	bl	80047f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004534:	4b12      	ldr	r3, [pc, #72]	; (8004580 <prvCheckForValidListAndQueue+0x54>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d11d      	bne.n	8004578 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800453c:	4811      	ldr	r0, [pc, #68]	; (8004584 <prvCheckForValidListAndQueue+0x58>)
 800453e:	f7fe f935 	bl	80027ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004542:	4811      	ldr	r0, [pc, #68]	; (8004588 <prvCheckForValidListAndQueue+0x5c>)
 8004544:	f7fe f932 	bl	80027ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <prvCheckForValidListAndQueue+0x60>)
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <prvCheckForValidListAndQueue+0x58>)
 800454c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <prvCheckForValidListAndQueue+0x64>)
 8004550:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <prvCheckForValidListAndQueue+0x5c>)
 8004552:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004554:	2200      	movs	r2, #0
 8004556:	210c      	movs	r1, #12
 8004558:	200a      	movs	r0, #10
 800455a:	f7fe fa43 	bl	80029e4 <xQueueGenericCreate>
 800455e:	4603      	mov	r3, r0
 8004560:	4a07      	ldr	r2, [pc, #28]	; (8004580 <prvCheckForValidListAndQueue+0x54>)
 8004562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <prvCheckForValidListAndQueue+0x54>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <prvCheckForValidListAndQueue+0x54>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4908      	ldr	r1, [pc, #32]	; (8004594 <prvCheckForValidListAndQueue+0x68>)
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fe1c 	bl	80031b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004578:	f000 f96c 	bl	8004854 <vPortExitCritical>
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200001c8 	.word	0x200001c8
 8004584:	20000198 	.word	0x20000198
 8004588:	200001ac 	.word	0x200001ac
 800458c:	200001c0 	.word	0x200001c0
 8004590:	200001c4 	.word	0x200001c4
 8004594:	080057b0 	.word	0x080057b0

08004598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3b04      	subs	r3, #4
 80045a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b04      	subs	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b04      	subs	r3, #4
 80045c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045c8:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <pxPortInitialiseStack+0x64>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b14      	subs	r3, #20
 80045d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b04      	subs	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f06f 0202 	mvn.w	r2, #2
 80045e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b20      	subs	r3, #32
 80045ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	08004601 	.word	0x08004601

08004600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <prvTaskExitError+0x54>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d00a      	beq.n	800462a <prvTaskExitError+0x2a>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	60fb      	str	r3, [r7, #12]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <prvTaskExitError+0x28>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	60bb      	str	r3, [r7, #8]
}
 800463c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800463e:	bf00      	nop
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0fc      	beq.n	8004640 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	2000000c 	.word	0x2000000c
	...

08004660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <pxCurrentTCBConst2>)
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	f380 8809 	msr	PSP, r0
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	4770      	bx	lr
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst2>:
 8004680:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004688:	4808      	ldr	r0, [pc, #32]	; (80046ac <prvPortStartFirstTask+0x24>)
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f380 8808 	msr	MSP, r0
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8814 	msr	CONTROL, r0
 800469a:	b662      	cpsie	i
 800469c:	b661      	cpsie	f
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	df00      	svc	0
 80046a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046aa:	bf00      	nop
 80046ac:	e000ed08 	.word	0xe000ed08

080046b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046b6:	4b46      	ldr	r3, [pc, #280]	; (80047d0 <xPortStartScheduler+0x120>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a46      	ldr	r2, [pc, #280]	; (80047d4 <xPortStartScheduler+0x124>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10a      	bne.n	80046d6 <xPortStartScheduler+0x26>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	613b      	str	r3, [r7, #16]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <xPortStartScheduler+0x120>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3f      	ldr	r2, [pc, #252]	; (80047d8 <xPortStartScheduler+0x128>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10a      	bne.n	80046f6 <xPortStartScheduler+0x46>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046f6:	4b39      	ldr	r3, [pc, #228]	; (80047dc <xPortStartScheduler+0x12c>)
 80046f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <xPortStartScheduler+0x130>)
 800471c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800471e:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <xPortStartScheduler+0x134>)
 8004720:	2207      	movs	r2, #7
 8004722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004724:	e009      	b.n	800473a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004726:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <xPortStartScheduler+0x134>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	4a2d      	ldr	r2, [pc, #180]	; (80047e4 <xPortStartScheduler+0x134>)
 800472e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d0ef      	beq.n	8004726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <xPortStartScheduler+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1c3 0307 	rsb	r3, r3, #7
 800474e:	2b04      	cmp	r3, #4
 8004750:	d00a      	beq.n	8004768 <xPortStartScheduler+0xb8>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60bb      	str	r3, [r7, #8]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <xPortStartScheduler+0x134>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <xPortStartScheduler+0x134>)
 8004770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <xPortStartScheduler+0x134>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800477a:	4a1a      	ldr	r2, [pc, #104]	; (80047e4 <xPortStartScheduler+0x134>)
 800477c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <xPortStartScheduler+0x138>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <xPortStartScheduler+0x138>)
 800478c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <xPortStartScheduler+0x138>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <xPortStartScheduler+0x138>)
 8004798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800479c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800479e:	f000 f8dd 	bl	800495c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <xPortStartScheduler+0x13c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047a8:	f000 f8fc 	bl	80049a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <xPortStartScheduler+0x140>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0f      	ldr	r2, [pc, #60]	; (80047f0 <xPortStartScheduler+0x140>)
 80047b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047b8:	f7ff ff66 	bl	8004688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047bc:	f7ff f888 	bl	80038d0 <vTaskSwitchContext>
	prvTaskExitError();
 80047c0:	f7ff ff1e 	bl	8004600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	e000ed00 	.word	0xe000ed00
 80047d4:	410fc271 	.word	0x410fc271
 80047d8:	410fc270 	.word	0x410fc270
 80047dc:	e000e400 	.word	0xe000e400
 80047e0:	200001d4 	.word	0x200001d4
 80047e4:	200001d8 	.word	0x200001d8
 80047e8:	e000ed20 	.word	0xe000ed20
 80047ec:	2000000c 	.word	0x2000000c
 80047f0:	e000ef34 	.word	0xe000ef34

080047f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	607b      	str	r3, [r7, #4]
}
 800480c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <vPortEnterCritical+0x58>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <vPortEnterCritical+0x58>)
 8004816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <vPortEnterCritical+0x58>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10f      	bne.n	8004840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <vPortEnterCritical+0x5c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <vPortEnterCritical+0x4c>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	603b      	str	r3, [r7, #0]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <vPortEnterCritical+0x4a>
	}
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	2000000c 	.word	0x2000000c
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <vPortExitCritical+0x50>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <vPortExitCritical+0x24>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	607b      	str	r3, [r7, #4]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <vPortExitCritical+0x50>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3b01      	subs	r3, #1
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <vPortExitCritical+0x50>)
 8004880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <vPortExitCritical+0x50>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <vPortExitCritical+0x42>
 800488a:	2300      	movs	r3, #0
 800488c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f383 8811 	msr	BASEPRI, r3
}
 8004894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c
	...

080048b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048b0:	f3ef 8009 	mrs	r0, PSP
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <pxCurrentTCBConst>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f01e 0f10 	tst.w	lr, #16
 80048c0:	bf08      	it	eq
 80048c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	6010      	str	r0, [r2, #0]
 80048cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048d4:	f380 8811 	msr	BASEPRI, r0
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f7fe fff6 	bl	80038d0 <vTaskSwitchContext>
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f380 8811 	msr	BASEPRI, r0
 80048ec:	bc09      	pop	{r0, r3}
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f6:	f01e 0f10 	tst.w	lr, #16
 80048fa:	bf08      	it	eq
 80048fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004900:	f380 8809 	msr	PSP, r0
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst>:
 8004910:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004932:	f7fe ff15 	bl	8003760 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <SysTick_Handler+0x40>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <vPortSetupTimerInterrupt+0x38>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <vPortSetupTimerInterrupt+0x3c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <vPortSetupTimerInterrupt+0x40>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <vPortSetupTimerInterrupt+0x44>)
 800497a:	3b01      	subs	r3, #1
 800497c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010
 8004994:	e000e018 	.word	0xe000e018
 8004998:	20000000 	.word	0x20000000
 800499c:	10624dd3 	.word	0x10624dd3
 80049a0:	e000e014 	.word	0xe000e014

080049a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049b4 <vPortEnableVFP+0x10>
 80049a8:	6801      	ldr	r1, [r0, #0]
 80049aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ae:	6001      	str	r1, [r0, #0]
 80049b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049b2:	bf00      	nop
 80049b4:	e000ed88 	.word	0xe000ed88

080049b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049be:	f3ef 8305 	mrs	r3, IPSR
 80049c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	d914      	bls.n	80049f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <vPortValidateInterruptPriority+0x70>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049d4:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <vPortValidateInterruptPriority+0x74>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	7afa      	ldrb	r2, [r7, #11]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d20a      	bcs.n	80049f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
}
 80049f0:	bf00      	nop
 80049f2:	e7fe      	b.n	80049f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <vPortValidateInterruptPriority+0x78>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <vPortValidateInterruptPriority+0x7c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d90a      	bls.n	8004a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	603b      	str	r3, [r7, #0]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <vPortValidateInterruptPriority+0x60>
	}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e3f0 	.word	0xe000e3f0
 8004a2c:	200001d4 	.word	0x200001d4
 8004a30:	e000ed0c 	.word	0xe000ed0c
 8004a34:	200001d8 	.word	0x200001d8

08004a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a44:	f7fe fdd2 	bl	80035ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a48:	4b58      	ldr	r3, [pc, #352]	; (8004bac <pvPortMalloc+0x174>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a50:	f000 f910 	bl	8004c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a54:	4b56      	ldr	r3, [pc, #344]	; (8004bb0 <pvPortMalloc+0x178>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 808e 	bne.w	8004b7e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01d      	beq.n	8004aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a68:	2208      	movs	r2, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	3308      	adds	r3, #8
 8004a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	617b      	str	r3, [r7, #20]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d069      	beq.n	8004b7e <pvPortMalloc+0x146>
 8004aaa:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <pvPortMalloc+0x17c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d864      	bhi.n	8004b7e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ab4:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <pvPortMalloc+0x180>)
 8004ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ab8:	4b3f      	ldr	r3, [pc, #252]	; (8004bb8 <pvPortMalloc+0x180>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004abe:	e004      	b.n	8004aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d903      	bls.n	8004adc <pvPortMalloc+0xa4>
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f1      	bne.n	8004ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004adc:	4b33      	ldr	r3, [pc, #204]	; (8004bac <pvPortMalloc+0x174>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d04b      	beq.n	8004b7e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2208      	movs	r2, #8
 8004aec:	4413      	add	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	2308      	movs	r3, #8
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d91f      	bls.n	8004b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <pvPortMalloc+0xf8>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	613b      	str	r3, [r7, #16]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b42:	69b8      	ldr	r0, [r7, #24]
 8004b44:	f000 f8f8 	bl	8004d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <pvPortMalloc+0x17c>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <pvPortMalloc+0x17c>)
 8004b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b56:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <pvPortMalloc+0x17c>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <pvPortMalloc+0x184>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d203      	bcs.n	8004b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <pvPortMalloc+0x17c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <pvPortMalloc+0x184>)
 8004b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <pvPortMalloc+0x178>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b7e:	f7fe fd43 	bl	8003608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <pvPortMalloc+0x16a>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <pvPortMalloc+0x168>
	return pvReturn;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20012de4 	.word	0x20012de4
 8004bb0:	20012df0 	.word	0x20012df0
 8004bb4:	20012de8 	.word	0x20012de8
 8004bb8:	20012ddc 	.word	0x20012ddc
 8004bbc:	20012dec 	.word	0x20012dec

08004bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d048      	beq.n	8004c64 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4413      	add	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <vPortFree+0xac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <vPortFree+0x44>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60fb      	str	r3, [r7, #12]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <vPortFree+0x62>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60bb      	str	r3, [r7, #8]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <vPortFree+0xac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d019      	beq.n	8004c64 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d115      	bne.n	8004c64 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <vPortFree+0xac>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	401a      	ands	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c48:	f7fe fcd0 	bl	80035ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <vPortFree+0xb0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4413      	add	r3, r2
 8004c56:	4a06      	ldr	r2, [pc, #24]	; (8004c70 <vPortFree+0xb0>)
 8004c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c5a:	6938      	ldr	r0, [r7, #16]
 8004c5c:	f000 f86c 	bl	8004d38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c60:	f7fe fcd2 	bl	8003608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c64:	bf00      	nop
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20012df0 	.word	0x20012df0
 8004c70:	20012de8 	.word	0x20012de8

08004c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c7a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <prvHeapInit+0xac>)
 8004c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3307      	adds	r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <prvHeapInit+0xac>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <prvHeapInit+0xb0>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <prvHeapInit+0xb0>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvHeapInit+0xb4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <prvHeapInit+0xb4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	1ad2      	subs	r2, r2, r3
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <prvHeapInit+0xb4>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <prvHeapInit+0xb8>)
 8004d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <prvHeapInit+0xbc>)
 8004d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <prvHeapInit+0xc0>)
 8004d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	200001dc 	.word	0x200001dc
 8004d24:	20012ddc 	.word	0x20012ddc
 8004d28:	20012de4 	.word	0x20012de4
 8004d2c:	20012dec 	.word	0x20012dec
 8004d30:	20012de8 	.word	0x20012de8
 8004d34:	20012df0 	.word	0x20012df0

08004d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <prvInsertBlockIntoFreeList+0xac>)
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e002      	b.n	8004d4c <prvInsertBlockIntoFreeList+0x14>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d8f7      	bhi.n	8004d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d108      	bne.n	8004d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d118      	bne.n	8004dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d00d      	beq.n	8004db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	441a      	add	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e008      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <prvInsertBlockIntoFreeList+0xb0>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e003      	b.n	8004dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d002      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20012ddc 	.word	0x20012ddc
 8004de8:	20012de4 	.word	0x20012de4

08004dec <__errno>:
 8004dec:	4b01      	ldr	r3, [pc, #4]	; (8004df4 <__errno+0x8>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000010 	.word	0x20000010

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4d0d      	ldr	r5, [pc, #52]	; (8004e30 <__libc_init_array+0x38>)
 8004dfc:	4c0d      	ldr	r4, [pc, #52]	; (8004e34 <__libc_init_array+0x3c>)
 8004dfe:	1b64      	subs	r4, r4, r5
 8004e00:	10a4      	asrs	r4, r4, #2
 8004e02:	2600      	movs	r6, #0
 8004e04:	42a6      	cmp	r6, r4
 8004e06:	d109      	bne.n	8004e1c <__libc_init_array+0x24>
 8004e08:	4d0b      	ldr	r5, [pc, #44]	; (8004e38 <__libc_init_array+0x40>)
 8004e0a:	4c0c      	ldr	r4, [pc, #48]	; (8004e3c <__libc_init_array+0x44>)
 8004e0c:	f000 fcaa 	bl	8005764 <_init>
 8004e10:	1b64      	subs	r4, r4, r5
 8004e12:	10a4      	asrs	r4, r4, #2
 8004e14:	2600      	movs	r6, #0
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	d105      	bne.n	8004e26 <__libc_init_array+0x2e>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e20:	4798      	blx	r3
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7ee      	b.n	8004e04 <__libc_init_array+0xc>
 8004e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2a:	4798      	blx	r3
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	e7f2      	b.n	8004e16 <__libc_init_array+0x1e>
 8004e30:	08005830 	.word	0x08005830
 8004e34:	08005830 	.word	0x08005830
 8004e38:	08005830 	.word	0x08005830
 8004e3c:	08005834 	.word	0x08005834

08004e40 <__itoa>:
 8004e40:	1e93      	subs	r3, r2, #2
 8004e42:	2b22      	cmp	r3, #34	; 0x22
 8004e44:	b510      	push	{r4, lr}
 8004e46:	460c      	mov	r4, r1
 8004e48:	d904      	bls.n	8004e54 <__itoa+0x14>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	700b      	strb	r3, [r1, #0]
 8004e4e:	461c      	mov	r4, r3
 8004e50:	4620      	mov	r0, r4
 8004e52:	bd10      	pop	{r4, pc}
 8004e54:	2a0a      	cmp	r2, #10
 8004e56:	d109      	bne.n	8004e6c <__itoa+0x2c>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	da07      	bge.n	8004e6c <__itoa+0x2c>
 8004e5c:	232d      	movs	r3, #45	; 0x2d
 8004e5e:	700b      	strb	r3, [r1, #0]
 8004e60:	4240      	negs	r0, r0
 8004e62:	2101      	movs	r1, #1
 8004e64:	4421      	add	r1, r4
 8004e66:	f000 f83b 	bl	8004ee0 <__utoa>
 8004e6a:	e7f1      	b.n	8004e50 <__itoa+0x10>
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	e7f9      	b.n	8004e64 <__itoa+0x24>

08004e70 <itoa>:
 8004e70:	f7ff bfe6 	b.w	8004e40 <__itoa>

08004e74 <memcpy>:
 8004e74:	440a      	add	r2, r1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	4770      	bx	lr
 8004e80:	b510      	push	{r4, lr}
 8004e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	d1f9      	bne.n	8004e82 <memcpy+0xe>
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <memset>:
 8004e90:	4402      	add	r2, r0
 8004e92:	4603      	mov	r3, r0
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d100      	bne.n	8004e9a <memset+0xa>
 8004e98:	4770      	bx	lr
 8004e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9e:	e7f9      	b.n	8004e94 <memset+0x4>

08004ea0 <siprintf>:
 8004ea0:	b40e      	push	{r1, r2, r3}
 8004ea2:	b500      	push	{lr}
 8004ea4:	b09c      	sub	sp, #112	; 0x70
 8004ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea8:	9002      	str	r0, [sp, #8]
 8004eaa:	9006      	str	r0, [sp, #24]
 8004eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004eb0:	4809      	ldr	r0, [pc, #36]	; (8004ed8 <siprintf+0x38>)
 8004eb2:	9107      	str	r1, [sp, #28]
 8004eb4:	9104      	str	r1, [sp, #16]
 8004eb6:	4909      	ldr	r1, [pc, #36]	; (8004edc <siprintf+0x3c>)
 8004eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ebc:	9105      	str	r1, [sp, #20]
 8004ebe:	6800      	ldr	r0, [r0, #0]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	a902      	add	r1, sp, #8
 8004ec4:	f000 f8aa 	bl	800501c <_svfiprintf_r>
 8004ec8:	9b02      	ldr	r3, [sp, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	b01c      	add	sp, #112	; 0x70
 8004ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed4:	b003      	add	sp, #12
 8004ed6:	4770      	bx	lr
 8004ed8:	20000010 	.word	0x20000010
 8004edc:	ffff0208 	.word	0xffff0208

08004ee0 <__utoa>:
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	4c1f      	ldr	r4, [pc, #124]	; (8004f60 <__utoa+0x80>)
 8004ee4:	b08b      	sub	sp, #44	; 0x2c
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	466e      	mov	r6, sp
 8004eec:	f104 0c20 	add.w	ip, r4, #32
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	6861      	ldr	r1, [r4, #4]
 8004ef4:	4637      	mov	r7, r6
 8004ef6:	c703      	stmia	r7!, {r0, r1}
 8004ef8:	3408      	adds	r4, #8
 8004efa:	4564      	cmp	r4, ip
 8004efc:	463e      	mov	r6, r7
 8004efe:	d1f7      	bne.n	8004ef0 <__utoa+0x10>
 8004f00:	7921      	ldrb	r1, [r4, #4]
 8004f02:	7139      	strb	r1, [r7, #4]
 8004f04:	1e91      	subs	r1, r2, #2
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	6038      	str	r0, [r7, #0]
 8004f0a:	2922      	cmp	r1, #34	; 0x22
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	d904      	bls.n	8004f1c <__utoa+0x3c>
 8004f12:	7019      	strb	r1, [r3, #0]
 8004f14:	460b      	mov	r3, r1
 8004f16:	4618      	mov	r0, r3
 8004f18:	b00b      	add	sp, #44	; 0x2c
 8004f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f1c:	1e58      	subs	r0, r3, #1
 8004f1e:	4684      	mov	ip, r0
 8004f20:	fbb5 f7f2 	udiv	r7, r5, r2
 8004f24:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004f28:	fb02 5617 	mls	r6, r2, r7, r5
 8004f2c:	4476      	add	r6, lr
 8004f2e:	460c      	mov	r4, r1
 8004f30:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004f34:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004f38:	462e      	mov	r6, r5
 8004f3a:	42b2      	cmp	r2, r6
 8004f3c:	f101 0101 	add.w	r1, r1, #1
 8004f40:	463d      	mov	r5, r7
 8004f42:	d9ed      	bls.n	8004f20 <__utoa+0x40>
 8004f44:	2200      	movs	r2, #0
 8004f46:	545a      	strb	r2, [r3, r1]
 8004f48:	1919      	adds	r1, r3, r4
 8004f4a:	1aa5      	subs	r5, r4, r2
 8004f4c:	42aa      	cmp	r2, r5
 8004f4e:	dae2      	bge.n	8004f16 <__utoa+0x36>
 8004f50:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004f54:	780e      	ldrb	r6, [r1, #0]
 8004f56:	7006      	strb	r6, [r0, #0]
 8004f58:	3201      	adds	r2, #1
 8004f5a:	f801 5901 	strb.w	r5, [r1], #-1
 8004f5e:	e7f4      	b.n	8004f4a <__utoa+0x6a>
 8004f60:	080057d0 	.word	0x080057d0

08004f64 <__ssputs_r>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	688e      	ldr	r6, [r1, #8]
 8004f6a:	429e      	cmp	r6, r3
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	4690      	mov	r8, r2
 8004f72:	461f      	mov	r7, r3
 8004f74:	d838      	bhi.n	8004fe8 <__ssputs_r+0x84>
 8004f76:	898a      	ldrh	r2, [r1, #12]
 8004f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f7c:	d032      	beq.n	8004fe4 <__ssputs_r+0x80>
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	6909      	ldr	r1, [r1, #16]
 8004f82:	eba5 0901 	sub.w	r9, r5, r1
 8004f86:	6965      	ldr	r5, [r4, #20]
 8004f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f90:	3301      	adds	r3, #1
 8004f92:	444b      	add	r3, r9
 8004f94:	106d      	asrs	r5, r5, #1
 8004f96:	429d      	cmp	r5, r3
 8004f98:	bf38      	it	cc
 8004f9a:	461d      	movcc	r5, r3
 8004f9c:	0553      	lsls	r3, r2, #21
 8004f9e:	d531      	bpl.n	8005004 <__ssputs_r+0xa0>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f000 fb39 	bl	8005618 <_malloc_r>
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	b950      	cbnz	r0, 8004fc0 <__ssputs_r+0x5c>
 8004faa:	230c      	movs	r3, #12
 8004fac:	f8ca 3000 	str.w	r3, [sl]
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	6921      	ldr	r1, [r4, #16]
 8004fc2:	464a      	mov	r2, r9
 8004fc4:	f7ff ff56 	bl	8004e74 <memcpy>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	6126      	str	r6, [r4, #16]
 8004fd6:	6165      	str	r5, [r4, #20]
 8004fd8:	444e      	add	r6, r9
 8004fda:	eba5 0509 	sub.w	r5, r5, r9
 8004fde:	6026      	str	r6, [r4, #0]
 8004fe0:	60a5      	str	r5, [r4, #8]
 8004fe2:	463e      	mov	r6, r7
 8004fe4:	42be      	cmp	r6, r7
 8004fe6:	d900      	bls.n	8004fea <__ssputs_r+0x86>
 8004fe8:	463e      	mov	r6, r7
 8004fea:	4632      	mov	r2, r6
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	4641      	mov	r1, r8
 8004ff0:	f000 faa8 	bl	8005544 <memmove>
 8004ff4:	68a3      	ldr	r3, [r4, #8]
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	1b9b      	subs	r3, r3, r6
 8004ffa:	4432      	add	r2, r6
 8004ffc:	60a3      	str	r3, [r4, #8]
 8004ffe:	6022      	str	r2, [r4, #0]
 8005000:	2000      	movs	r0, #0
 8005002:	e7db      	b.n	8004fbc <__ssputs_r+0x58>
 8005004:	462a      	mov	r2, r5
 8005006:	f000 fb61 	bl	80056cc <_realloc_r>
 800500a:	4606      	mov	r6, r0
 800500c:	2800      	cmp	r0, #0
 800500e:	d1e1      	bne.n	8004fd4 <__ssputs_r+0x70>
 8005010:	6921      	ldr	r1, [r4, #16]
 8005012:	4650      	mov	r0, sl
 8005014:	f000 fab0 	bl	8005578 <_free_r>
 8005018:	e7c7      	b.n	8004faa <__ssputs_r+0x46>
	...

0800501c <_svfiprintf_r>:
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	4698      	mov	r8, r3
 8005022:	898b      	ldrh	r3, [r1, #12]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	b09d      	sub	sp, #116	; 0x74
 8005028:	4607      	mov	r7, r0
 800502a:	460d      	mov	r5, r1
 800502c:	4614      	mov	r4, r2
 800502e:	d50e      	bpl.n	800504e <_svfiprintf_r+0x32>
 8005030:	690b      	ldr	r3, [r1, #16]
 8005032:	b963      	cbnz	r3, 800504e <_svfiprintf_r+0x32>
 8005034:	2140      	movs	r1, #64	; 0x40
 8005036:	f000 faef 	bl	8005618 <_malloc_r>
 800503a:	6028      	str	r0, [r5, #0]
 800503c:	6128      	str	r0, [r5, #16]
 800503e:	b920      	cbnz	r0, 800504a <_svfiprintf_r+0x2e>
 8005040:	230c      	movs	r3, #12
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	e0d1      	b.n	80051ee <_svfiprintf_r+0x1d2>
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	616b      	str	r3, [r5, #20]
 800504e:	2300      	movs	r3, #0
 8005050:	9309      	str	r3, [sp, #36]	; 0x24
 8005052:	2320      	movs	r3, #32
 8005054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005058:	f8cd 800c 	str.w	r8, [sp, #12]
 800505c:	2330      	movs	r3, #48	; 0x30
 800505e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005208 <_svfiprintf_r+0x1ec>
 8005062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005066:	f04f 0901 	mov.w	r9, #1
 800506a:	4623      	mov	r3, r4
 800506c:	469a      	mov	sl, r3
 800506e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005072:	b10a      	cbz	r2, 8005078 <_svfiprintf_r+0x5c>
 8005074:	2a25      	cmp	r2, #37	; 0x25
 8005076:	d1f9      	bne.n	800506c <_svfiprintf_r+0x50>
 8005078:	ebba 0b04 	subs.w	fp, sl, r4
 800507c:	d00b      	beq.n	8005096 <_svfiprintf_r+0x7a>
 800507e:	465b      	mov	r3, fp
 8005080:	4622      	mov	r2, r4
 8005082:	4629      	mov	r1, r5
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff ff6d 	bl	8004f64 <__ssputs_r>
 800508a:	3001      	adds	r0, #1
 800508c:	f000 80aa 	beq.w	80051e4 <_svfiprintf_r+0x1c8>
 8005090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005092:	445a      	add	r2, fp
 8005094:	9209      	str	r2, [sp, #36]	; 0x24
 8005096:	f89a 3000 	ldrb.w	r3, [sl]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80a2 	beq.w	80051e4 <_svfiprintf_r+0x1c8>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295
 80050a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050aa:	f10a 0a01 	add.w	sl, sl, #1
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050b6:	931a      	str	r3, [sp, #104]	; 0x68
 80050b8:	4654      	mov	r4, sl
 80050ba:	2205      	movs	r2, #5
 80050bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c0:	4851      	ldr	r0, [pc, #324]	; (8005208 <_svfiprintf_r+0x1ec>)
 80050c2:	f7fb f88d 	bl	80001e0 <memchr>
 80050c6:	9a04      	ldr	r2, [sp, #16]
 80050c8:	b9d8      	cbnz	r0, 8005102 <_svfiprintf_r+0xe6>
 80050ca:	06d0      	lsls	r0, r2, #27
 80050cc:	bf44      	itt	mi
 80050ce:	2320      	movmi	r3, #32
 80050d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050d4:	0711      	lsls	r1, r2, #28
 80050d6:	bf44      	itt	mi
 80050d8:	232b      	movmi	r3, #43	; 0x2b
 80050da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050de:	f89a 3000 	ldrb.w	r3, [sl]
 80050e2:	2b2a      	cmp	r3, #42	; 0x2a
 80050e4:	d015      	beq.n	8005112 <_svfiprintf_r+0xf6>
 80050e6:	9a07      	ldr	r2, [sp, #28]
 80050e8:	4654      	mov	r4, sl
 80050ea:	2000      	movs	r0, #0
 80050ec:	f04f 0c0a 	mov.w	ip, #10
 80050f0:	4621      	mov	r1, r4
 80050f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050f6:	3b30      	subs	r3, #48	; 0x30
 80050f8:	2b09      	cmp	r3, #9
 80050fa:	d94e      	bls.n	800519a <_svfiprintf_r+0x17e>
 80050fc:	b1b0      	cbz	r0, 800512c <_svfiprintf_r+0x110>
 80050fe:	9207      	str	r2, [sp, #28]
 8005100:	e014      	b.n	800512c <_svfiprintf_r+0x110>
 8005102:	eba0 0308 	sub.w	r3, r0, r8
 8005106:	fa09 f303 	lsl.w	r3, r9, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	9304      	str	r3, [sp, #16]
 800510e:	46a2      	mov	sl, r4
 8005110:	e7d2      	b.n	80050b8 <_svfiprintf_r+0x9c>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	1d19      	adds	r1, r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	9103      	str	r1, [sp, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfbb      	ittet	lt
 800511e:	425b      	neglt	r3, r3
 8005120:	f042 0202 	orrlt.w	r2, r2, #2
 8005124:	9307      	strge	r3, [sp, #28]
 8005126:	9307      	strlt	r3, [sp, #28]
 8005128:	bfb8      	it	lt
 800512a:	9204      	strlt	r2, [sp, #16]
 800512c:	7823      	ldrb	r3, [r4, #0]
 800512e:	2b2e      	cmp	r3, #46	; 0x2e
 8005130:	d10c      	bne.n	800514c <_svfiprintf_r+0x130>
 8005132:	7863      	ldrb	r3, [r4, #1]
 8005134:	2b2a      	cmp	r3, #42	; 0x2a
 8005136:	d135      	bne.n	80051a4 <_svfiprintf_r+0x188>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	9203      	str	r2, [sp, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	bfb8      	it	lt
 8005144:	f04f 33ff 	movlt.w	r3, #4294967295
 8005148:	3402      	adds	r4, #2
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005218 <_svfiprintf_r+0x1fc>
 8005150:	7821      	ldrb	r1, [r4, #0]
 8005152:	2203      	movs	r2, #3
 8005154:	4650      	mov	r0, sl
 8005156:	f7fb f843 	bl	80001e0 <memchr>
 800515a:	b140      	cbz	r0, 800516e <_svfiprintf_r+0x152>
 800515c:	2340      	movs	r3, #64	; 0x40
 800515e:	eba0 000a 	sub.w	r0, r0, sl
 8005162:	fa03 f000 	lsl.w	r0, r3, r0
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	4303      	orrs	r3, r0
 800516a:	3401      	adds	r4, #1
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005172:	4826      	ldr	r0, [pc, #152]	; (800520c <_svfiprintf_r+0x1f0>)
 8005174:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005178:	2206      	movs	r2, #6
 800517a:	f7fb f831 	bl	80001e0 <memchr>
 800517e:	2800      	cmp	r0, #0
 8005180:	d038      	beq.n	80051f4 <_svfiprintf_r+0x1d8>
 8005182:	4b23      	ldr	r3, [pc, #140]	; (8005210 <_svfiprintf_r+0x1f4>)
 8005184:	bb1b      	cbnz	r3, 80051ce <_svfiprintf_r+0x1b2>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	3307      	adds	r3, #7
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	3308      	adds	r3, #8
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005194:	4433      	add	r3, r6
 8005196:	9309      	str	r3, [sp, #36]	; 0x24
 8005198:	e767      	b.n	800506a <_svfiprintf_r+0x4e>
 800519a:	fb0c 3202 	mla	r2, ip, r2, r3
 800519e:	460c      	mov	r4, r1
 80051a0:	2001      	movs	r0, #1
 80051a2:	e7a5      	b.n	80050f0 <_svfiprintf_r+0xd4>
 80051a4:	2300      	movs	r3, #0
 80051a6:	3401      	adds	r4, #1
 80051a8:	9305      	str	r3, [sp, #20]
 80051aa:	4619      	mov	r1, r3
 80051ac:	f04f 0c0a 	mov.w	ip, #10
 80051b0:	4620      	mov	r0, r4
 80051b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b6:	3a30      	subs	r2, #48	; 0x30
 80051b8:	2a09      	cmp	r2, #9
 80051ba:	d903      	bls.n	80051c4 <_svfiprintf_r+0x1a8>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0c5      	beq.n	800514c <_svfiprintf_r+0x130>
 80051c0:	9105      	str	r1, [sp, #20]
 80051c2:	e7c3      	b.n	800514c <_svfiprintf_r+0x130>
 80051c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c8:	4604      	mov	r4, r0
 80051ca:	2301      	movs	r3, #1
 80051cc:	e7f0      	b.n	80051b0 <_svfiprintf_r+0x194>
 80051ce:	ab03      	add	r3, sp, #12
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	462a      	mov	r2, r5
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <_svfiprintf_r+0x1f8>)
 80051d6:	a904      	add	r1, sp, #16
 80051d8:	4638      	mov	r0, r7
 80051da:	f3af 8000 	nop.w
 80051de:	1c42      	adds	r2, r0, #1
 80051e0:	4606      	mov	r6, r0
 80051e2:	d1d6      	bne.n	8005192 <_svfiprintf_r+0x176>
 80051e4:	89ab      	ldrh	r3, [r5, #12]
 80051e6:	065b      	lsls	r3, r3, #25
 80051e8:	f53f af2c 	bmi.w	8005044 <_svfiprintf_r+0x28>
 80051ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ee:	b01d      	add	sp, #116	; 0x74
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	ab03      	add	r3, sp, #12
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	462a      	mov	r2, r5
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <_svfiprintf_r+0x1f8>)
 80051fc:	a904      	add	r1, sp, #16
 80051fe:	4638      	mov	r0, r7
 8005200:	f000 f87a 	bl	80052f8 <_printf_i>
 8005204:	e7eb      	b.n	80051de <_svfiprintf_r+0x1c2>
 8005206:	bf00      	nop
 8005208:	080057f5 	.word	0x080057f5
 800520c:	080057ff 	.word	0x080057ff
 8005210:	00000000 	.word	0x00000000
 8005214:	08004f65 	.word	0x08004f65
 8005218:	080057fb 	.word	0x080057fb

0800521c <_printf_common>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	4616      	mov	r6, r2
 8005222:	4699      	mov	r9, r3
 8005224:	688a      	ldr	r2, [r1, #8]
 8005226:	690b      	ldr	r3, [r1, #16]
 8005228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800522c:	4293      	cmp	r3, r2
 800522e:	bfb8      	it	lt
 8005230:	4613      	movlt	r3, r2
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005238:	4607      	mov	r7, r0
 800523a:	460c      	mov	r4, r1
 800523c:	b10a      	cbz	r2, 8005242 <_printf_common+0x26>
 800523e:	3301      	adds	r3, #1
 8005240:	6033      	str	r3, [r6, #0]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	0699      	lsls	r1, r3, #26
 8005246:	bf42      	ittt	mi
 8005248:	6833      	ldrmi	r3, [r6, #0]
 800524a:	3302      	addmi	r3, #2
 800524c:	6033      	strmi	r3, [r6, #0]
 800524e:	6825      	ldr	r5, [r4, #0]
 8005250:	f015 0506 	ands.w	r5, r5, #6
 8005254:	d106      	bne.n	8005264 <_printf_common+0x48>
 8005256:	f104 0a19 	add.w	sl, r4, #25
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	6832      	ldr	r2, [r6, #0]
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	42ab      	cmp	r3, r5
 8005262:	dc26      	bgt.n	80052b2 <_printf_common+0x96>
 8005264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005268:	1e13      	subs	r3, r2, #0
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	bf18      	it	ne
 800526e:	2301      	movne	r3, #1
 8005270:	0692      	lsls	r2, r2, #26
 8005272:	d42b      	bmi.n	80052cc <_printf_common+0xb0>
 8005274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005278:	4649      	mov	r1, r9
 800527a:	4638      	mov	r0, r7
 800527c:	47c0      	blx	r8
 800527e:	3001      	adds	r0, #1
 8005280:	d01e      	beq.n	80052c0 <_printf_common+0xa4>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	68e5      	ldr	r5, [r4, #12]
 8005286:	6832      	ldr	r2, [r6, #0]
 8005288:	f003 0306 	and.w	r3, r3, #6
 800528c:	2b04      	cmp	r3, #4
 800528e:	bf08      	it	eq
 8005290:	1aad      	subeq	r5, r5, r2
 8005292:	68a3      	ldr	r3, [r4, #8]
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	bf0c      	ite	eq
 8005298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800529c:	2500      	movne	r5, #0
 800529e:	4293      	cmp	r3, r2
 80052a0:	bfc4      	itt	gt
 80052a2:	1a9b      	subgt	r3, r3, r2
 80052a4:	18ed      	addgt	r5, r5, r3
 80052a6:	2600      	movs	r6, #0
 80052a8:	341a      	adds	r4, #26
 80052aa:	42b5      	cmp	r5, r6
 80052ac:	d11a      	bne.n	80052e4 <_printf_common+0xc8>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e008      	b.n	80052c4 <_printf_common+0xa8>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4652      	mov	r2, sl
 80052b6:	4649      	mov	r1, r9
 80052b8:	4638      	mov	r0, r7
 80052ba:	47c0      	blx	r8
 80052bc:	3001      	adds	r0, #1
 80052be:	d103      	bne.n	80052c8 <_printf_common+0xac>
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c8:	3501      	adds	r5, #1
 80052ca:	e7c6      	b.n	800525a <_printf_common+0x3e>
 80052cc:	18e1      	adds	r1, r4, r3
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	2030      	movs	r0, #48	; 0x30
 80052d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d6:	4422      	add	r2, r4
 80052d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052e0:	3302      	adds	r3, #2
 80052e2:	e7c7      	b.n	8005274 <_printf_common+0x58>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4622      	mov	r2, r4
 80052e8:	4649      	mov	r1, r9
 80052ea:	4638      	mov	r0, r7
 80052ec:	47c0      	blx	r8
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0e6      	beq.n	80052c0 <_printf_common+0xa4>
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7d9      	b.n	80052aa <_printf_common+0x8e>
	...

080052f8 <_printf_i>:
 80052f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	460c      	mov	r4, r1
 80052fe:	4691      	mov	r9, r2
 8005300:	7e27      	ldrb	r7, [r4, #24]
 8005302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005304:	2f78      	cmp	r7, #120	; 0x78
 8005306:	4680      	mov	r8, r0
 8005308:	469a      	mov	sl, r3
 800530a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800530e:	d807      	bhi.n	8005320 <_printf_i+0x28>
 8005310:	2f62      	cmp	r7, #98	; 0x62
 8005312:	d80a      	bhi.n	800532a <_printf_i+0x32>
 8005314:	2f00      	cmp	r7, #0
 8005316:	f000 80d8 	beq.w	80054ca <_printf_i+0x1d2>
 800531a:	2f58      	cmp	r7, #88	; 0x58
 800531c:	f000 80a3 	beq.w	8005466 <_printf_i+0x16e>
 8005320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005328:	e03a      	b.n	80053a0 <_printf_i+0xa8>
 800532a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800532e:	2b15      	cmp	r3, #21
 8005330:	d8f6      	bhi.n	8005320 <_printf_i+0x28>
 8005332:	a001      	add	r0, pc, #4	; (adr r0, 8005338 <_printf_i+0x40>)
 8005334:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005338:	08005391 	.word	0x08005391
 800533c:	080053a5 	.word	0x080053a5
 8005340:	08005321 	.word	0x08005321
 8005344:	08005321 	.word	0x08005321
 8005348:	08005321 	.word	0x08005321
 800534c:	08005321 	.word	0x08005321
 8005350:	080053a5 	.word	0x080053a5
 8005354:	08005321 	.word	0x08005321
 8005358:	08005321 	.word	0x08005321
 800535c:	08005321 	.word	0x08005321
 8005360:	08005321 	.word	0x08005321
 8005364:	080054b1 	.word	0x080054b1
 8005368:	080053d5 	.word	0x080053d5
 800536c:	08005493 	.word	0x08005493
 8005370:	08005321 	.word	0x08005321
 8005374:	08005321 	.word	0x08005321
 8005378:	080054d3 	.word	0x080054d3
 800537c:	08005321 	.word	0x08005321
 8005380:	080053d5 	.word	0x080053d5
 8005384:	08005321 	.word	0x08005321
 8005388:	08005321 	.word	0x08005321
 800538c:	0800549b 	.word	0x0800549b
 8005390:	680b      	ldr	r3, [r1, #0]
 8005392:	1d1a      	adds	r2, r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	600a      	str	r2, [r1, #0]
 8005398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800539c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0a3      	b.n	80054ec <_printf_i+0x1f4>
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	6808      	ldr	r0, [r1, #0]
 80053a8:	062e      	lsls	r6, r5, #24
 80053aa:	f100 0304 	add.w	r3, r0, #4
 80053ae:	d50a      	bpl.n	80053c6 <_printf_i+0xce>
 80053b0:	6805      	ldr	r5, [r0, #0]
 80053b2:	600b      	str	r3, [r1, #0]
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	da03      	bge.n	80053c0 <_printf_i+0xc8>
 80053b8:	232d      	movs	r3, #45	; 0x2d
 80053ba:	426d      	negs	r5, r5
 80053bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c0:	485e      	ldr	r0, [pc, #376]	; (800553c <_printf_i+0x244>)
 80053c2:	230a      	movs	r3, #10
 80053c4:	e019      	b.n	80053fa <_printf_i+0x102>
 80053c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053ca:	6805      	ldr	r5, [r0, #0]
 80053cc:	600b      	str	r3, [r1, #0]
 80053ce:	bf18      	it	ne
 80053d0:	b22d      	sxthne	r5, r5
 80053d2:	e7ef      	b.n	80053b4 <_printf_i+0xbc>
 80053d4:	680b      	ldr	r3, [r1, #0]
 80053d6:	6825      	ldr	r5, [r4, #0]
 80053d8:	1d18      	adds	r0, r3, #4
 80053da:	6008      	str	r0, [r1, #0]
 80053dc:	0628      	lsls	r0, r5, #24
 80053de:	d501      	bpl.n	80053e4 <_printf_i+0xec>
 80053e0:	681d      	ldr	r5, [r3, #0]
 80053e2:	e002      	b.n	80053ea <_printf_i+0xf2>
 80053e4:	0669      	lsls	r1, r5, #25
 80053e6:	d5fb      	bpl.n	80053e0 <_printf_i+0xe8>
 80053e8:	881d      	ldrh	r5, [r3, #0]
 80053ea:	4854      	ldr	r0, [pc, #336]	; (800553c <_printf_i+0x244>)
 80053ec:	2f6f      	cmp	r7, #111	; 0x6f
 80053ee:	bf0c      	ite	eq
 80053f0:	2308      	moveq	r3, #8
 80053f2:	230a      	movne	r3, #10
 80053f4:	2100      	movs	r1, #0
 80053f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053fa:	6866      	ldr	r6, [r4, #4]
 80053fc:	60a6      	str	r6, [r4, #8]
 80053fe:	2e00      	cmp	r6, #0
 8005400:	bfa2      	ittt	ge
 8005402:	6821      	ldrge	r1, [r4, #0]
 8005404:	f021 0104 	bicge.w	r1, r1, #4
 8005408:	6021      	strge	r1, [r4, #0]
 800540a:	b90d      	cbnz	r5, 8005410 <_printf_i+0x118>
 800540c:	2e00      	cmp	r6, #0
 800540e:	d04d      	beq.n	80054ac <_printf_i+0x1b4>
 8005410:	4616      	mov	r6, r2
 8005412:	fbb5 f1f3 	udiv	r1, r5, r3
 8005416:	fb03 5711 	mls	r7, r3, r1, r5
 800541a:	5dc7      	ldrb	r7, [r0, r7]
 800541c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005420:	462f      	mov	r7, r5
 8005422:	42bb      	cmp	r3, r7
 8005424:	460d      	mov	r5, r1
 8005426:	d9f4      	bls.n	8005412 <_printf_i+0x11a>
 8005428:	2b08      	cmp	r3, #8
 800542a:	d10b      	bne.n	8005444 <_printf_i+0x14c>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	07df      	lsls	r7, r3, #31
 8005430:	d508      	bpl.n	8005444 <_printf_i+0x14c>
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	6861      	ldr	r1, [r4, #4]
 8005436:	4299      	cmp	r1, r3
 8005438:	bfde      	ittt	le
 800543a:	2330      	movle	r3, #48	; 0x30
 800543c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005440:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005444:	1b92      	subs	r2, r2, r6
 8005446:	6122      	str	r2, [r4, #16]
 8005448:	f8cd a000 	str.w	sl, [sp]
 800544c:	464b      	mov	r3, r9
 800544e:	aa03      	add	r2, sp, #12
 8005450:	4621      	mov	r1, r4
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff fee2 	bl	800521c <_printf_common>
 8005458:	3001      	adds	r0, #1
 800545a:	d14c      	bne.n	80054f6 <_printf_i+0x1fe>
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	b004      	add	sp, #16
 8005462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005466:	4835      	ldr	r0, [pc, #212]	; (800553c <_printf_i+0x244>)
 8005468:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	680e      	ldr	r6, [r1, #0]
 8005470:	061f      	lsls	r7, r3, #24
 8005472:	f856 5b04 	ldr.w	r5, [r6], #4
 8005476:	600e      	str	r6, [r1, #0]
 8005478:	d514      	bpl.n	80054a4 <_printf_i+0x1ac>
 800547a:	07d9      	lsls	r1, r3, #31
 800547c:	bf44      	itt	mi
 800547e:	f043 0320 	orrmi.w	r3, r3, #32
 8005482:	6023      	strmi	r3, [r4, #0]
 8005484:	b91d      	cbnz	r5, 800548e <_printf_i+0x196>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f023 0320 	bic.w	r3, r3, #32
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	2310      	movs	r3, #16
 8005490:	e7b0      	b.n	80053f4 <_printf_i+0xfc>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f043 0320 	orr.w	r3, r3, #32
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	2378      	movs	r3, #120	; 0x78
 800549c:	4828      	ldr	r0, [pc, #160]	; (8005540 <_printf_i+0x248>)
 800549e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054a2:	e7e3      	b.n	800546c <_printf_i+0x174>
 80054a4:	065e      	lsls	r6, r3, #25
 80054a6:	bf48      	it	mi
 80054a8:	b2ad      	uxthmi	r5, r5
 80054aa:	e7e6      	b.n	800547a <_printf_i+0x182>
 80054ac:	4616      	mov	r6, r2
 80054ae:	e7bb      	b.n	8005428 <_printf_i+0x130>
 80054b0:	680b      	ldr	r3, [r1, #0]
 80054b2:	6826      	ldr	r6, [r4, #0]
 80054b4:	6960      	ldr	r0, [r4, #20]
 80054b6:	1d1d      	adds	r5, r3, #4
 80054b8:	600d      	str	r5, [r1, #0]
 80054ba:	0635      	lsls	r5, r6, #24
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	d501      	bpl.n	80054c4 <_printf_i+0x1cc>
 80054c0:	6018      	str	r0, [r3, #0]
 80054c2:	e002      	b.n	80054ca <_printf_i+0x1d2>
 80054c4:	0671      	lsls	r1, r6, #25
 80054c6:	d5fb      	bpl.n	80054c0 <_printf_i+0x1c8>
 80054c8:	8018      	strh	r0, [r3, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	4616      	mov	r6, r2
 80054d0:	e7ba      	b.n	8005448 <_printf_i+0x150>
 80054d2:	680b      	ldr	r3, [r1, #0]
 80054d4:	1d1a      	adds	r2, r3, #4
 80054d6:	600a      	str	r2, [r1, #0]
 80054d8:	681e      	ldr	r6, [r3, #0]
 80054da:	6862      	ldr	r2, [r4, #4]
 80054dc:	2100      	movs	r1, #0
 80054de:	4630      	mov	r0, r6
 80054e0:	f7fa fe7e 	bl	80001e0 <memchr>
 80054e4:	b108      	cbz	r0, 80054ea <_printf_i+0x1f2>
 80054e6:	1b80      	subs	r0, r0, r6
 80054e8:	6060      	str	r0, [r4, #4]
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	6123      	str	r3, [r4, #16]
 80054ee:	2300      	movs	r3, #0
 80054f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f4:	e7a8      	b.n	8005448 <_printf_i+0x150>
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	4632      	mov	r2, r6
 80054fa:	4649      	mov	r1, r9
 80054fc:	4640      	mov	r0, r8
 80054fe:	47d0      	blx	sl
 8005500:	3001      	adds	r0, #1
 8005502:	d0ab      	beq.n	800545c <_printf_i+0x164>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	079b      	lsls	r3, r3, #30
 8005508:	d413      	bmi.n	8005532 <_printf_i+0x23a>
 800550a:	68e0      	ldr	r0, [r4, #12]
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	4298      	cmp	r0, r3
 8005510:	bfb8      	it	lt
 8005512:	4618      	movlt	r0, r3
 8005514:	e7a4      	b.n	8005460 <_printf_i+0x168>
 8005516:	2301      	movs	r3, #1
 8005518:	4632      	mov	r2, r6
 800551a:	4649      	mov	r1, r9
 800551c:	4640      	mov	r0, r8
 800551e:	47d0      	blx	sl
 8005520:	3001      	adds	r0, #1
 8005522:	d09b      	beq.n	800545c <_printf_i+0x164>
 8005524:	3501      	adds	r5, #1
 8005526:	68e3      	ldr	r3, [r4, #12]
 8005528:	9903      	ldr	r1, [sp, #12]
 800552a:	1a5b      	subs	r3, r3, r1
 800552c:	42ab      	cmp	r3, r5
 800552e:	dcf2      	bgt.n	8005516 <_printf_i+0x21e>
 8005530:	e7eb      	b.n	800550a <_printf_i+0x212>
 8005532:	2500      	movs	r5, #0
 8005534:	f104 0619 	add.w	r6, r4, #25
 8005538:	e7f5      	b.n	8005526 <_printf_i+0x22e>
 800553a:	bf00      	nop
 800553c:	08005806 	.word	0x08005806
 8005540:	08005817 	.word	0x08005817

08005544 <memmove>:
 8005544:	4288      	cmp	r0, r1
 8005546:	b510      	push	{r4, lr}
 8005548:	eb01 0402 	add.w	r4, r1, r2
 800554c:	d902      	bls.n	8005554 <memmove+0x10>
 800554e:	4284      	cmp	r4, r0
 8005550:	4623      	mov	r3, r4
 8005552:	d807      	bhi.n	8005564 <memmove+0x20>
 8005554:	1e43      	subs	r3, r0, #1
 8005556:	42a1      	cmp	r1, r4
 8005558:	d008      	beq.n	800556c <memmove+0x28>
 800555a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005562:	e7f8      	b.n	8005556 <memmove+0x12>
 8005564:	4402      	add	r2, r0
 8005566:	4601      	mov	r1, r0
 8005568:	428a      	cmp	r2, r1
 800556a:	d100      	bne.n	800556e <memmove+0x2a>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005576:	e7f7      	b.n	8005568 <memmove+0x24>

08005578 <_free_r>:
 8005578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800557a:	2900      	cmp	r1, #0
 800557c:	d048      	beq.n	8005610 <_free_r+0x98>
 800557e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005582:	9001      	str	r0, [sp, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f1a1 0404 	sub.w	r4, r1, #4
 800558a:	bfb8      	it	lt
 800558c:	18e4      	addlt	r4, r4, r3
 800558e:	f000 f8d3 	bl	8005738 <__malloc_lock>
 8005592:	4a20      	ldr	r2, [pc, #128]	; (8005614 <_free_r+0x9c>)
 8005594:	9801      	ldr	r0, [sp, #4]
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	4615      	mov	r5, r2
 800559a:	b933      	cbnz	r3, 80055aa <_free_r+0x32>
 800559c:	6063      	str	r3, [r4, #4]
 800559e:	6014      	str	r4, [r2, #0]
 80055a0:	b003      	add	sp, #12
 80055a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055a6:	f000 b8cd 	b.w	8005744 <__malloc_unlock>
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	d90b      	bls.n	80055c6 <_free_r+0x4e>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	1862      	adds	r2, r4, r1
 80055b2:	4293      	cmp	r3, r2
 80055b4:	bf04      	itt	eq
 80055b6:	681a      	ldreq	r2, [r3, #0]
 80055b8:	685b      	ldreq	r3, [r3, #4]
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	bf04      	itt	eq
 80055be:	1852      	addeq	r2, r2, r1
 80055c0:	6022      	streq	r2, [r4, #0]
 80055c2:	602c      	str	r4, [r5, #0]
 80055c4:	e7ec      	b.n	80055a0 <_free_r+0x28>
 80055c6:	461a      	mov	r2, r3
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	b10b      	cbz	r3, 80055d0 <_free_r+0x58>
 80055cc:	42a3      	cmp	r3, r4
 80055ce:	d9fa      	bls.n	80055c6 <_free_r+0x4e>
 80055d0:	6811      	ldr	r1, [r2, #0]
 80055d2:	1855      	adds	r5, r2, r1
 80055d4:	42a5      	cmp	r5, r4
 80055d6:	d10b      	bne.n	80055f0 <_free_r+0x78>
 80055d8:	6824      	ldr	r4, [r4, #0]
 80055da:	4421      	add	r1, r4
 80055dc:	1854      	adds	r4, r2, r1
 80055de:	42a3      	cmp	r3, r4
 80055e0:	6011      	str	r1, [r2, #0]
 80055e2:	d1dd      	bne.n	80055a0 <_free_r+0x28>
 80055e4:	681c      	ldr	r4, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	6053      	str	r3, [r2, #4]
 80055ea:	4421      	add	r1, r4
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	e7d7      	b.n	80055a0 <_free_r+0x28>
 80055f0:	d902      	bls.n	80055f8 <_free_r+0x80>
 80055f2:	230c      	movs	r3, #12
 80055f4:	6003      	str	r3, [r0, #0]
 80055f6:	e7d3      	b.n	80055a0 <_free_r+0x28>
 80055f8:	6825      	ldr	r5, [r4, #0]
 80055fa:	1961      	adds	r1, r4, r5
 80055fc:	428b      	cmp	r3, r1
 80055fe:	bf04      	itt	eq
 8005600:	6819      	ldreq	r1, [r3, #0]
 8005602:	685b      	ldreq	r3, [r3, #4]
 8005604:	6063      	str	r3, [r4, #4]
 8005606:	bf04      	itt	eq
 8005608:	1949      	addeq	r1, r1, r5
 800560a:	6021      	streq	r1, [r4, #0]
 800560c:	6054      	str	r4, [r2, #4]
 800560e:	e7c7      	b.n	80055a0 <_free_r+0x28>
 8005610:	b003      	add	sp, #12
 8005612:	bd30      	pop	{r4, r5, pc}
 8005614:	20012df4 	.word	0x20012df4

08005618 <_malloc_r>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	1ccd      	adds	r5, r1, #3
 800561c:	f025 0503 	bic.w	r5, r5, #3
 8005620:	3508      	adds	r5, #8
 8005622:	2d0c      	cmp	r5, #12
 8005624:	bf38      	it	cc
 8005626:	250c      	movcc	r5, #12
 8005628:	2d00      	cmp	r5, #0
 800562a:	4606      	mov	r6, r0
 800562c:	db01      	blt.n	8005632 <_malloc_r+0x1a>
 800562e:	42a9      	cmp	r1, r5
 8005630:	d903      	bls.n	800563a <_malloc_r+0x22>
 8005632:	230c      	movs	r3, #12
 8005634:	6033      	str	r3, [r6, #0]
 8005636:	2000      	movs	r0, #0
 8005638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800563a:	f000 f87d 	bl	8005738 <__malloc_lock>
 800563e:	4921      	ldr	r1, [pc, #132]	; (80056c4 <_malloc_r+0xac>)
 8005640:	680a      	ldr	r2, [r1, #0]
 8005642:	4614      	mov	r4, r2
 8005644:	b99c      	cbnz	r4, 800566e <_malloc_r+0x56>
 8005646:	4f20      	ldr	r7, [pc, #128]	; (80056c8 <_malloc_r+0xb0>)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	b923      	cbnz	r3, 8005656 <_malloc_r+0x3e>
 800564c:	4621      	mov	r1, r4
 800564e:	4630      	mov	r0, r6
 8005650:	f000 f862 	bl	8005718 <_sbrk_r>
 8005654:	6038      	str	r0, [r7, #0]
 8005656:	4629      	mov	r1, r5
 8005658:	4630      	mov	r0, r6
 800565a:	f000 f85d 	bl	8005718 <_sbrk_r>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	d123      	bne.n	80056aa <_malloc_r+0x92>
 8005662:	230c      	movs	r3, #12
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	4630      	mov	r0, r6
 8005668:	f000 f86c 	bl	8005744 <__malloc_unlock>
 800566c:	e7e3      	b.n	8005636 <_malloc_r+0x1e>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	1b5b      	subs	r3, r3, r5
 8005672:	d417      	bmi.n	80056a4 <_malloc_r+0x8c>
 8005674:	2b0b      	cmp	r3, #11
 8005676:	d903      	bls.n	8005680 <_malloc_r+0x68>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	441c      	add	r4, r3
 800567c:	6025      	str	r5, [r4, #0]
 800567e:	e004      	b.n	800568a <_malloc_r+0x72>
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	42a2      	cmp	r2, r4
 8005684:	bf0c      	ite	eq
 8005686:	600b      	streq	r3, [r1, #0]
 8005688:	6053      	strne	r3, [r2, #4]
 800568a:	4630      	mov	r0, r6
 800568c:	f000 f85a 	bl	8005744 <__malloc_unlock>
 8005690:	f104 000b 	add.w	r0, r4, #11
 8005694:	1d23      	adds	r3, r4, #4
 8005696:	f020 0007 	bic.w	r0, r0, #7
 800569a:	1ac2      	subs	r2, r0, r3
 800569c:	d0cc      	beq.n	8005638 <_malloc_r+0x20>
 800569e:	1a1b      	subs	r3, r3, r0
 80056a0:	50a3      	str	r3, [r4, r2]
 80056a2:	e7c9      	b.n	8005638 <_malloc_r+0x20>
 80056a4:	4622      	mov	r2, r4
 80056a6:	6864      	ldr	r4, [r4, #4]
 80056a8:	e7cc      	b.n	8005644 <_malloc_r+0x2c>
 80056aa:	1cc4      	adds	r4, r0, #3
 80056ac:	f024 0403 	bic.w	r4, r4, #3
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d0e3      	beq.n	800567c <_malloc_r+0x64>
 80056b4:	1a21      	subs	r1, r4, r0
 80056b6:	4630      	mov	r0, r6
 80056b8:	f000 f82e 	bl	8005718 <_sbrk_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	d1dd      	bne.n	800567c <_malloc_r+0x64>
 80056c0:	e7cf      	b.n	8005662 <_malloc_r+0x4a>
 80056c2:	bf00      	nop
 80056c4:	20012df4 	.word	0x20012df4
 80056c8:	20012df8 	.word	0x20012df8

080056cc <_realloc_r>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	4607      	mov	r7, r0
 80056d0:	4614      	mov	r4, r2
 80056d2:	460e      	mov	r6, r1
 80056d4:	b921      	cbnz	r1, 80056e0 <_realloc_r+0x14>
 80056d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056da:	4611      	mov	r1, r2
 80056dc:	f7ff bf9c 	b.w	8005618 <_malloc_r>
 80056e0:	b922      	cbnz	r2, 80056ec <_realloc_r+0x20>
 80056e2:	f7ff ff49 	bl	8005578 <_free_r>
 80056e6:	4625      	mov	r5, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ec:	f000 f830 	bl	8005750 <_malloc_usable_size_r>
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d20f      	bcs.n	8005714 <_realloc_r+0x48>
 80056f4:	4621      	mov	r1, r4
 80056f6:	4638      	mov	r0, r7
 80056f8:	f7ff ff8e 	bl	8005618 <_malloc_r>
 80056fc:	4605      	mov	r5, r0
 80056fe:	2800      	cmp	r0, #0
 8005700:	d0f2      	beq.n	80056e8 <_realloc_r+0x1c>
 8005702:	4631      	mov	r1, r6
 8005704:	4622      	mov	r2, r4
 8005706:	f7ff fbb5 	bl	8004e74 <memcpy>
 800570a:	4631      	mov	r1, r6
 800570c:	4638      	mov	r0, r7
 800570e:	f7ff ff33 	bl	8005578 <_free_r>
 8005712:	e7e9      	b.n	80056e8 <_realloc_r+0x1c>
 8005714:	4635      	mov	r5, r6
 8005716:	e7e7      	b.n	80056e8 <_realloc_r+0x1c>

08005718 <_sbrk_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4d06      	ldr	r5, [pc, #24]	; (8005734 <_sbrk_r+0x1c>)
 800571c:	2300      	movs	r3, #0
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	602b      	str	r3, [r5, #0]
 8005724:	f7fb fa8c 	bl	8000c40 <_sbrk>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d102      	bne.n	8005732 <_sbrk_r+0x1a>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	b103      	cbz	r3, 8005732 <_sbrk_r+0x1a>
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	20012ecc 	.word	0x20012ecc

08005738 <__malloc_lock>:
 8005738:	4801      	ldr	r0, [pc, #4]	; (8005740 <__malloc_lock+0x8>)
 800573a:	f000 b811 	b.w	8005760 <__retarget_lock_acquire_recursive>
 800573e:	bf00      	nop
 8005740:	20012ed4 	.word	0x20012ed4

08005744 <__malloc_unlock>:
 8005744:	4801      	ldr	r0, [pc, #4]	; (800574c <__malloc_unlock+0x8>)
 8005746:	f000 b80c 	b.w	8005762 <__retarget_lock_release_recursive>
 800574a:	bf00      	nop
 800574c:	20012ed4 	.word	0x20012ed4

08005750 <_malloc_usable_size_r>:
 8005750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005754:	1f18      	subs	r0, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfbc      	itt	lt
 800575a:	580b      	ldrlt	r3, [r1, r0]
 800575c:	18c0      	addlt	r0, r0, r3
 800575e:	4770      	bx	lr

08005760 <__retarget_lock_acquire_recursive>:
 8005760:	4770      	bx	lr

08005762 <__retarget_lock_release_recursive>:
 8005762:	4770      	bx	lr

08005764 <_init>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr

08005770 <_fini>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr
