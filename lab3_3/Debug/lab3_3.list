
lab3_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c0  080053c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c8  080053c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012e6c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e7c  20012e7c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134bf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aac  00000000  00000000  000334ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  00037010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219c0  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116f1  00000000  00000000  00059908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1c75  00000000  00000000  0006aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013cc6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004454  00000000  00000000  0013ccc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005360 	.word	0x08005360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005360 	.word	0x08005360

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MEMS_Write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <MEMS_Write+0x44>)
 80004de:	f000 feeb 	bl	80012b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004e2:	1df9      	adds	r1, r7, #7
 80004e4:	230a      	movs	r3, #10
 80004e6:	2201      	movs	r2, #1
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MEMS_Write+0x48>)
 80004ea:	f001 fc4c 	bl	8001d86 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004ee:	1db9      	adds	r1, r7, #6
 80004f0:	230a      	movs	r3, #10
 80004f2:	2201      	movs	r2, #1
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <MEMS_Write+0x48>)
 80004f6:	f001 fc46 	bl	8001d86 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2108      	movs	r1, #8
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <MEMS_Write+0x44>)
 8000500:	f000 feda 	bl	80012b8 <HAL_GPIO_WritePin>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	20012d98 	.word	0x20012d98

08000514 <Reset_Interupt>:


void Reset_Interupt()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	MEMS_Write(0x20,0x0f);
 8000518:	210f      	movs	r1, #15
 800051a:	2020      	movs	r0, #32
 800051c:	f7ff ffd4 	bl	80004c8 <MEMS_Write>
	MEMS_Write(0x22,0x80);
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	2022      	movs	r0, #34	; 0x22
 8000524:	f7ff ffd0 	bl	80004c8 <MEMS_Write>
	MEMS_Write(0x23,0x00);
 8000528:	2100      	movs	r1, #0
 800052a:	2023      	movs	r0, #35	; 0x23
 800052c:	f7ff ffcc 	bl	80004c8 <MEMS_Write>

	MEMS_Write(0x32,0x2C);
 8000530:	212c      	movs	r1, #44	; 0x2c
 8000532:	2032      	movs	r0, #50	; 0x32
 8000534:	f7ff ffc8 	bl	80004c8 <MEMS_Write>
	MEMS_Write(0x33,0xA4);
 8000538:	21a4      	movs	r1, #164	; 0xa4
 800053a:	2033      	movs	r0, #51	; 0x33
 800053c:	f7ff ffc4 	bl	80004c8 <MEMS_Write>

	MEMS_Write(0x34,0x2C);
 8000540:	212c      	movs	r1, #44	; 0x2c
 8000542:	2034      	movs	r0, #52	; 0x34
 8000544:	f7ff ffc0 	bl	80004c8 <MEMS_Write>
	MEMS_Write(0x35,0xA4);
 8000548:	21a4      	movs	r1, #164	; 0xa4
 800054a:	2035      	movs	r0, #53	; 0x35
 800054c:	f7ff ffbc 	bl	80004c8 <MEMS_Write>

	MEMS_Write(0x36,0x2C);
 8000550:	212c      	movs	r1, #44	; 0x2c
 8000552:	2036      	movs	r0, #54	; 0x36
 8000554:	f7ff ffb8 	bl	80004c8 <MEMS_Write>
	MEMS_Write(0x37,0xA4);
 8000558:	21a4      	movs	r1, #164	; 0xa4
 800055a:	2037      	movs	r0, #55	; 0x37
 800055c:	f7ff ffb4 	bl	80004c8 <MEMS_Write>

	MEMS_Write(0x38,0x01);
 8000560:	2101      	movs	r1, #1
 8000562:	2038      	movs	r0, #56	; 0x38
 8000564:	f7ff ffb0 	bl	80004c8 <MEMS_Write>

	MEMS_Write(0x30,0x20);
 8000568:	2120      	movs	r1, #32
 800056a:	2030      	movs	r0, #48	; 0x30
 800056c:	f7ff ffac 	bl	80004c8 <MEMS_Write>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <Task1>:

void Task1( void *pvParameters )
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    for(;;)
    {
    	/* Green LED blinking */
    	Green_LED_High;   // Green LED ON
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	4809      	ldr	r0, [pc, #36]	; (80005a8 <Task1+0x34>)
 8000584:	f000 fe98 	bl	80012b8 <HAL_GPIO_WritePin>
    	vTaskDelay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058c:	f003 f900 	bl	8003790 <vTaskDelay>
    	Green_LED_Low;   // Green LED OFF
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <Task1+0x34>)
 8000598:	f000 fe8e 	bl	80012b8 <HAL_GPIO_WritePin>
    	vTaskDelay(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a0:	f003 f8f6 	bl	8003790 <vTaskDelay>
    	Green_LED_High;   // Green LED ON
 80005a4:	e7ea      	b.n	800057c <Task1+0x8>
 80005a6:	bf00      	nop
 80005a8:	40020c00 	.word	0x40020c00

080005ac <Task2_handle>:
    }
}

void Task2_handle(void *pvParameters)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    for(;;)
    {
    	/* if take the Semaphore*/
        if(xSemaphoreTake(xSemaphore,LONG_TIME)==pdTRUE)
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <Task2_handle+0x5c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fd17 	bl	8002ff0 <xQueueSemaphoreTake>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d1f5      	bne.n	80005b4 <Task2_handle+0x8>
        {
        	MEMS_Write(0x30,0x00);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2030      	movs	r0, #48	; 0x30
 80005cc:	f7ff ff7c 	bl	80004c8 <MEMS_Write>
            /* Orange LED blinking 5 times */
            for (int i = 0; i < 10;i++)
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e012      	b.n	80005fc <Task2_handle+0x50>
            {
            	Oran_toggle;
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	480c      	ldr	r0, [pc, #48]	; (800060c <Task2_handle+0x60>)
 80005dc:	f000 fe85 	bl	80012ea <HAL_GPIO_TogglePin>
            	/* wait 250 ms */
            	uint32_t From_begin_time = xTaskGetTickCount();//must use the function
 80005e0:	f003 fa02 	bl	80039e8 <xTaskGetTickCount>
 80005e4:	60b8      	str	r0, [r7, #8]
            	while (xTaskGetTickCount()-From_begin_time< 250/portTICK_PERIOD_MS)
 80005e6:	bf00      	nop
 80005e8:	f003 f9fe 	bl	80039e8 <xTaskGetTickCount>
 80005ec:	4602      	mov	r2, r0
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	2bf9      	cmp	r3, #249	; 0xf9
 80005f4:	d9f8      	bls.n	80005e8 <Task2_handle+0x3c>
            for (int i = 0; i < 10;i++)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b09      	cmp	r3, #9
 8000600:	dde9      	ble.n	80005d6 <Task2_handle+0x2a>
            	{
            		;
            	}
    	    }
            Reset_Interupt();
 8000602:	f7ff ff87 	bl	8000514 <Reset_Interupt>
        if(xSemaphoreTake(xSemaphore,LONG_TIME)==pdTRUE)
 8000606:	e7d5      	b.n	80005b4 <Task2_handle+0x8>
 8000608:	20012d90 	.word	0x20012d90
 800060c:	40020c00 	.word	0x40020c00

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb8f 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f835 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8d3 	bl	80007c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000622:	f000 f89b 	bl	800075c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Reset_Interupt();
 8000626:	f7ff ff75 	bl	8000514 <Reset_Interupt>
  xSemaphore = xSemaphoreCreateBinary();
 800062a:	2203      	movs	r2, #3
 800062c:	2100      	movs	r1, #0
 800062e:	2001      	movs	r0, #1
 8000630:	f002 f97a 	bl	8002928 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <main+0x60>)
 8000638:	6013      	str	r3, [r2, #0]
  xTaskCreate(Task2_handle, "Task2_handle", 3000, NULL, 6, NULL); //the number higher the priority higher
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2306      	movs	r3, #6
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000648:	490a      	ldr	r1, [pc, #40]	; (8000674 <main+0x64>)
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x68>)
 800064c:	f002 ff62 	bl	8003514 <xTaskCreate>
  xTaskCreate(Task1, "Task1", 3000, NULL, 2,  Task_1_Handle);
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <main+0x6c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2302      	movs	r3, #2
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000660:	4907      	ldr	r1, [pc, #28]	; (8000680 <main+0x70>)
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <main+0x74>)
 8000664:	f002 ff56 	bl	8003514 <xTaskCreate>

  vTaskStartScheduler();
 8000668:	f003 f8c6 	bl	80037f8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x5c>
 800066e:	bf00      	nop
 8000670:	20012d90 	.word	0x20012d90
 8000674:	08005378 	.word	0x08005378
 8000678:	080005ad 	.word	0x080005ad
 800067c:	20012d8c 	.word	0x20012d8c
 8000680:	08005388 	.word	0x08005388
 8000684:	08000575 	.word	0x08000575

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fe5a 	bl	8005350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006fc:	2332      	movs	r3, #50	; 0x32
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000700:	2304      	movs	r3, #4
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fe1f 	bl	8001350 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f9da 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f880 	bl	8001840 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000746:	f000 f9c3 	bl	8000ad0 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MX_SPI1_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_SPI1_Init+0x64>)
 80007ae:	f001 fa61 	bl	8001c74 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f98a 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20012d98 	.word	0x20012d98
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b97      	ldr	r3, [pc, #604]	; (8000a40 <MX_GPIO_Init+0x278>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a96      	ldr	r2, [pc, #600]	; (8000a40 <MX_GPIO_Init+0x278>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x278>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b90      	ldr	r3, [pc, #576]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a8f      	ldr	r2, [pc, #572]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x278>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <MX_GPIO_Init+0x278>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a88      	ldr	r2, [pc, #544]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b82      	ldr	r3, [pc, #520]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a81      	ldr	r2, [pc, #516]	; (8000a40 <MX_GPIO_Init+0x278>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a7a      	ldr	r2, [pc, #488]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b78      	ldr	r3, [pc, #480]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a73      	ldr	r2, [pc, #460]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b71      	ldr	r3, [pc, #452]	; (8000a40 <MX_GPIO_Init+0x278>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2108      	movs	r1, #8
 800088a:	486e      	ldr	r0, [pc, #440]	; (8000a44 <MX_GPIO_Init+0x27c>)
 800088c:	f000 fd14 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	486c      	ldr	r0, [pc, #432]	; (8000a48 <MX_GPIO_Init+0x280>)
 8000896:	f000 fd0f 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089a:	2200      	movs	r2, #0
 800089c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a0:	486a      	ldr	r0, [pc, #424]	; (8000a4c <MX_GPIO_Init+0x284>)
 80008a2:	f000 fd09 	bl	80012b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4861      	ldr	r0, [pc, #388]	; (8000a44 <MX_GPIO_Init+0x27c>)
 80008be:	f000 fb5f 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	485b      	ldr	r0, [pc, #364]	; (8000a48 <MX_GPIO_Init+0x280>)
 80008da:	f000 fb51 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4853      	ldr	r0, [pc, #332]	; (8000a48 <MX_GPIO_Init+0x280>)
 80008fa:	f000 fb41 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008fe:	2310      	movs	r3, #16
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090e:	2306      	movs	r3, #6
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	484d      	ldr	r0, [pc, #308]	; (8000a50 <MX_GPIO_Init+0x288>)
 800091a:	f000 fb31 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091e:	2304      	movs	r3, #4
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4848      	ldr	r0, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x28c>)
 8000932:	f000 fb25 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000948:	2305      	movs	r3, #5
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4840      	ldr	r0, [pc, #256]	; (8000a54 <MX_GPIO_Init+0x28c>)
 8000954:	f000 fb14 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000958:	f24f 0310 	movw	r3, #61456	; 0xf010
 800095c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4836      	ldr	r0, [pc, #216]	; (8000a4c <MX_GPIO_Init+0x284>)
 8000972:	f000 fb05 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000976:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000988:	2306      	movs	r3, #6
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	482d      	ldr	r0, [pc, #180]	; (8000a48 <MX_GPIO_Init+0x280>)
 8000994:	f000 faf4 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4828      	ldr	r0, [pc, #160]	; (8000a50 <MX_GPIO_Init+0x288>)
 80009ae:	f000 fae7 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c4:	230a      	movs	r3, #10
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4820      	ldr	r0, [pc, #128]	; (8000a50 <MX_GPIO_Init+0x288>)
 80009d0:	f000 fad6 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d4:	2320      	movs	r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4819      	ldr	r0, [pc, #100]	; (8000a4c <MX_GPIO_Init+0x284>)
 80009e8:	f000 faca 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ec:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fe:	2304      	movs	r3, #4
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_GPIO_Init+0x28c>)
 8000a0a:	f000 fab9 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_GPIO_Init+0x27c>)
 8000a24:	f000 faac 	bl	8000f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2106      	movs	r1, #6
 8000a2c:	2006      	movs	r0, #6
 8000a2e:	f000 fa7d 	bl	8000f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a32:	2006      	movs	r0, #6
 8000a34:	f000 fa96 	bl	8000f64 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3730      	adds	r7, #48	; 0x30
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	/* switch Red LED state */
	Red_toggle;
 8000a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000a68:	f000 fc3f 	bl	80012ea <HAL_GPIO_TogglePin>
	/* semaphore give */
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken);
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f107 020c 	add.w	r2, r7, #12
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f94a 	bl	8002d14 <xQueueGiveFromISR>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <HAL_GPIO_EXTI_Callback+0x3e>
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	f3bf 8f4f 	dsb	sy
 8000a92:	f3bf 8f6f 	isb	sy
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	20012d90 	.word	0x20012d90
 8000aa8:	e000ed04 	.word	0xe000ed04

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 f95d 	bl	8000d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40001400 	.word	0x40001400

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_SPI_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_SPI_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b86:	23e0      	movs	r3, #224	; 0xe0
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b96:	2305      	movs	r3, #5
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_SPI_MspInit+0x8c>)
 8000ba2:	f000 f9ed 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2037      	movs	r0, #55	; 0x37
 8000bd2:	f000 f9ab 	bl	8000f2c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bd6:	2037      	movs	r0, #55	; 0x37
 8000bd8:	f000 f9c4 	bl	8000f64 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <HAL_InitTick+0xa4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_InitTick+0xa4>)
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_InitTick+0xa4>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f804 	bl	8001c10 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c08:	f000 ffee 	bl	8001be8 <HAL_RCC_GetPCLK1Freq>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_InitTick+0xa8>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	0c9b      	lsrs	r3, r3, #18
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_InitTick+0xac>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <HAL_InitTick+0xb0>)
 8000c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_InitTick+0xac>)
 8000c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_InitTick+0xac>)
 8000c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c32:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_InitTick+0xac>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_InitTick+0xac>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <HAL_InitTick+0xac>)
 8000c42:	f001 faa7 	bl	8002194 <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d104      	bne.n	8000c56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <HAL_InitTick+0xac>)
 8000c4e:	f001 fafb 	bl	8002248 <HAL_TIM_Base_Start_IT>
 8000c52:	4603      	mov	r3, r0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	431bde83 	.word	0x431bde83
 8000c68:	20012df0 	.word	0x20012df0
 8000c6c:	40001400 	.word	0x40001400

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
//
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
//
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 fb3d 	bl	8001320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM7_IRQHandler+0x10>)
 8000cb2:	f001 fb39 	bl	8002328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20012df0 	.word	0x20012df0

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d0e:	f7ff ffd7 	bl	8000cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f004 faeb 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fc7b 	bl	8000610 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d28:	080053d0 	.word	0x080053d0
  ldr r2, =_sbss
 8000d2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d30:	20012e7c 	.word	0x20012e7c

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f8d8 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ff28 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff feb6 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20012e38 	.word	0x20012e38

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20012e38 	.word	0x20012e38

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff4c 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3e:	f7ff ff61 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff ffb1 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff80 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff54 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e16b      	b.n	8001274 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 815a 	bne.w	800126e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80b4 	beq.w	800126e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b60      	ldr	r3, [pc, #384]	; (800128c <HAL_GPIO_Init+0x30c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a5f      	ldr	r2, [pc, #380]	; (800128c <HAL_GPIO_Init+0x30c>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b5d      	ldr	r3, [pc, #372]	; (800128c <HAL_GPIO_Init+0x30c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a5b      	ldr	r2, [pc, #364]	; (8001290 <HAL_GPIO_Init+0x310>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_GPIO_Init+0x314>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d02b      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a51      	ldr	r2, [pc, #324]	; (8001298 <HAL_GPIO_Init+0x318>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x222>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a50      	ldr	r2, [pc, #320]	; (800129c <HAL_GPIO_Init+0x31c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x21e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x320>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x21a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <HAL_GPIO_Init+0x324>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x216>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4d      	ldr	r2, [pc, #308]	; (80012a8 <HAL_GPIO_Init+0x328>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x212>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x32c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x20e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_GPIO_Init+0x330>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x20a>
 8001186:	2307      	movs	r3, #7
 8001188:	e00e      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800118a:	2308      	movs	r3, #8
 800118c:	e00c      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800118e:	2306      	movs	r3, #6
 8001190:	e00a      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 8001192:	2305      	movs	r3, #5
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 8001196:	2304      	movs	r3, #4
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x228>
 80011a6:	2300      	movs	r3, #0
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	f002 0203 	and.w	r2, r2, #3
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <HAL_GPIO_Init+0x310>)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <HAL_GPIO_Init+0x334>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ea:	4a32      	ldr	r2, [pc, #200]	; (80012b4 <HAL_GPIO_Init+0x334>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_GPIO_Init+0x334>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001214:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <HAL_GPIO_Init+0x334>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_GPIO_Init+0x334>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123e:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_GPIO_Init+0x334>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_GPIO_Init+0x334>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <HAL_GPIO_Init+0x334>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f67f ae90 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40021c00 	.word	0x40021c00
 80012b4:	40013c00 	.word	0x40013c00

080012b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
 80012c4:	4613      	mov	r3, r2
 80012c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	041a      	lsls	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fc:	887a      	ldrh	r2, [r7, #2]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	041a      	lsls	r2, r3, #16
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43d9      	mvns	r1, r3
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	400b      	ands	r3, r1
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb8a 	bl	8000a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e264      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d075      	beq.n	800145a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	4ba3      	ldr	r3, [pc, #652]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b04      	cmp	r3, #4
 8001378:	d00c      	beq.n	8001394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137a:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001382:	2b08      	cmp	r3, #8
 8001384:	d112      	bne.n	80013ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001386:	4b9d      	ldr	r3, [pc, #628]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001392:	d10b      	bne.n	80013ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	4b99      	ldr	r3, [pc, #612]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d05b      	beq.n	8001458 <HAL_RCC_OscConfig+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d157      	bne.n	8001458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e23f      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x74>
 80013b6:	4b91      	ldr	r3, [pc, #580]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a90      	ldr	r2, [pc, #576]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e01d      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b8b      	ldr	r3, [pc, #556]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a8a      	ldr	r2, [pc, #552]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0xb0>
 80013e8:	4b84      	ldr	r3, [pc, #528]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a83      	ldr	r2, [pc, #524]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a80      	ldr	r2, [pc, #512]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fccc 	bl	8000da4 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fcc8 	bl	8000da4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e204      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b76      	ldr	r3, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0xc0>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fcb8 	bl	8000da4 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fcb4 	bl	8000da4 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1f0      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0xe8>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d063      	beq.n	800152e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00b      	beq.n	800148a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147a:	2b08      	cmp	r3, #8
 800147c:	d11c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d116      	bne.n	80014b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <HAL_RCC_OscConfig+0x152>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e1c4      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	4b56      	ldr	r3, [pc, #344]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4952      	ldr	r1, [pc, #328]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	e03a      	b.n	800152e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c0:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <HAL_RCC_OscConfig+0x2b0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fc6d 	bl	8000da4 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc69 	bl	8000da4 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1a5      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4940      	ldr	r1, [pc, #256]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b3f      	ldr	r3, [pc, #252]	; (8001600 <HAL_RCC_OscConfig+0x2b0>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fc4c 	bl	8000da4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fc48 	bl	8000da4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e184      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d030      	beq.n	800159c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d016      	beq.n	8001570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_RCC_OscConfig+0x2b4>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fc2c 	bl	8000da4 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fc28 	bl	8000da4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e164      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x200>
 800156e:	e015      	b.n	800159c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_RCC_OscConfig+0x2b4>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fc15 	bl	8000da4 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fc11 	bl	8000da4 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e14d      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 8001592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a0 	beq.w	80016ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10f      	bne.n	80015da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d6:	2301      	movs	r3, #1
 80015d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_OscConfig+0x2b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d121      	bne.n	800162a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_RCC_OscConfig+0x2b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_RCC_OscConfig+0x2b8>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fbd7 	bl	8000da4 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	e011      	b.n	800161e <HAL_RCC_OscConfig+0x2ce>
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	42470000 	.word	0x42470000
 8001604:	42470e80 	.word	0x42470e80
 8001608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160c:	f7ff fbca 	bl	8000da4 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e106      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <HAL_RCC_OscConfig+0x4e4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x2f0>
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a80      	ldr	r2, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	e01c      	b.n	800167a <HAL_RCC_OscConfig+0x32a>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x312>
 8001648:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a7a      	ldr	r2, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	4b78      	ldr	r3, [pc, #480]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a77      	ldr	r2, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x32a>
 8001662:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a74      	ldr	r2, [pc, #464]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	4b72      	ldr	r3, [pc, #456]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d015      	beq.n	80016ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff fb8f 	bl	8000da4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fb8b 	bl	8000da4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0c5      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ee      	beq.n	800168a <HAL_RCC_OscConfig+0x33a>
 80016ac:	e014      	b.n	80016d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb79 	bl	8000da4 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fb75 	bl	8000da4 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0af      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ee      	bne.n	80016b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d105      	bne.n	80016ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4b56      	ldr	r3, [pc, #344]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a55      	ldr	r2, [pc, #340]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 809b 	beq.w	800182a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d05c      	beq.n	80017ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d141      	bne.n	800178c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x4ec>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fb49 	bl	8000da4 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fb45 	bl	8000da4 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e081      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69da      	ldr	r2, [r3, #28]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	019b      	lsls	r3, r3, #6
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	061b      	lsls	r3, r3, #24
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_OscConfig+0x4ec>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fb1e 	bl	8000da4 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fb1a 	bl	8000da4 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e056      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x41c>
 800178a:	e04e      	b.n	800182a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_OscConfig+0x4ec>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff fb07 	bl	8000da4 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff fb03 	bl	8000da4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e03f      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x44a>
 80017b8:	e037      	b.n	800182a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e032      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d028      	beq.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d121      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d11a      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017fe:	4293      	cmp	r3, r2
 8001800:	d111      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40007000 	.word	0x40007000
 8001838:	40023800 	.word	0x40023800
 800183c:	42470060 	.word	0x42470060

08001840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0cc      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d90c      	bls.n	800187c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a58      	ldr	r2, [pc, #352]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800189e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d044      	beq.n	8001960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d119      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e067      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4934      	ldr	r1, [pc, #208]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff fa38 	bl	8000da4 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff fa34 	bl	8000da4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e04f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d20c      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490a      	ldr	r1, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f8e8 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00
 80019fc:	40023800 	.word	0x40023800
 8001a00:	080053a8 	.word	0x080053a8
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a24:	4b67      	ldr	r3, [pc, #412]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d00d      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x40>
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	f200 80bd 	bhi.w	8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a3e:	e0b7      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a42:	60bb      	str	r3, [r7, #8]
       break;
 8001a44:	e0b7      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a48:	60bb      	str	r3, [r7, #8]
      break;
 8001a4a:	e0b4      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a4c:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a56:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d04d      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	ea02 0800 	and.w	r8, r2, r0
 8001a7a:	ea03 0901 	and.w	r9, r3, r1
 8001a7e:	4640      	mov	r0, r8
 8001a80:	4649      	mov	r1, r9
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	014b      	lsls	r3, r1, #5
 8001a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a90:	0142      	lsls	r2, r0, #5
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	ebb0 0008 	subs.w	r0, r0, r8
 8001a9a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	018b      	lsls	r3, r1, #6
 8001aa8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aac:	0182      	lsls	r2, r0, #6
 8001aae:	1a12      	subs	r2, r2, r0
 8001ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	00d9      	lsls	r1, r3, #3
 8001abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac2:	00d0      	lsls	r0, r2, #3
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	eb12 0208 	adds.w	r2, r2, r8
 8001acc:	eb43 0309 	adc.w	r3, r3, r9
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	0259      	lsls	r1, r3, #9
 8001ada:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ade:	0250      	lsls	r0, r2, #9
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	f7fe fb6e 	bl	80001d0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e04a      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	461a      	mov	r2, r3
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	ea02 0400 	and.w	r4, r2, r0
 8001b16:	ea03 0501 	and.w	r5, r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	014b      	lsls	r3, r1, #5
 8001b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b2c:	0142      	lsls	r2, r0, #5
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	1b00      	subs	r0, r0, r4
 8001b34:	eb61 0105 	sbc.w	r1, r1, r5
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	018b      	lsls	r3, r1, #6
 8001b42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b46:	0182      	lsls	r2, r0, #6
 8001b48:	1a12      	subs	r2, r2, r0
 8001b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	00d9      	lsls	r1, r3, #3
 8001b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b5c:	00d0      	lsls	r0, r2, #3
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	1912      	adds	r2, r2, r4
 8001b64:	eb45 0303 	adc.w	r3, r5, r3
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	0299      	lsls	r1, r3, #10
 8001b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b76:	0290      	lsls	r0, r2, #10
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f7fe fb22 	bl	80001d0 <__aeabi_uldivmod>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4613      	mov	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	60bb      	str	r3, [r7, #8]
      break;
 8001bae:	e002      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bb2:	60bb      	str	r3, [r7, #8]
      break;
 8001bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	00f42400 	.word	0x00f42400
 8001bcc:	007a1200 	.word	0x007a1200

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000000 	.word	0x20000000

08001be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bec:	f7ff fff0 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0a9b      	lsrs	r3, r3, #10
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	080053b8 	.word	0x080053b8

08001c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_RCC_GetClockConfig+0x60>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0207 	and.w	r2, r3, #7
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e07b      	b.n	8001d7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d108      	bne.n	8001ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c96:	d009      	beq.n	8001cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
 8001c9e:	e005      	b.n	8001cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe ff30 	bl	8000b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d30:	ea42 0103 	orr.w	r1, r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0104 	and.w	r1, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f003 0210 	and.w	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b088      	sub	sp, #32
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_SPI_Transmit+0x22>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e126      	b.n	8001ff6 <HAL_SPI_Transmit+0x270>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001db0:	f7fe fff8 	bl	8000da4 <HAL_GetTick>
 8001db4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d002      	beq.n	8001dcc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dca:	e10b      	b.n	8001fe4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_SPI_Transmit+0x52>
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ddc:	e102      	b.n	8001fe4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e24:	d10f      	bne.n	8001e46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d007      	beq.n	8001e64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e6c:	d14b      	bne.n	8001f06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_SPI_Transmit+0xf6>
 8001e76:	8afb      	ldrh	r3, [r7, #22]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d13e      	bne.n	8001efa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	1c9a      	adds	r2, r3, #2
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ea0:	e02b      	b.n	8001efa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d112      	bne.n	8001ed6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	1c9a      	adds	r2, r3, #2
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ed4:	e011      	b.n	8001efa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed6:	f7fe ff65 	bl	8000da4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d803      	bhi.n	8001eee <HAL_SPI_Transmit+0x168>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d102      	bne.n	8001ef4 <HAL_SPI_Transmit+0x16e>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ef8:	e074      	b.n	8001fe4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ce      	bne.n	8001ea2 <HAL_SPI_Transmit+0x11c>
 8001f04:	e04c      	b.n	8001fa0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <HAL_SPI_Transmit+0x18e>
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d140      	bne.n	8001f96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	330c      	adds	r3, #12
 8001f1e:	7812      	ldrb	r2, [r2, #0]
 8001f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f3a:	e02c      	b.n	8001f96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d113      	bne.n	8001f72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f70:	e011      	b.n	8001f96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f72:	f7fe ff17 	bl	8000da4 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d803      	bhi.n	8001f8a <HAL_SPI_Transmit+0x204>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d102      	bne.n	8001f90 <HAL_SPI_Transmit+0x20a>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f94:	e026      	b.n	8001fe4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1cd      	bne.n	8001f3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f8b3 	bl	8002110 <SPI_EndRxTxTransaction>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	77fb      	strb	r3, [r7, #31]
 8001fe0:	e000      	b.n	8001fe4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001fe2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002010:	f7fe fec8 	bl	8000da4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4413      	add	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002020:	f7fe fec0 	bl	8000da4 <HAL_GetTick>
 8002024:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002026:	4b39      	ldr	r3, [pc, #228]	; (800210c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	0d1b      	lsrs	r3, r3, #20
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002036:	e054      	b.n	80020e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d050      	beq.n	80020e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002040:	f7fe feb0 	bl	8000da4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	429a      	cmp	r2, r3
 800204e:	d902      	bls.n	8002056 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d13d      	bne.n	80020d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800206e:	d111      	bne.n	8002094 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002078:	d004      	beq.n	8002084 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002082:	d107      	bne.n	8002094 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209c:	d10f      	bne.n	80020be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e017      	b.n	8002102 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3b01      	subs	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4013      	ands	r3, r2
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	bf0c      	ite	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	2300      	movne	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d19b      	bne.n	8002038 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000000 	.word	0x20000000

08002110 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <SPI_EndRxTxTransaction+0x7c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <SPI_EndRxTxTransaction+0x80>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0d5b      	lsrs	r3, r3, #21
 8002128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800213a:	d112      	bne.n	8002162 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff ff5a 	bl	8002000 <SPI_WaitFlagStateUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f043 0220 	orr.w	r2, r3, #32
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e00f      	b.n	8002182 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3b01      	subs	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d0f2      	beq.n	8002162 <SPI_EndRxTxTransaction+0x52>
 800217c:	e000      	b.n	8002180 <SPI_EndRxTxTransaction+0x70>
        break;
 800217e:	bf00      	nop
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000
 8002190:	165e9f81 	.word	0x165e9f81

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e041      	b.n	800222a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f839 	bl	8002232 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 f9d8 	bl	8002588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e04e      	b.n	80022fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a23      	ldr	r2, [pc, #140]	; (800230c <HAL_TIM_Base_Start_IT+0xc4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d022      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0x80>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d01d      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0x80>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_TIM_Base_Start_IT+0xc8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d018      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0x80>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_TIM_Base_Start_IT+0xcc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d013      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0x80>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_TIM_Base_Start_IT+0xd0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00e      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0x80>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_TIM_Base_Start_IT+0xd4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d009      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0x80>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_TIM_Base_Start_IT+0xd8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d004      	beq.n	80022c8 <HAL_TIM_Base_Start_IT+0x80>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a18      	ldr	r2, [pc, #96]	; (8002324 <HAL_TIM_Base_Start_IT+0xdc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d111      	bne.n	80022ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d010      	beq.n	80022fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ea:	e007      	b.n	80022fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40010400 	.word	0x40010400
 8002320:	40014000 	.word	0x40014000
 8002324:	40001800 	.word	0x40001800

08002328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d122      	bne.n	8002384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d11b      	bne.n	8002384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0202 	mvn.w	r2, #2
 8002354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8ee 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 8002370:	e005      	b.n	800237e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8e0 	bl	8002538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f8f1 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d122      	bne.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11b      	bne.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0204 	mvn.w	r2, #4
 80023a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8c4 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8b6 	bl	8002538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8c7 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d122      	bne.n	800242c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d11b      	bne.n	800242c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0208 	mvn.w	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2204      	movs	r2, #4
 8002402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f89a 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f88c 	bl	8002538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f89d 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b10      	cmp	r3, #16
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b10      	cmp	r3, #16
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0210 	mvn.w	r2, #16
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2208      	movs	r2, #8
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f870 	bl	800254c <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f862 	bl	8002538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f873 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0201 	mvn.w	r2, #1
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fb00 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b80      	cmp	r3, #128	; 0x80
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b80      	cmp	r3, #128	; 0x80
 80024c6:	d107      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f902 	bl	80026dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d107      	bne.n	8002504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f838 	bl	8002574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b20      	cmp	r3, #32
 8002510:	d10e      	bne.n	8002530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b20      	cmp	r3, #32
 800251e:	d107      	bne.n	8002530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0220 	mvn.w	r2, #32
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8cc 	bl	80026c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a40      	ldr	r2, [pc, #256]	; (800269c <TIM_Base_SetConfig+0x114>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <TIM_Base_SetConfig+0x40>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d00f      	beq.n	80025c8 <TIM_Base_SetConfig+0x40>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a3d      	ldr	r2, [pc, #244]	; (80026a0 <TIM_Base_SetConfig+0x118>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00b      	beq.n	80025c8 <TIM_Base_SetConfig+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3c      	ldr	r2, [pc, #240]	; (80026a4 <TIM_Base_SetConfig+0x11c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d007      	beq.n	80025c8 <TIM_Base_SetConfig+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <TIM_Base_SetConfig+0x120>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <TIM_Base_SetConfig+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <TIM_Base_SetConfig+0x124>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d108      	bne.n	80025da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2f      	ldr	r2, [pc, #188]	; (800269c <TIM_Base_SetConfig+0x114>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02b      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d027      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a2c      	ldr	r2, [pc, #176]	; (80026a0 <TIM_Base_SetConfig+0x118>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d023      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a2b      	ldr	r2, [pc, #172]	; (80026a4 <TIM_Base_SetConfig+0x11c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <TIM_Base_SetConfig+0x120>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01b      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a29      	ldr	r2, [pc, #164]	; (80026ac <TIM_Base_SetConfig+0x124>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d017      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <TIM_Base_SetConfig+0x128>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <TIM_Base_SetConfig+0x12c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00f      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <TIM_Base_SetConfig+0x130>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00b      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a25      	ldr	r2, [pc, #148]	; (80026bc <TIM_Base_SetConfig+0x134>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <TIM_Base_SetConfig+0x138>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_Base_SetConfig+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <TIM_Base_SetConfig+0x13c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <TIM_Base_SetConfig+0x114>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_Base_SetConfig+0xf8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <TIM_Base_SetConfig+0x124>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d103      	bne.n	8002688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	615a      	str	r2, [r3, #20]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40010000 	.word	0x40010000
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40000c00 	.word	0x40000c00
 80026ac:	40010400 	.word	0x40010400
 80026b0:	40014000 	.word	0x40014000
 80026b4:	40014400 	.word	0x40014400
 80026b8:	40014800 	.word	0x40014800
 80026bc:	40001800 	.word	0x40001800
 80026c0:	40001c00 	.word	0x40001c00
 80026c4:	40002000 	.word	0x40002000

080026c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f103 0208 	add.w	r2, r3, #8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f103 0208 	add.w	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f103 0208 	add.w	r2, r3, #8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d103      	bne.n	80027b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e00c      	b.n	80027cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3308      	adds	r3, #8
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e002      	b.n	80027c0 <vListInsert+0x2e>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d2f6      	bcs.n	80027ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	601a      	str	r2, [r3, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6892      	ldr	r2, [r2, #8]
 800281a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6852      	ldr	r2, [r2, #4]
 8002824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d103      	bne.n	8002838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	1e5a      	subs	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002882:	f002 fa37 	bl	8004cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	441a      	add	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	3b01      	subs	r3, #1
 80028b4:	68f9      	ldr	r1, [r7, #12]
 80028b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	441a      	add	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	22ff      	movs	r2, #255	; 0xff
 80028c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	22ff      	movs	r2, #255	; 0xff
 80028ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d114      	bne.n	8002902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01a      	beq.n	8002916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3310      	adds	r3, #16
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 f9f3 	bl	8003cd0 <xTaskRemoveFromEventList>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d012      	beq.n	8002916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <xQueueGenericReset+0xcc>)
 80028f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	e009      	b.n	8002916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3310      	adds	r3, #16
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fef2 	bl	80026f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3324      	adds	r3, #36	; 0x24
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff feed 	bl	80026f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002916:	f002 fa1d 	bl	8004d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xQueueGenericCreate+0x2a>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	613b      	str	r3, [r7, #16]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e004      	b.n	8002968 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	3350      	adds	r3, #80	; 0x50
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fae3 	bl	8004f38 <pvPortMalloc>
 8002972:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3350      	adds	r3, #80	; 0x50
 8002982:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002984:	79fa      	ldrb	r2, [r7, #7]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f805 	bl	80029a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002996:	69bb      	ldr	r3, [r7, #24]
	}
 8002998:	4618      	mov	r0, r3
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e002      	b.n	80029c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029ce:	2101      	movs	r1, #1
 80029d0:	69b8      	ldr	r0, [r7, #24]
 80029d2:	f7ff ff41 	bl	8002858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029f6:	2300      	movs	r3, #0
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericSend+0x32>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <xQueueGenericSend+0x40>
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <xQueueGenericSend+0x44>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <xQueueGenericSend+0x46>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <xQueueGenericSend+0x60>
	__asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d103      	bne.n	8002a56 <xQueueGenericSend+0x6e>
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <xQueueGenericSend+0x72>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueGenericSend+0x74>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	623b      	str	r3, [r7, #32]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a76:	f001 fac7 	bl	8004008 <xTaskGetSchedulerState>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <xQueueGenericSend+0x9e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <xQueueGenericSend+0xa2>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <xQueueGenericSend+0xa4>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	61fb      	str	r3, [r7, #28]
}
 8002aa2:	bf00      	nop
 8002aa4:	e7fe      	b.n	8002aa4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aa6:	f002 f925 	bl	8004cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <xQueueGenericSend+0xd4>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d129      	bne.n	8002b10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ac2:	f000 fbb9 	bl	8003238 <prvCopyDataToQueue>
 8002ac6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	3324      	adds	r3, #36	; 0x24
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 f8fb 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ae0:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <xQueueGenericSend+0x1f8>)
 8002ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	e00a      	b.n	8002b08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002af8:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <xQueueGenericSend+0x1f8>)
 8002afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b08:	f002 f924 	bl	8004d54 <vPortExitCritical>
				return pdPASS;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e063      	b.n	8002bd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b16:	f002 f91d 	bl	8004d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e05c      	b.n	8002bd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 f933 	bl	8003d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b32:	f002 f90f 	bl	8004d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b36:	f000 fead 	bl	8003894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b3a:	f002 f8db 	bl	8004cf4 <vPortEnterCritical>
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4a:	d103      	bne.n	8002b54 <xQueueGenericSend+0x16c>
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b5a:	b25b      	sxtb	r3, r3
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x182>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b6a:	f002 f8f3 	bl	8004d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b6e:	1d3a      	adds	r2, r7, #4
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 f922 	bl	8003dc0 <xTaskCheckForTimeOut>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d124      	bne.n	8002bcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b84:	f000 fc50 	bl	8003428 <prvIsQueueFull>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d018      	beq.n	8002bc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	3310      	adds	r3, #16
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f84a 	bl	8003c30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b9e:	f000 fbdb 	bl	8003358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ba2:	f000 fe85 	bl	80038b0 <xTaskResumeAll>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f af7c 	bne.w	8002aa6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <xQueueGenericSend+0x1f8>)
 8002bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	e772      	b.n	8002aa6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc2:	f000 fbc9 	bl	8003358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bc6:	f000 fe73 	bl	80038b0 <xTaskResumeAll>
 8002bca:	e76c      	b.n	8002aa6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bce:	f000 fbc3 	bl	8003358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bd2:	f000 fe6d 	bl	80038b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002bd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3738      	adds	r7, #56	; 0x38
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	; 0x38
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <xQueueGenericSendFromISR+0x3c>
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <xQueueGenericSendFromISR+0x40>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <xQueueGenericSendFromISR+0x42>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	623b      	str	r3, [r7, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d103      	bne.n	8002c4e <xQueueGenericSendFromISR+0x6a>
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <xQueueGenericSendFromISR+0x6e>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueGenericSendFromISR+0x70>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61fb      	str	r3, [r7, #28]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c6e:	f002 f923 	bl	8004eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c72:	f3ef 8211 	mrs	r2, BASEPRI
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	61ba      	str	r2, [r7, #24]
 8002c88:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <xQueueGenericSendFromISR+0xbc>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d12c      	bne.n	8002cfa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb0:	f000 fac2 	bl	8003238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d112      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	3324      	adds	r3, #36	; 0x24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f800 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e007      	b.n	8002cf4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ce4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	b25a      	sxtb	r2, r3
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002cf8:	e001      	b.n	8002cfe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3738      	adds	r7, #56	; 0x38
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	; 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	623b      	str	r3, [r7, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <xQueueGiveFromISR+0x48>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	61fb      	str	r3, [r7, #28]
}
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <xQueueGiveFromISR+0x58>
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <xQueueGiveFromISR+0x5c>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <xQueueGiveFromISR+0x5e>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <xQueueGiveFromISR+0x78>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	61bb      	str	r3, [r7, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d8c:	f002 f894 	bl	8004eb8 <vPortValidateInterruptPriority>
	__asm volatile
 8002d90:	f3ef 8211 	mrs	r2, BASEPRI
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	617a      	str	r2, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002da8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d22b      	bcs.n	8002e14 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d112      	bne.n	8002dfe <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d016      	beq.n	8002e0e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 ff73 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00e      	beq.n	8002e0e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e007      	b.n	8002e0e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	b25a      	sxtb	r2, r3
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
 8002e12:	e001      	b.n	8002e18 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f383 8811 	msr	BASEPRI, r3
}
 8002e22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3738      	adds	r7, #56	; 0x38
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <xQueueReceive+0x30>
	__asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	623b      	str	r3, [r7, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <xQueueReceive+0x3e>
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <xQueueReceive+0x42>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <xQueueReceive+0x44>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueReceive+0x5e>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	61fb      	str	r3, [r7, #28]
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e8e:	f001 f8bb 	bl	8004008 <xTaskGetSchedulerState>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <xQueueReceive+0x6e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <xQueueReceive+0x72>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueReceive+0x74>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xQueueReceive+0x8e>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61bb      	str	r3, [r7, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ebe:	f001 ff19 	bl	8004cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01f      	beq.n	8002f0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed2:	f000 fa1b 	bl	800330c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00f      	beq.n	8002f06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	3310      	adds	r3, #16
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fef0 	bl	8003cd0 <xTaskRemoveFromEventList>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <xQueueReceive+0x1bc>)
 8002ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f06:	f001 ff25 	bl	8004d54 <vPortExitCritical>
				return pdPASS;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e069      	b.n	8002fe2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f14:	f001 ff1e 	bl	8004d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e062      	b.n	8002fe2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 ff34 	bl	8003d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f30:	f001 ff10 	bl	8004d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f34:	f000 fcae 	bl	8003894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f38:	f001 fedc 	bl	8004cf4 <vPortEnterCritical>
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d103      	bne.n	8002f52 <xQueueReceive+0x122>
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d103      	bne.n	8002f68 <xQueueReceive+0x138>
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f68:	f001 fef4 	bl	8004d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f6c:	1d3a      	adds	r2, r7, #4
 8002f6e:	f107 0310 	add.w	r3, r7, #16
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 ff23 	bl	8003dc0 <xTaskCheckForTimeOut>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d123      	bne.n	8002fc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f82:	f000 fa3b 	bl	80033fc <prvIsQueueEmpty>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	3324      	adds	r3, #36	; 0x24
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fe4b 	bl	8003c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9c:	f000 f9dc 	bl	8003358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fa0:	f000 fc86 	bl	80038b0 <xTaskResumeAll>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d189      	bne.n	8002ebe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <xQueueReceive+0x1bc>)
 8002fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	e780      	b.n	8002ebe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fbe:	f000 f9cb 	bl	8003358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fc2:	f000 fc75 	bl	80038b0 <xTaskResumeAll>
 8002fc6:	e77a      	b.n	8002ebe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fca:	f000 f9c5 	bl	8003358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fce:	f000 fc6f 	bl	80038b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd4:	f000 fa12 	bl	80033fc <prvIsQueueEmpty>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f43f af6f 	beq.w	8002ebe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fe0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3730      	adds	r7, #48	; 0x30
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000ed04 	.word	0xe000ed04

08002ff0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08e      	sub	sp, #56	; 0x38
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003002:	2300      	movs	r3, #0
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	623b      	str	r3, [r7, #32]
}
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	61fb      	str	r3, [r7, #28]
}
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003040:	f000 ffe2 	bl	8004008 <xTaskGetSchedulerState>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <xQueueSemaphoreTake+0x60>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <xQueueSemaphoreTake+0x64>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <xQueueSemaphoreTake+0x66>
 8003054:	2300      	movs	r3, #0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	61bb      	str	r3, [r7, #24]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003070:	f001 fe40 	bl	8004cf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d024      	beq.n	80030ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	1e5a      	subs	r2, r3, #1
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003090:	f001 f978 	bl	8004384 <pvTaskIncrementMutexHeldCount>
 8003094:	4602      	mov	r2, r0
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00f      	beq.n	80030c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	3310      	adds	r3, #16
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fe12 	bl	8003cd0 <xTaskRemoveFromEventList>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030b2:	4b54      	ldr	r3, [pc, #336]	; (8003204 <xQueueSemaphoreTake+0x214>)
 80030b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030c2:	f001 fe47 	bl	8004d54 <vPortExitCritical>
				return pdPASS;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e097      	b.n	80031fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d111      	bne.n	80030f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	617b      	str	r3, [r7, #20]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80030ec:	f001 fe32 	bl	8004d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e082      	b.n	80031fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fe48 	bl	8003d94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003108:	f001 fe24 	bl	8004d54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310c:	f000 fbc2 	bl	8003894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003110:	f001 fdf0 	bl	8004cf4 <vPortEnterCritical>
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d103      	bne.n	800312a <xQueueSemaphoreTake+0x13a>
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003130:	b25b      	sxtb	r3, r3
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d103      	bne.n	8003140 <xQueueSemaphoreTake+0x150>
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003140:	f001 fe08 	bl	8004d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003144:	463a      	mov	r2, r7
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fe37 	bl	8003dc0 <xTaskCheckForTimeOut>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d132      	bne.n	80031be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800315a:	f000 f94f 	bl	80033fc <prvIsQueueEmpty>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d026      	beq.n	80031b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800316c:	f001 fdc2 	bl	8004cf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 ff65 	bl	8004044 <xTaskPriorityInherit>
 800317a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800317c:	f001 fdea 	bl	8004d54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	3324      	adds	r3, #36	; 0x24
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fd51 	bl	8003c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800318e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003190:	f000 f8e2 	bl	8003358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003194:	f000 fb8c 	bl	80038b0 <xTaskResumeAll>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	f47f af68 	bne.w	8003070 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <xQueueSemaphoreTake+0x214>)
 80031a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	e75e      	b.n	8003070 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80031b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031b4:	f000 f8d0 	bl	8003358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031b8:	f000 fb7a 	bl	80038b0 <xTaskResumeAll>
 80031bc:	e758      	b.n	8003070 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80031be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031c0:	f000 f8ca 	bl	8003358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031c4:	f000 fb74 	bl	80038b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031ca:	f000 f917 	bl	80033fc <prvIsQueueEmpty>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f43f af4d 	beq.w	8003070 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80031dc:	f001 fd8a 	bl	8004cf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031e2:	f000 f811 	bl	8003208 <prvGetDisinheritPriorityAfterTimeout>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 f82e 	bl	8004250 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80031f4:	f001 fdae 	bl	8004d54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3738      	adds	r7, #56	; 0x38
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1c3 0305 	rsb	r3, r3, #5
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e001      	b.n	800322a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800322a:	68fb      	ldr	r3, [r7, #12]
	}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10d      	bne.n	8003272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d14d      	bne.n	80032fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 ff6e 	bl	8004144 <xTaskPriorityDisinherit>
 8003268:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	e043      	b.n	80032fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d119      	bne.n	80032ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6858      	ldr	r0, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	461a      	mov	r2, r3
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	f002 f856 	bl	8005334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	441a      	add	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d32b      	bcc.n	80032fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	e026      	b.n	80032fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68d8      	ldr	r0, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	461a      	mov	r2, r3
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	f002 f83c 	bl	8005334 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	425b      	negs	r3, r3
 80032c6:	441a      	add	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d207      	bcs.n	80032e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	425b      	negs	r3, r3
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d105      	bne.n	80032fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003302:	697b      	ldr	r3, [r7, #20]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	441a      	add	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d303      	bcc.n	8003340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68d9      	ldr	r1, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	461a      	mov	r2, r3
 800334a:	6838      	ldr	r0, [r7, #0]
 800334c:	f001 fff2 	bl	8005334 <memcpy>
	}
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003360:	f001 fcc8 	bl	8004cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800336a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800336c:	e011      	b.n	8003392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3324      	adds	r3, #36	; 0x24
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fca8 	bl	8003cd0 <xTaskRemoveFromEventList>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003386:	f000 fd7d 	bl	8003e84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	3b01      	subs	r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	dce9      	bgt.n	800336e <prvUnlockQueue+0x16>
 800339a:	e000      	b.n	800339e <prvUnlockQueue+0x46>
					break;
 800339c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	22ff      	movs	r2, #255	; 0xff
 80033a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033a6:	f001 fcd5 	bl	8004d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033aa:	f001 fca3 	bl	8004cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033b6:	e011      	b.n	80033dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d012      	beq.n	80033e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3310      	adds	r3, #16
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fc83 	bl	8003cd0 <xTaskRemoveFromEventList>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033d0:	f000 fd58 	bl	8003e84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	dce9      	bgt.n	80033b8 <prvUnlockQueue+0x60>
 80033e4:	e000      	b.n	80033e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	22ff      	movs	r2, #255	; 0xff
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033f0:	f001 fcb0 	bl	8004d54 <vPortExitCritical>
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003404:	f001 fc76 	bl	8004cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e001      	b.n	800341a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341a:	f001 fc9b 	bl	8004d54 <vPortExitCritical>

	return xReturn;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003430:	f001 fc60 	bl	8004cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	429a      	cmp	r2, r3
 800343e:	d102      	bne.n	8003446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003440:	2301      	movs	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e001      	b.n	800344a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800344a:	f001 fc83 	bl	8004d54 <vPortExitCritical>

	return xReturn;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	e014      	b.n	8003492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003468:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <vQueueAddToRegistry+0x50>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003474:	490c      	ldr	r1, [pc, #48]	; (80034a8 <vQueueAddToRegistry+0x50>)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <vQueueAddToRegistry+0x50>)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800348a:	e006      	b.n	800349a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b07      	cmp	r3, #7
 8003496:	d9e7      	bls.n	8003468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20012e3c 	.word	0x20012e3c

080034ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034bc:	f001 fc1a 	bl	8004cf4 <vPortEnterCritical>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c6:	b25b      	sxtb	r3, r3
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d103      	bne.n	80034d6 <vQueueWaitForMessageRestricted+0x2a>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d103      	bne.n	80034ec <vQueueWaitForMessageRestricted+0x40>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ec:	f001 fc32 	bl	8004d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	3324      	adds	r3, #36	; 0x24
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fbb9 	bl	8003c78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f7ff ff26 	bl	8003358 <prvUnlockQueue>
	}
 800350c:	bf00      	nop
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af04      	add	r7, sp, #16
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f001 fd05 	bl	8004f38 <pvPortMalloc>
 800352e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003536:	2058      	movs	r0, #88	; 0x58
 8003538:	f001 fcfe 	bl	8004f38 <pvPortMalloc>
 800353c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
 800354a:	e005      	b.n	8003558 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800354c:	6978      	ldr	r0, [r7, #20]
 800354e:	f001 fdb7 	bl	80050c0 <vPortFree>
 8003552:	e001      	b.n	8003558 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d013      	beq.n	8003586 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	2300      	movs	r3, #0
 8003562:	9303      	str	r3, [sp, #12]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	9302      	str	r3, [sp, #8]
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f80e 	bl	8003596 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800357a:	69f8      	ldr	r0, [r7, #28]
 800357c:	f000 f89a 	bl	80036b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003580:	2301      	movs	r3, #1
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e002      	b.n	800358c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800358c:	69bb      	ldr	r3, [r7, #24]
	}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b088      	sub	sp, #32
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	461a      	mov	r2, r3
 80035ae:	21a5      	movs	r1, #165	; 0xa5
 80035b0:	f001 fece 	bl	8005350 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035be:	3b01      	subs	r3, #1
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f023 0307 	bic.w	r3, r3, #7
 80035cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <prvInitialiseNewTask+0x58>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	617b      	str	r3, [r7, #20]
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01f      	beq.n	8003634 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	e012      	b.n	8003620 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	4413      	add	r3, r2
 8003600:	7819      	ldrb	r1, [r3, #0]
 8003602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	3334      	adds	r3, #52	; 0x34
 800360a:	460a      	mov	r2, r1
 800360c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b09      	cmp	r3, #9
 8003624:	d9e9      	bls.n	80035fa <prvInitialiseNewTask+0x64>
 8003626:	e000      	b.n	800362a <prvInitialiseNewTask+0x94>
			{
				break;
 8003628:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003632:	e003      	b.n	800363c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	2b04      	cmp	r3, #4
 8003640:	d901      	bls.n	8003646 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003642:	2304      	movs	r3, #4
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003650:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2200      	movs	r2, #0
 8003656:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	3304      	adds	r3, #4
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff f867 	bl	8002730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	3318      	adds	r3, #24
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f862 	bl	8002730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003670:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	f1c3 0205 	rsb	r2, r3, #5
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	2200      	movs	r2, #0
 8003686:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	69b8      	ldr	r0, [r7, #24]
 8003696:	f001 fa01 	bl	8004a9c <pxPortInitialiseStack>
 800369a:	4602      	mov	r2, r0
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ac:	bf00      	nop
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036bc:	f001 fb1a 	bl	8004cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036c0:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <prvAddNewTaskToReadyList+0xc0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <prvAddNewTaskToReadyList+0xc0>)
 80036c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <prvAddNewTaskToReadyList+0xc4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036d2:	4a29      	ldr	r2, [pc, #164]	; (8003778 <prvAddNewTaskToReadyList+0xc4>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036d8:	4b26      	ldr	r3, [pc, #152]	; (8003774 <prvAddNewTaskToReadyList+0xc0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d110      	bne.n	8003702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036e0:	f000 fbf4 	bl	8003ecc <prvInitialiseTaskLists>
 80036e4:	e00d      	b.n	8003702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036e6:	4b25      	ldr	r3, [pc, #148]	; (800377c <prvAddNewTaskToReadyList+0xc8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <prvAddNewTaskToReadyList+0xc4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d802      	bhi.n	8003702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036fc:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <prvAddNewTaskToReadyList+0xc4>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <prvAddNewTaskToReadyList+0xcc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <prvAddNewTaskToReadyList+0xcc>)
 800370a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800370c:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <prvAddNewTaskToReadyList+0xcc>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	2201      	movs	r2, #1
 800371a:	409a      	lsls	r2, r3
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <prvAddNewTaskToReadyList+0xd0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	4a18      	ldr	r2, [pc, #96]	; (8003784 <prvAddNewTaskToReadyList+0xd0>)
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <prvAddNewTaskToReadyList+0xd4>)
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f7ff f804 	bl	800274a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003742:	f001 fb07 	bl	8004d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <prvAddNewTaskToReadyList+0xc8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <prvAddNewTaskToReadyList+0xc4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d207      	bcs.n	800376c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <prvAddNewTaskToReadyList+0xd8>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000104 	.word	0x20000104
 8003778:	2000002c 	.word	0x2000002c
 800377c:	20000110 	.word	0x20000110
 8003780:	20000120 	.word	0x20000120
 8003784:	2000010c 	.word	0x2000010c
 8003788:	20000030 	.word	0x20000030
 800378c:	e000ed04 	.word	0xe000ed04

08003790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d017      	beq.n	80037d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037a2:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <vTaskDelay+0x60>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <vTaskDelay+0x30>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	60bb      	str	r3, [r7, #8]
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037c0:	f000 f868 	bl	8003894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037c4:	2100      	movs	r1, #0
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fdf0 	bl	80043ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037cc:	f000 f870 	bl	80038b0 <xTaskResumeAll>
 80037d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <vTaskDelay+0x64>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	2000012c 	.word	0x2000012c
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80037fe:	4b1f      	ldr	r3, [pc, #124]	; (800387c <vTaskStartScheduler+0x84>)
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2300      	movs	r3, #0
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	2282      	movs	r2, #130	; 0x82
 800380a:	491d      	ldr	r1, [pc, #116]	; (8003880 <vTaskStartScheduler+0x88>)
 800380c:	481d      	ldr	r0, [pc, #116]	; (8003884 <vTaskStartScheduler+0x8c>)
 800380e:	f7ff fe81 	bl	8003514 <xTaskCreate>
 8003812:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800381a:	f000 fe2d 	bl	8004478 <xTimerCreateTimerTask>
 800381e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d116      	bne.n	8003854 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60bb      	str	r3, [r7, #8]
}
 8003838:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <vTaskStartScheduler+0x90>)
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <vTaskStartScheduler+0x94>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <vTaskStartScheduler+0x98>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800384e:	f001 f9af 	bl	8004bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003852:	e00e      	b.n	8003872 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d10a      	bne.n	8003872 <vTaskStartScheduler+0x7a>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	607b      	str	r3, [r7, #4]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <vTaskStartScheduler+0x78>
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000128 	.word	0x20000128
 8003880:	08005390 	.word	0x08005390
 8003884:	08003e9d 	.word	0x08003e9d
 8003888:	20000124 	.word	0x20000124
 800388c:	20000110 	.word	0x20000110
 8003890:	20000108 	.word	0x20000108

08003894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <vTaskSuspendAll+0x18>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a03      	ldr	r2, [pc, #12]	; (80038ac <vTaskSuspendAll+0x18>)
 80038a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	2000012c 	.word	0x2000012c

080038b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <xTaskResumeAll+0x114>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <xTaskResumeAll+0x2c>
	__asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	603b      	str	r3, [r7, #0]
}
 80038d8:	bf00      	nop
 80038da:	e7fe      	b.n	80038da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038dc:	f001 fa0a 	bl	8004cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038e0:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <xTaskResumeAll+0x114>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	4a37      	ldr	r2, [pc, #220]	; (80039c4 <xTaskResumeAll+0x114>)
 80038e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ea:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <xTaskResumeAll+0x114>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d161      	bne.n	80039b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038f2:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <xTaskResumeAll+0x118>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d05d      	beq.n	80039b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038fa:	e02e      	b.n	800395a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fc:	4b33      	ldr	r3, [pc, #204]	; (80039cc <xTaskResumeAll+0x11c>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3318      	adds	r3, #24
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe ff7b 	bl	8002804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe ff76 	bl	8002804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <xTaskResumeAll+0x120>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <xTaskResumeAll+0x120>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <xTaskResumeAll+0x124>)
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fe ff02 	bl	800274a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <xTaskResumeAll+0x128>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <xTaskResumeAll+0x12c>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <xTaskResumeAll+0x11c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1cc      	bne.n	80038fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003968:	f000 fb2e 	bl	8003fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800396c:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <xTaskResumeAll+0x130>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003978:	f000 f846 	bl	8003a08 <xTaskIncrementTick>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <xTaskResumeAll+0x12c>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f1      	bne.n	8003978 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <xTaskResumeAll+0x130>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <xTaskResumeAll+0x12c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <xTaskResumeAll+0x134>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039b6:	f001 f9cd 	bl	8004d54 <vPortExitCritical>

	return xAlreadyYielded;
 80039ba:	68bb      	ldr	r3, [r7, #8]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	2000012c 	.word	0x2000012c
 80039c8:	20000104 	.word	0x20000104
 80039cc:	200000c4 	.word	0x200000c4
 80039d0:	2000010c 	.word	0x2000010c
 80039d4:	20000030 	.word	0x20000030
 80039d8:	2000002c 	.word	0x2000002c
 80039dc:	20000118 	.word	0x20000118
 80039e0:	20000114 	.word	0x20000114
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <xTaskGetTickCount+0x1c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039f4:	687b      	ldr	r3, [r7, #4]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000108 	.word	0x20000108

08003a08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a12:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <xTaskIncrementTick+0x144>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 8088 	bne.w	8003b2c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a1c:	4b4c      	ldr	r3, [pc, #304]	; (8003b50 <xTaskIncrementTick+0x148>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a24:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <xTaskIncrementTick+0x148>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d120      	bne.n	8003a72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a30:	4b48      	ldr	r3, [pc, #288]	; (8003b54 <xTaskIncrementTick+0x14c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	603b      	str	r3, [r7, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <xTaskIncrementTick+0x46>
 8003a50:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <xTaskIncrementTick+0x14c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <xTaskIncrementTick+0x150>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a3e      	ldr	r2, [pc, #248]	; (8003b54 <xTaskIncrementTick+0x14c>)
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <xTaskIncrementTick+0x150>)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <xTaskIncrementTick+0x154>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a3c      	ldr	r2, [pc, #240]	; (8003b5c <xTaskIncrementTick+0x154>)
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	f000 faab 	bl	8003fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a72:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <xTaskIncrementTick+0x158>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d348      	bcc.n	8003b0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a7c:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <xTaskIncrementTick+0x14c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a86:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <xTaskIncrementTick+0x158>)
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	601a      	str	r2, [r3, #0]
					break;
 8003a8e:	e03e      	b.n	8003b0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <xTaskIncrementTick+0x14c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d203      	bcs.n	8003ab0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <xTaskIncrementTick+0x158>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aae:	e02e      	b.n	8003b0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fea5 	bl	8002804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fe9c 	bl	8002804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <xTaskIncrementTick+0x15c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <xTaskIncrementTick+0x15c>)
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <xTaskIncrementTick+0x160>)
 8003aec:	441a      	add	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7fe fe28 	bl	800274a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <xTaskIncrementTick+0x164>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3b9      	bcc.n	8003a7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b0c:	e7b6      	b.n	8003a7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b0e:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <xTaskIncrementTick+0x164>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4914      	ldr	r1, [pc, #80]	; (8003b68 <xTaskIncrementTick+0x160>)
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d907      	bls.n	8003b36 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003b26:	2301      	movs	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e004      	b.n	8003b36 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <xTaskIncrementTick+0x168>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <xTaskIncrementTick+0x168>)
 8003b34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <xTaskIncrementTick+0x16c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b42:	697b      	ldr	r3, [r7, #20]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	2000012c 	.word	0x2000012c
 8003b50:	20000108 	.word	0x20000108
 8003b54:	200000bc 	.word	0x200000bc
 8003b58:	200000c0 	.word	0x200000c0
 8003b5c:	2000011c 	.word	0x2000011c
 8003b60:	20000124 	.word	0x20000124
 8003b64:	2000010c 	.word	0x2000010c
 8003b68:	20000030 	.word	0x20000030
 8003b6c:	2000002c 	.word	0x2000002c
 8003b70:	20000114 	.word	0x20000114
 8003b74:	20000118 	.word	0x20000118

08003b78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <vTaskSwitchContext+0xa4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <vTaskSwitchContext+0xa8>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b8c:	e03f      	b.n	8003c0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b8e:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <vTaskSwitchContext+0xa8>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b94:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <vTaskSwitchContext+0xac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	fab3 f383 	clz	r3, r3
 8003ba0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
 8003ba4:	f1c3 031f 	rsb	r3, r3, #31
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	491f      	ldr	r1, [pc, #124]	; (8003c28 <vTaskSwitchContext+0xb0>)
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	607b      	str	r3, [r7, #4]
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <vTaskSwitchContext+0x5a>
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <vTaskSwitchContext+0xb0>)
 8003be0:	4413      	add	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d104      	bne.n	8003c04 <vTaskSwitchContext+0x8c>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <vTaskSwitchContext+0xb4>)
 8003c0c:	6013      	str	r3, [r2, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	2000012c 	.word	0x2000012c
 8003c20:	20000118 	.word	0x20000118
 8003c24:	2000010c 	.word	0x2000010c
 8003c28:	20000030 	.word	0x20000030
 8003c2c:	2000002c 	.word	0x2000002c

08003c30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	60fb      	str	r3, [r7, #12]
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <vTaskPlaceOnEventList+0x44>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe fd97 	bl	8002792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c64:	2101      	movs	r1, #1
 8003c66:	6838      	ldr	r0, [r7, #0]
 8003c68:	f000 fba0 	bl	80043ac <prvAddCurrentTaskToDelayedList>
}
 8003c6c:	bf00      	nop
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	2000002c 	.word	0x2000002c

08003c78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	617b      	str	r3, [r7, #20]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <vTaskPlaceOnEventListRestricted+0x54>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7fe fd4e 	bl	800274a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	68b8      	ldr	r0, [r7, #8]
 8003cbe:	f000 fb75 	bl	80043ac <prvAddCurrentTaskToDelayedList>
	}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000002c 	.word	0x2000002c

08003cd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60fb      	str	r3, [r7, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fd7f 	bl	8002804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <xTaskRemoveFromEventList+0xac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11c      	bne.n	8003d48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fd76 	bl	8002804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <xTaskRemoveFromEventList+0xb0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <xTaskRemoveFromEventList+0xb0>)
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <xTaskRemoveFromEventList+0xb4>)
 8003d38:	441a      	add	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fe fd02 	bl	800274a <vListInsertEnd>
 8003d46:	e005      	b.n	8003d54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	3318      	adds	r3, #24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	480e      	ldr	r0, [pc, #56]	; (8003d88 <xTaskRemoveFromEventList+0xb8>)
 8003d50:	f7fe fcfb 	bl	800274a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <xTaskRemoveFromEventList+0xbc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d905      	bls.n	8003d6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <xTaskRemoveFromEventList+0xc0>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e001      	b.n	8003d72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d72:	697b      	ldr	r3, [r7, #20]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	2000012c 	.word	0x2000012c
 8003d80:	2000010c 	.word	0x2000010c
 8003d84:	20000030 	.word	0x20000030
 8003d88:	200000c4 	.word	0x200000c4
 8003d8c:	2000002c 	.word	0x2000002c
 8003d90:	20000118 	.word	0x20000118

08003d94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <vTaskInternalSetTimeOutState+0x24>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <vTaskInternalSetTimeOutState+0x28>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	605a      	str	r2, [r3, #4]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	2000011c 	.word	0x2000011c
 8003dbc:	20000108 	.word	0x20000108

08003dc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	613b      	str	r3, [r7, #16]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	60fb      	str	r3, [r7, #12]
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e02:	f000 ff77 	bl	8004cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <xTaskCheckForTimeOut+0xbc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d102      	bne.n	8003e26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e023      	b.n	8003e6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <xTaskCheckForTimeOut+0xc0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d007      	beq.n	8003e42 <xTaskCheckForTimeOut+0x82>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d302      	bcc.n	8003e42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e015      	b.n	8003e6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d20b      	bcs.n	8003e64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ff9b 	bl	8003d94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e004      	b.n	8003e6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e6e:	f000 ff71 	bl	8004d54 <vPortExitCritical>

	return xReturn;
 8003e72:	69fb      	ldr	r3, [r7, #28]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000108 	.word	0x20000108
 8003e80:	2000011c 	.word	0x2000011c

08003e84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <vTaskMissedYield+0x14>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20000118 	.word	0x20000118

08003e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ea4:	f000 f852 	bl	8003f4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <prvIdleTask+0x28>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d9f9      	bls.n	8003ea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <prvIdleTask+0x2c>)
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ec0:	e7f0      	b.n	8003ea4 <prvIdleTask+0x8>
 8003ec2:	bf00      	nop
 8003ec4:	20000030 	.word	0x20000030
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	e00c      	b.n	8003ef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <prvInitialiseTaskLists+0x60>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fc02 	bl	80026f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d9ef      	bls.n	8003ed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ef8:	480d      	ldr	r0, [pc, #52]	; (8003f30 <prvInitialiseTaskLists+0x64>)
 8003efa:	f7fe fbf9 	bl	80026f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003efe:	480d      	ldr	r0, [pc, #52]	; (8003f34 <prvInitialiseTaskLists+0x68>)
 8003f00:	f7fe fbf6 	bl	80026f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f04:	480c      	ldr	r0, [pc, #48]	; (8003f38 <prvInitialiseTaskLists+0x6c>)
 8003f06:	f7fe fbf3 	bl	80026f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f0a:	480c      	ldr	r0, [pc, #48]	; (8003f3c <prvInitialiseTaskLists+0x70>)
 8003f0c:	f7fe fbf0 	bl	80026f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f10:	480b      	ldr	r0, [pc, #44]	; (8003f40 <prvInitialiseTaskLists+0x74>)
 8003f12:	f7fe fbed 	bl	80026f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <prvInitialiseTaskLists+0x78>)
 8003f18:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <prvInitialiseTaskLists+0x64>)
 8003f1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <prvInitialiseTaskLists+0x7c>)
 8003f1e:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <prvInitialiseTaskLists+0x68>)
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000030 	.word	0x20000030
 8003f30:	20000094 	.word	0x20000094
 8003f34:	200000a8 	.word	0x200000a8
 8003f38:	200000c4 	.word	0x200000c4
 8003f3c:	200000d8 	.word	0x200000d8
 8003f40:	200000f0 	.word	0x200000f0
 8003f44:	200000bc 	.word	0x200000bc
 8003f48:	200000c0 	.word	0x200000c0

08003f4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f52:	e019      	b.n	8003f88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f54:	f000 fece 	bl	8004cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <prvCheckTasksWaitingTermination+0x50>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fc4d 	bl	8002804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <prvCheckTasksWaitingTermination+0x54>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <prvCheckTasksWaitingTermination+0x54>)
 8003f72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <prvCheckTasksWaitingTermination+0x58>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <prvCheckTasksWaitingTermination+0x58>)
 8003f7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f7e:	f000 fee9 	bl	8004d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f810 	bl	8003fa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <prvCheckTasksWaitingTermination+0x58>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e1      	bne.n	8003f54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200000d8 	.word	0x200000d8
 8003fa0:	20000104 	.word	0x20000104
 8003fa4:	200000ec 	.word	0x200000ec

08003fa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f883 	bl	80050c0 <vPortFree>
			vPortFree( pxTCB );
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f001 f880 	bl	80050c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <prvResetNextTaskUnblockTime+0x38>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <prvResetNextTaskUnblockTime+0x3c>)
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295
 8003fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fe0:	e008      	b.n	8003ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <prvResetNextTaskUnblockTime+0x38>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <prvResetNextTaskUnblockTime+0x3c>)
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	200000bc 	.word	0x200000bc
 8004004:	20000124 	.word	0x20000124

08004008 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <xTaskGetSchedulerState+0x34>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004016:	2301      	movs	r3, #1
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	e008      	b.n	800402e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <xTaskGetSchedulerState+0x38>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d102      	bne.n	800402a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004024:	2302      	movs	r3, #2
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	e001      	b.n	800402e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800402e:	687b      	ldr	r3, [r7, #4]
	}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	20000110 	.word	0x20000110
 8004040:	2000012c 	.word	0x2000012c

08004044 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d069      	beq.n	800412e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	4b36      	ldr	r3, [pc, #216]	; (8004138 <xTaskPriorityInherit+0xf4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d259      	bcs.n	800411c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	db06      	blt.n	800407e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <xTaskPriorityInherit+0xf4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004076:	f1c3 0205 	rsb	r2, r3, #5
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6959      	ldr	r1, [r3, #20]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4a2b      	ldr	r2, [pc, #172]	; (800413c <xTaskPriorityInherit+0xf8>)
 8004090:	4413      	add	r3, r2
 8004092:	4299      	cmp	r1, r3
 8004094:	d13a      	bne.n	800410c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3304      	adds	r3, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fbb2 	bl	8002804 <uxListRemove>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d115      	bne.n	80040d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	4924      	ldr	r1, [pc, #144]	; (800413c <xTaskPriorityInherit+0xf8>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xTaskPriorityInherit+0x8e>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	2201      	movs	r2, #1
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43da      	mvns	r2, r3
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <xTaskPriorityInherit+0xfc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4013      	ands	r3, r2
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <xTaskPriorityInherit+0xfc>)
 80040d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040d2:	4b19      	ldr	r3, [pc, #100]	; (8004138 <xTaskPriorityInherit+0xf4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	2201      	movs	r2, #1
 80040e2:	409a      	lsls	r2, r3
 80040e4:	4b16      	ldr	r3, [pc, #88]	; (8004140 <xTaskPriorityInherit+0xfc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <xTaskPriorityInherit+0xfc>)
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <xTaskPriorityInherit+0xf8>)
 80040fc:	441a      	add	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f7fe fb20 	bl	800274a <vListInsertEnd>
 800410a:	e004      	b.n	8004116 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <xTaskPriorityInherit+0xf4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e008      	b.n	800412e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <xTaskPriorityInherit+0xf4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	429a      	cmp	r2, r3
 8004128:	d201      	bcs.n	800412e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800412a:	2301      	movs	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800412e:	68fb      	ldr	r3, [r7, #12]
	}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	2000002c 	.word	0x2000002c
 800413c:	20000030 	.word	0x20000030
 8004140:	2000010c 	.word	0x2000010c

08004144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d06e      	beq.n	8004238 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800415a:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <xTaskPriorityDisinherit+0x100>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	429a      	cmp	r2, r3
 8004162:	d00a      	beq.n	800417a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60fb      	str	r3, [r7, #12]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60bb      	str	r3, [r7, #8]
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419c:	1e5a      	subs	r2, r3, #1
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d044      	beq.n	8004238 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d140      	bne.n	8004238 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fb22 	bl	8002804 <uxListRemove>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d115      	bne.n	80041f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	491f      	ldr	r1, [pc, #124]	; (8004248 <xTaskPriorityDisinherit+0x104>)
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xTaskPriorityDisinherit+0xae>
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	2201      	movs	r2, #1
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <xTaskPriorityDisinherit+0x108>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4013      	ands	r3, r2
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <xTaskPriorityDisinherit+0x108>)
 80041f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	f1c3 0205 	rsb	r2, r3, #5
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	2201      	movs	r2, #1
 800420c:	409a      	lsls	r2, r3
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <xTaskPriorityDisinherit+0x108>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4313      	orrs	r3, r2
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <xTaskPriorityDisinherit+0x108>)
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <xTaskPriorityDisinherit+0x104>)
 8004226:	441a      	add	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f7fe fa8b 	bl	800274a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004238:	697b      	ldr	r3, [r7, #20]
	}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	2000002c 	.word	0x2000002c
 8004248:	20000030 	.word	0x20000030
 800424c:	2000010c 	.word	0x2000010c

08004250 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800425e:	2301      	movs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8083 	beq.w	8004370 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60fb      	str	r3, [r7, #12]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d902      	bls.n	8004298 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e002      	b.n	800429e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d063      	beq.n	8004370 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d15e      	bne.n	8004370 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d10a      	bne.n	80042d2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60bb      	str	r3, [r7, #8]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	db04      	blt.n	80042f0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f1c3 0205 	rsb	r2, r3, #5
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	6959      	ldr	r1, [r3, #20]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4a1f      	ldr	r2, [pc, #124]	; (800437c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004300:	4413      	add	r3, r2
 8004302:	4299      	cmp	r1, r3
 8004304:	d134      	bne.n	8004370 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	3304      	adds	r3, #4
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fa7a 	bl	8002804 <uxListRemove>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d115      	bne.n	8004342 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	4918      	ldr	r1, [pc, #96]	; (800437c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2201      	movs	r2, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4013      	ands	r3, r2
 800433e:	4a10      	ldr	r2, [pc, #64]	; (8004380 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004340:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	2201      	movs	r2, #1
 8004348:	409a      	lsls	r2, r3
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4a06      	ldr	r2, [pc, #24]	; (800437c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004362:	441a      	add	r2, r3
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f7fe f9ed 	bl	800274a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004370:	bf00      	nop
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	2000002c 	.word	0x2000002c
 800437c:	20000030 	.word	0x20000030
 8004380:	2000010c 	.word	0x2000010c

08004384 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004396:	3201      	adds	r2, #1
 8004398:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800439a:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800439c:	681b      	ldr	r3, [r3, #0]
	}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	2000002c 	.word	0x2000002c

080043ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <prvAddCurrentTaskToDelayedList+0xb0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043bc:	4b28      	ldr	r3, [pc, #160]	; (8004460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fa1e 	bl	8002804 <uxListRemove>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10b      	bne.n	80043e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043ce:	4b24      	ldr	r3, [pc, #144]	; (8004460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	2201      	movs	r2, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43da      	mvns	r2, r3
 80043dc:	4b21      	ldr	r3, [pc, #132]	; (8004464 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4013      	ands	r3, r2
 80043e2:	4a20      	ldr	r2, [pc, #128]	; (8004464 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d10a      	bne.n	8004404 <prvAddCurrentTaskToDelayedList+0x58>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d007      	beq.n	8004404 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	481a      	ldr	r0, [pc, #104]	; (8004468 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043fe:	f7fe f9a4 	bl	800274a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004402:	e026      	b.n	8004452 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <prvAddCurrentTaskToDelayedList+0xb4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	429a      	cmp	r2, r3
 800441a:	d209      	bcs.n	8004430 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <prvAddCurrentTaskToDelayedList+0xc0>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f7fe f9b2 	bl	8002792 <vListInsert>
}
 800442e:	e010      	b.n	8004452 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f7fe f9a8 	bl	8002792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d202      	bcs.n	8004452 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800444c:	4a09      	ldr	r2, [pc, #36]	; (8004474 <prvAddCurrentTaskToDelayedList+0xc8>)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6013      	str	r3, [r2, #0]
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000108 	.word	0x20000108
 8004460:	2000002c 	.word	0x2000002c
 8004464:	2000010c 	.word	0x2000010c
 8004468:	200000f0 	.word	0x200000f0
 800446c:	200000c0 	.word	0x200000c0
 8004470:	200000bc 	.word	0x200000bc
 8004474:	20000124 	.word	0x20000124

08004478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800447e:	2300      	movs	r3, #0
 8004480:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004482:	f000 fad5 	bl	8004a30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <xTimerCreateTimerTask+0x54>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <xTimerCreateTimerTask+0x58>)
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	2302      	movs	r3, #2
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2300      	movs	r3, #0
 8004498:	f44f 7282 	mov.w	r2, #260	; 0x104
 800449c:	490d      	ldr	r1, [pc, #52]	; (80044d4 <xTimerCreateTimerTask+0x5c>)
 800449e:	480e      	ldr	r0, [pc, #56]	; (80044d8 <xTimerCreateTimerTask+0x60>)
 80044a0:	f7ff f838 	bl	8003514 <xTaskCreate>
 80044a4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	603b      	str	r3, [r7, #0]
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80044c2:	687b      	ldr	r3, [r7, #4]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000160 	.word	0x20000160
 80044d0:	20000164 	.word	0x20000164
 80044d4:	08005398 	.word	0x08005398
 80044d8:	08004611 	.word	0x08004611

080044dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xTimerGenericCommand+0x2e>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	623b      	str	r3, [r7, #32]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <xTimerGenericCommand+0x98>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02a      	beq.n	8004568 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b05      	cmp	r3, #5
 8004522:	dc18      	bgt.n	8004556 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004524:	f7ff fd70 	bl	8004008 <xTaskGetSchedulerState>
 8004528:	4603      	mov	r3, r0
 800452a:	2b02      	cmp	r3, #2
 800452c:	d109      	bne.n	8004542 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <xTimerGenericCommand+0x98>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f107 0114 	add.w	r1, r7, #20
 8004536:	2300      	movs	r3, #0
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	f7fe fa55 	bl	80029e8 <xQueueGenericSend>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24
 8004540:	e012      	b.n	8004568 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <xTimerGenericCommand+0x98>)
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	f107 0114 	add.w	r1, r7, #20
 800454a:	2300      	movs	r3, #0
 800454c:	2200      	movs	r2, #0
 800454e:	f7fe fa4b 	bl	80029e8 <xQueueGenericSend>
 8004552:	6278      	str	r0, [r7, #36]	; 0x24
 8004554:	e008      	b.n	8004568 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <xTimerGenericCommand+0x98>)
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	f107 0114 	add.w	r1, r7, #20
 800455e:	2300      	movs	r3, #0
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	f7fe fb3f 	bl	8002be4 <xQueueGenericSendFromISR>
 8004566:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800456a:	4618      	mov	r0, r3
 800456c:	3728      	adds	r7, #40	; 0x28
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20000160 	.word	0x20000160

08004578 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <prvProcessExpiredTimer+0x94>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3304      	adds	r3, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f7fe f937 	bl	8002804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d022      	beq.n	80045ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	18d1      	adds	r1, r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	6978      	ldr	r0, [r7, #20]
 80045b2:	f000 f8d1 	bl	8004758 <prvInsertTimerInActiveList>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01f      	beq.n	80045fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045bc:	2300      	movs	r3, #0
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	2100      	movs	r1, #0
 80045c6:	6978      	ldr	r0, [r7, #20]
 80045c8:	f7ff ff88 	bl	80044dc <xTimerGenericCommand>
 80045cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d113      	bne.n	80045fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60fb      	str	r3, [r7, #12]
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	6978      	ldr	r0, [r7, #20]
 8004602:	4798      	blx	r3
}
 8004604:	bf00      	nop
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000158 	.word	0x20000158

08004610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f857 	bl	80046d0 <prvGetNextExpireTime>
 8004622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4619      	mov	r1, r3
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f803 	bl	8004634 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800462e:	f000 f8d5 	bl	80047dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004632:	e7f1      	b.n	8004618 <prvTimerTask+0x8>

08004634 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800463e:	f7ff f929 	bl	8003894 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f866 	bl	8004718 <prvSampleTimeNow>
 800464c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d130      	bne.n	80046b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <prvProcessTimerOrBlockTask+0x3c>
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	429a      	cmp	r2, r3
 8004660:	d806      	bhi.n	8004670 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004662:	f7ff f925 	bl	80038b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ff85 	bl	8004578 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800466e:	e024      	b.n	80046ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004676:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <prvProcessTimerOrBlockTask+0x90>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <prvProcessTimerOrBlockTask+0x50>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <prvProcessTimerOrBlockTask+0x52>
 8004684:	2300      	movs	r3, #0
 8004686:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <prvProcessTimerOrBlockTask+0x94>)
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	4619      	mov	r1, r3
 8004696:	f7fe ff09 	bl	80034ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800469a:	f7ff f909 	bl	80038b0 <xTaskResumeAll>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <prvProcessTimerOrBlockTask+0x98>)
 80046a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	f3bf 8f6f 	isb	sy
}
 80046b4:	e001      	b.n	80046ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046b6:	f7ff f8fb 	bl	80038b0 <xTaskResumeAll>
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000015c 	.word	0x2000015c
 80046c8:	20000160 	.word	0x20000160
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <prvGetNextExpireTime+0x44>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <prvGetNextExpireTime+0x16>
 80046e2:	2201      	movs	r2, #1
 80046e4:	e000      	b.n	80046e8 <prvGetNextExpireTime+0x18>
 80046e6:	2200      	movs	r2, #0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <prvGetNextExpireTime+0x44>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e001      	b.n	8004704 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004704:	68fb      	ldr	r3, [r7, #12]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000158 	.word	0x20000158

08004718 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004720:	f7ff f962 	bl	80039e8 <xTaskGetTickCount>
 8004724:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <prvSampleTimeNow+0x3c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d205      	bcs.n	800473c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004730:	f000 f91a 	bl	8004968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e002      	b.n	8004742 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004742:	4a04      	ldr	r2, [pc, #16]	; (8004754 <prvSampleTimeNow+0x3c>)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004748:	68fb      	ldr	r3, [r7, #12]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000168 	.word	0x20000168

08004758 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d812      	bhi.n	80047a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e01b      	b.n	80047ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <prvInsertTimerInActiveList+0x7c>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7fd fff8 	bl	8002792 <vListInsert>
 80047a2:	e012      	b.n	80047ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d206      	bcs.n	80047ba <prvInsertTimerInActiveList+0x62>
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d302      	bcc.n	80047ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	e007      	b.n	80047ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <prvInsertTimerInActiveList+0x80>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7fd ffe4 	bl	8002792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047ca:	697b      	ldr	r3, [r7, #20]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2000015c 	.word	0x2000015c
 80047d8:	20000158 	.word	0x20000158

080047dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047e2:	e0ae      	b.n	8004942 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f2c0 80aa 	blt.w	8004940 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	3304      	adds	r3, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe f801 	bl	8002804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004802:	1d3b      	adds	r3, r7, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff87 	bl	8004718 <prvSampleTimeNow>
 800480a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b09      	cmp	r3, #9
 8004810:	f200 8097 	bhi.w	8004942 <prvProcessReceivedCommands+0x166>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <prvProcessReceivedCommands+0x40>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004845 	.word	0x08004845
 8004820:	08004845 	.word	0x08004845
 8004824:	08004845 	.word	0x08004845
 8004828:	080048b9 	.word	0x080048b9
 800482c:	080048cd 	.word	0x080048cd
 8004830:	08004917 	.word	0x08004917
 8004834:	08004845 	.word	0x08004845
 8004838:	08004845 	.word	0x08004845
 800483c:	080048b9 	.word	0x080048b9
 8004840:	080048cd 	.word	0x080048cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	b2da      	uxtb	r2, r3
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	18d1      	adds	r1, r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004864:	f7ff ff78 	bl	8004758 <prvInsertTimerInActiveList>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d069      	beq.n	8004942 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05e      	beq.n	8004942 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	441a      	add	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	2100      	movs	r1, #0
 8004894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004896:	f7ff fe21 	bl	80044dc <xTimerGenericCommand>
 800489a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d14f      	bne.n	8004942 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61bb      	str	r3, [r7, #24]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048ca:	e03a      	b.n	8004942 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	617b      	str	r3, [r7, #20]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	18d1      	adds	r1, r2, r3
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004910:	f7ff ff22 	bl	8004758 <prvInsertTimerInActiveList>
					break;
 8004914:	e015      	b.n	8004942 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004926:	f000 fbcb 	bl	80050c0 <vPortFree>
 800492a:	e00a      	b.n	8004942 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800493e:	e000      	b.n	8004942 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <prvProcessReceivedCommands+0x188>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f107 0108 	add.w	r1, r7, #8
 800494a:	2200      	movs	r2, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fa6f 	bl	8002e30 <xQueueReceive>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	f47f af45 	bne.w	80047e4 <prvProcessReceivedCommands+0x8>
	}
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	3728      	adds	r7, #40	; 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000160 	.word	0x20000160

08004968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496e:	e048      	b.n	8004a02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004970:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497a:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd ff3b 	bl	8002804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02e      	beq.n	8004a02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90e      	bls.n	80049d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049c2:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fd fee0 	bl	8002792 <vListInsert>
 80049d2:	e016      	b.n	8004a02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	2100      	movs	r1, #0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fd7c 	bl	80044dc <xTimerGenericCommand>
 80049e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1b1      	bne.n	8004970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004a18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a1a:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000158 	.word	0x20000158
 8004a2c:	2000015c 	.word	0x2000015c

08004a30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a34:	f000 f95e 	bl	8004cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <prvCheckForValidListAndQueue+0x54>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11d      	bne.n	8004a7c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a40:	4811      	ldr	r0, [pc, #68]	; (8004a88 <prvCheckForValidListAndQueue+0x58>)
 8004a42:	f7fd fe55 	bl	80026f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a46:	4811      	ldr	r0, [pc, #68]	; (8004a8c <prvCheckForValidListAndQueue+0x5c>)
 8004a48:	f7fd fe52 	bl	80026f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <prvCheckForValidListAndQueue+0x60>)
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <prvCheckForValidListAndQueue+0x58>)
 8004a50:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <prvCheckForValidListAndQueue+0x64>)
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <prvCheckForValidListAndQueue+0x5c>)
 8004a56:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004a58:	2200      	movs	r2, #0
 8004a5a:	210c      	movs	r1, #12
 8004a5c:	200a      	movs	r0, #10
 8004a5e:	f7fd ff63 	bl	8002928 <xQueueGenericCreate>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4a07      	ldr	r2, [pc, #28]	; (8004a84 <prvCheckForValidListAndQueue+0x54>)
 8004a66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <prvCheckForValidListAndQueue+0x54>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a70:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <prvCheckForValidListAndQueue+0x54>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4908      	ldr	r1, [pc, #32]	; (8004a98 <prvCheckForValidListAndQueue+0x68>)
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fcee 	bl	8003458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a7c:	f000 f96a 	bl	8004d54 <vPortExitCritical>
}
 8004a80:	bf00      	nop
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000160 	.word	0x20000160
 8004a88:	20000130 	.word	0x20000130
 8004a8c:	20000144 	.word	0x20000144
 8004a90:	20000158 	.word	0x20000158
 8004a94:	2000015c 	.word	0x2000015c
 8004a98:	080053a0 	.word	0x080053a0

08004a9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3b04      	subs	r3, #4
 8004aac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3b04      	subs	r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b04      	subs	r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004acc:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <pxPortInitialiseStack+0x64>)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b14      	subs	r3, #20
 8004ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f06f 0202 	mvn.w	r2, #2
 8004aea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3b20      	subs	r3, #32
 8004af0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	08004b05 	.word	0x08004b05

08004b04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b0e:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <prvTaskExitError+0x54>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d00a      	beq.n	8004b2e <prvTaskExitError+0x2a>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60fb      	str	r3, [r7, #12]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <prvTaskExitError+0x28>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60bb      	str	r3, [r7, #8]
}
 8004b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b42:	bf00      	nop
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0fc      	beq.n	8004b44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	2000000c 	.word	0x2000000c
 8004b5c:	00000000 	.word	0x00000000

08004b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <pxCurrentTCBConst2>)
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	6808      	ldr	r0, [r1, #0]
 8004b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	f380 8809 	msr	PSP, r0
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f380 8811 	msr	BASEPRI, r0
 8004b7a:	4770      	bx	lr
 8004b7c:	f3af 8000 	nop.w

08004b80 <pxCurrentTCBConst2>:
 8004b80:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b88:	4808      	ldr	r0, [pc, #32]	; (8004bac <prvPortStartFirstTask+0x24>)
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	6800      	ldr	r0, [r0, #0]
 8004b8e:	f380 8808 	msr	MSP, r0
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8814 	msr	CONTROL, r0
 8004b9a:	b662      	cpsie	i
 8004b9c:	b661      	cpsie	f
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	df00      	svc	0
 8004ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004baa:	bf00      	nop
 8004bac:	e000ed08 	.word	0xe000ed08

08004bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bb6:	4b46      	ldr	r3, [pc, #280]	; (8004cd0 <xPortStartScheduler+0x120>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a46      	ldr	r2, [pc, #280]	; (8004cd4 <xPortStartScheduler+0x124>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10a      	bne.n	8004bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	613b      	str	r3, [r7, #16]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	; (8004cd0 <xPortStartScheduler+0x120>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3f      	ldr	r2, [pc, #252]	; (8004cd8 <xPortStartScheduler+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10a      	bne.n	8004bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bf6:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	22ff      	movs	r2, #255	; 0xff
 8004c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <xPortStartScheduler+0x130>)
 8004c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c1e:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c20:	2207      	movs	r2, #7
 8004c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c24:	e009      	b.n	8004c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c26:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d0ef      	beq.n	8004c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c46:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1c3 0307 	rsb	r3, r3, #7
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d00a      	beq.n	8004c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60bb      	str	r3, [r7, #8]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c68:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c86:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <xPortStartScheduler+0x138>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <xPortStartScheduler+0x138>)
 8004c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <xPortStartScheduler+0x138>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <xPortStartScheduler+0x138>)
 8004c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c9e:	f000 f8dd 	bl	8004e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <xPortStartScheduler+0x13c>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ca8:	f000 f8fc 	bl	8004ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cac:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <xPortStartScheduler+0x140>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0f      	ldr	r2, [pc, #60]	; (8004cf0 <xPortStartScheduler+0x140>)
 8004cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cb8:	f7ff ff66 	bl	8004b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cbc:	f7fe ff5c 	bl	8003b78 <vTaskSwitchContext>
	prvTaskExitError();
 8004cc0:	f7ff ff20 	bl	8004b04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000ed00 	.word	0xe000ed00
 8004cd4:	410fc271 	.word	0x410fc271
 8004cd8:	410fc270 	.word	0x410fc270
 8004cdc:	e000e400 	.word	0xe000e400
 8004ce0:	2000016c 	.word	0x2000016c
 8004ce4:	20000170 	.word	0x20000170
 8004ce8:	e000ed20 	.word	0xe000ed20
 8004cec:	2000000c 	.word	0x2000000c
 8004cf0:	e000ef34 	.word	0xe000ef34

08004cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	607b      	str	r3, [r7, #4]
}
 8004d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <vPortEnterCritical+0x58>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <vPortEnterCritical+0x58>)
 8004d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <vPortEnterCritical+0x58>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10f      	bne.n	8004d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <vPortEnterCritical+0x5c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	603b      	str	r3, [r7, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <vPortEnterCritical+0x4a>
	}
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	2000000c 	.word	0x2000000c
 8004d50:	e000ed04 	.word	0xe000ed04

08004d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <vPortExitCritical+0x50>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <vPortExitCritical+0x24>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	607b      	str	r3, [r7, #4]
}
 8004d74:	bf00      	nop
 8004d76:	e7fe      	b.n	8004d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <vPortExitCritical+0x50>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <vPortExitCritical+0x50>)
 8004d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <vPortExitCritical+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d105      	bne.n	8004d96 <vPortExitCritical+0x42>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f383 8811 	msr	BASEPRI, r3
}
 8004d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	2000000c 	.word	0x2000000c
	...

08004db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004db0:	f3ef 8009 	mrs	r0, PSP
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <pxCurrentTCBConst>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f01e 0f10 	tst.w	lr, #16
 8004dc0:	bf08      	it	eq
 8004dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dca:	6010      	str	r0, [r2, #0]
 8004dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004dd4:	f380 8811 	msr	BASEPRI, r0
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f7fe feca 	bl	8003b78 <vTaskSwitchContext>
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f380 8811 	msr	BASEPRI, r0
 8004dec:	bc09      	pop	{r0, r3}
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df6:	f01e 0f10 	tst.w	lr, #16
 8004dfa:	bf08      	it	eq
 8004dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e00:	f380 8809 	msr	PSP, r0
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst>:
 8004e10:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	607b      	str	r3, [r7, #4]
}
 8004e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e32:	f7fe fde9 	bl	8003a08 <xTaskIncrementTick>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <SysTick_Handler+0x40>)
 8004e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f383 8811 	msr	BASEPRI, r3
}
 8004e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <vPortSetupTimerInterrupt+0x34>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <vPortSetupTimerInterrupt+0x38>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <vPortSetupTimerInterrupt+0x3c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <vPortSetupTimerInterrupt+0x40>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <vPortSetupTimerInterrupt+0x44>)
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <vPortSetupTimerInterrupt+0x34>)
 8004e80:	2207      	movs	r2, #7
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000e010 	.word	0xe000e010
 8004e94:	e000e018 	.word	0xe000e018
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	10624dd3 	.word	0x10624dd3
 8004ea0:	e000e014 	.word	0xe000e014

08004ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004eb4 <vPortEnableVFP+0x10>
 8004ea8:	6801      	ldr	r1, [r0, #0]
 8004eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eae:	6001      	str	r1, [r0, #0]
 8004eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004eb2:	bf00      	nop
 8004eb4:	e000ed88 	.word	0xe000ed88

08004eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ebe:	f3ef 8305 	mrs	r3, IPSR
 8004ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	d914      	bls.n	8004ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <vPortValidateInterruptPriority+0x70>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ed4:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <vPortValidateInterruptPriority+0x74>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	7afa      	ldrb	r2, [r7, #11]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d20a      	bcs.n	8004ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <vPortValidateInterruptPriority+0x78>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <vPortValidateInterruptPriority+0x7c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d90a      	bls.n	8004f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	603b      	str	r3, [r7, #0]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <vPortValidateInterruptPriority+0x60>
	}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000e3f0 	.word	0xe000e3f0
 8004f2c:	2000016c 	.word	0x2000016c
 8004f30:	e000ed0c 	.word	0xe000ed0c
 8004f34:	20000170 	.word	0x20000170

08004f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f44:	f7fe fca6 	bl	8003894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f48:	4b58      	ldr	r3, [pc, #352]	; (80050ac <pvPortMalloc+0x174>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f50:	f000 f910 	bl	8005174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f54:	4b56      	ldr	r3, [pc, #344]	; (80050b0 <pvPortMalloc+0x178>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 808e 	bne.w	800507e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01d      	beq.n	8004fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f68:	2208      	movs	r2, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d014      	beq.n	8004fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	3308      	adds	r3, #8
 8004f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	617b      	str	r3, [r7, #20]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d069      	beq.n	800507e <pvPortMalloc+0x146>
 8004faa:	4b42      	ldr	r3, [pc, #264]	; (80050b4 <pvPortMalloc+0x17c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d864      	bhi.n	800507e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fb4:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <pvPortMalloc+0x180>)
 8004fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fb8:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <pvPortMalloc+0x180>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fbe:	e004      	b.n	8004fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d903      	bls.n	8004fdc <pvPortMalloc+0xa4>
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f1      	bne.n	8004fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fdc:	4b33      	ldr	r3, [pc, #204]	; (80050ac <pvPortMalloc+0x174>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d04b      	beq.n	800507e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	2308      	movs	r3, #8
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	429a      	cmp	r2, r3
 8005006:	d91f      	bls.n	8005048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <pvPortMalloc+0xf8>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	613b      	str	r3, [r7, #16]
}
 800502c:	bf00      	nop
 800502e:	e7fe      	b.n	800502e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005042:	69b8      	ldr	r0, [r7, #24]
 8005044:	f000 f8f8 	bl	8005238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005048:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <pvPortMalloc+0x17c>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <pvPortMalloc+0x17c>)
 8005054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005056:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <pvPortMalloc+0x17c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b18      	ldr	r3, [pc, #96]	; (80050bc <pvPortMalloc+0x184>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d203      	bcs.n	800506a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <pvPortMalloc+0x17c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <pvPortMalloc+0x184>)
 8005068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <pvPortMalloc+0x178>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	431a      	orrs	r2, r3
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800507e:	f7fe fc17 	bl	80038b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <pvPortMalloc+0x16a>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	60fb      	str	r3, [r7, #12]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <pvPortMalloc+0x168>
	return pvReturn;
 80050a2:	69fb      	ldr	r3, [r7, #28]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3728      	adds	r7, #40	; 0x28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20012d7c 	.word	0x20012d7c
 80050b0:	20012d88 	.word	0x20012d88
 80050b4:	20012d80 	.word	0x20012d80
 80050b8:	20012d74 	.word	0x20012d74
 80050bc:	20012d84 	.word	0x20012d84

080050c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d048      	beq.n	8005164 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050d2:	2308      	movs	r3, #8
 80050d4:	425b      	negs	r3, r3
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4b21      	ldr	r3, [pc, #132]	; (800516c <vPortFree+0xac>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <vPortFree+0x44>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60fb      	str	r3, [r7, #12]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <vPortFree+0x62>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60bb      	str	r3, [r7, #8]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <vPortFree+0xac>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4013      	ands	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d019      	beq.n	8005164 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d115      	bne.n	8005164 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <vPortFree+0xac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	43db      	mvns	r3, r3
 8005142:	401a      	ands	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005148:	f7fe fba4 	bl	8003894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <vPortFree+0xb0>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4413      	add	r3, r2
 8005156:	4a06      	ldr	r2, [pc, #24]	; (8005170 <vPortFree+0xb0>)
 8005158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800515a:	6938      	ldr	r0, [r7, #16]
 800515c:	f000 f86c 	bl	8005238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005160:	f7fe fba6 	bl	80038b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20012d88 	.word	0x20012d88
 8005170:	20012d80 	.word	0x20012d80

08005174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800517a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800517e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <prvHeapInit+0xac>)
 8005182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3307      	adds	r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0307 	bic.w	r3, r3, #7
 800519a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <prvHeapInit+0xac>)
 80051a4:	4413      	add	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <prvHeapInit+0xb0>)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <prvHeapInit+0xb0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4413      	add	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051c0:	2208      	movs	r2, #8
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0307 	bic.w	r3, r3, #7
 80051ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <prvHeapInit+0xb4>)
 80051d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <prvHeapInit+0xb4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <prvHeapInit+0xb4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvHeapInit+0xb4>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a0a      	ldr	r2, [pc, #40]	; (800522c <prvHeapInit+0xb8>)
 8005202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a09      	ldr	r2, [pc, #36]	; (8005230 <prvHeapInit+0xbc>)
 800520a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <prvHeapInit+0xc0>)
 800520e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	20000174 	.word	0x20000174
 8005224:	20012d74 	.word	0x20012d74
 8005228:	20012d7c 	.word	0x20012d7c
 800522c:	20012d84 	.word	0x20012d84
 8005230:	20012d80 	.word	0x20012d80
 8005234:	20012d88 	.word	0x20012d88

08005238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005240:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <prvInsertBlockIntoFreeList+0xac>)
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e002      	b.n	800524c <prvInsertBlockIntoFreeList+0x14>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d8f7      	bhi.n	8005246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	d108      	bne.n	800527a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d118      	bne.n	80052c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d00d      	beq.n	80052b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e008      	b.n	80052c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <prvInsertBlockIntoFreeList+0xb0>)
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e003      	b.n	80052c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d002      	beq.n	80052d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20012d74 	.word	0x20012d74
 80052e8:	20012d7c 	.word	0x20012d7c

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4d0d      	ldr	r5, [pc, #52]	; (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	; (8005328 <__libc_init_array+0x3c>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2600      	movs	r6, #0
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4d0b      	ldr	r5, [pc, #44]	; (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	; (8005330 <__libc_init_array+0x44>)
 8005300:	f000 f82e 	bl	8005360 <_init>
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2600      	movs	r6, #0
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	080053c8 	.word	0x080053c8
 8005328:	080053c8 	.word	0x080053c8
 800532c:	080053c8 	.word	0x080053c8
 8005330:	080053cc 	.word	0x080053cc

08005334 <memcpy>:
 8005334:	440a      	add	r2, r1
 8005336:	4291      	cmp	r1, r2
 8005338:	f100 33ff 	add.w	r3, r0, #4294967295
 800533c:	d100      	bne.n	8005340 <memcpy+0xc>
 800533e:	4770      	bx	lr
 8005340:	b510      	push	{r4, lr}
 8005342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800534a:	4291      	cmp	r1, r2
 800534c:	d1f9      	bne.n	8005342 <memcpy+0xe>
 800534e:	bd10      	pop	{r4, pc}

08005350 <memset>:
 8005350:	4402      	add	r2, r0
 8005352:	4603      	mov	r3, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	d100      	bne.n	800535a <memset+0xa>
 8005358:	4770      	bx	lr
 800535a:	f803 1b01 	strb.w	r1, [r3], #1
 800535e:	e7f9      	b.n	8005354 <memset+0x4>

08005360 <_init>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	bf00      	nop
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr

0800536c <_fini>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr
